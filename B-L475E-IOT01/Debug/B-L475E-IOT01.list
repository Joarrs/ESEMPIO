
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea0  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe0  08006fe0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe8  08006fe8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006ff0  08006ff0  00016ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001294  200000a0  08007098  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00016804  20001334  08007098  00021334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3c7  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a8  00000000  00000000  0003e497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012cda  00000000  00000000  00041c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00054920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001580  00000000  00000000  00055998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a83d  00000000  00000000  00056f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dac3  00000000  00000000  00081755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104ce5  00000000  00000000  0009f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a3efd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f74  00000000  00000000  001a3f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006124 	.word	0x08006124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08006124 	.word	0x08006124

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SendWebPage.constprop.0>:
/**
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
 8000584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8000586:	492e      	ldr	r1, [pc, #184]	; (8000640 <SendWebPage.constprop.0+0xbc>)
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
 8000588:	4604      	mov	r4, r0
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 800058a:	482e      	ldr	r0, [pc, #184]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 800058c:	f004 fb81 	bl	8004c92 <strcpy>
  strcat((char *)http, (char *)"<html>\r\n");
 8000590:	492d      	ldr	r1, [pc, #180]	; (8000648 <SendWebPage.constprop.0+0xc4>)
 8000592:	482c      	ldr	r0, [pc, #176]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 8000594:	f004 fb6e 	bl	8004c74 <strcat>
  strcat((char *)http, (char *)"<head>\r\n");
 8000598:	492c      	ldr	r1, [pc, #176]	; (800064c <SendWebPage.constprop.0+0xc8>)
 800059a:	482a      	ldr	r0, [pc, #168]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 800059c:	f004 fb6a 	bl	8004c74 <strcat>
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 80005a0:	492b      	ldr	r1, [pc, #172]	; (8000650 <SendWebPage.constprop.0+0xcc>)
 80005a2:	4828      	ldr	r0, [pc, #160]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005a4:	f004 fb66 	bl	8004c74 <strcat>
  strcat((char *)http, (char *)"<meta http-equiv=\"refresh\" content=\"15\">\r\n");
 80005a8:	492a      	ldr	r1, [pc, #168]	; (8000654 <SendWebPage.constprop.0+0xd0>)
 80005aa:	4826      	ldr	r0, [pc, #152]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005ac:	f004 fb62 	bl	8004c74 <strcat>
  strcat((char *)http, (char *)"<style> body {background: linear-gradient(26deg, #96A242 0%, #ACCE46 34%, #fff 100%);}\r\n .toggle {\r\nposition : relative ;\r\ndisplay : inline-block;\r\nwidth : 100px;\r\nheight : 52px;\r\nbackground-color: red;\r\nborder-radius: 30px;\r\nborder: 2px solid gray;\r\n}\r\n.toggle:after {\r\ncontent: '';\r\nposition: absolute;\r\nwidth: 50px;\r\nheight: 50px;\r\nborder-radius: 50%;\r\nbackground-color: gray;\r\ntop: 1px;\r\nleft: 1px;\r\ntransition:  all 0.5s;\r\n}\r\n p {\r\nfont-family: Arial, Helvetica, sans-serif;\r\nfont-weight: bold;\r\n}\r\n.checkbox:checked + .toggle::after{\r\nleft : 49px;\r\n}\r\n.checkbox:checked + .toggle {\r\nbackground-color: green;\r\n}\r\n.checkbox {\r\ndisplay : none;\r\n}\r\n \r\n");
 80005b0:	4929      	ldr	r1, [pc, #164]	; (8000658 <SendWebPage.constprop.0+0xd4>)
 80005b2:	4824      	ldr	r0, [pc, #144]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005b4:	f004 fb5e 	bl	8004c74 <strcat>
  strcat((char *)http, (char *)"h1 {text-align: center; \r\n color: #9A0000; \r\n font-size: 45px; \r\n font-weight: bold;}");
 80005b8:	4928      	ldr	r1, [pc, #160]	; (800065c <SendWebPage.constprop.0+0xd8>)
 80005ba:	4822      	ldr	r0, [pc, #136]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005bc:	f004 fb5a 	bl	8004c74 <strcat>
  strcat((char *)http, (char *)"</style>");
 80005c0:	4927      	ldr	r1, [pc, #156]	; (8000660 <SendWebPage.constprop.0+0xdc>)
 80005c2:	4820      	ldr	r0, [pc, #128]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005c4:	f004 fb56 	bl	8004c74 <strcat>
  strcat((char *)http, (char *)"</head>\r\n<body>\r\n");
 80005c8:	4926      	ldr	r1, [pc, #152]	; (8000664 <SendWebPage.constprop.0+0xe0>)
 80005ca:	481e      	ldr	r0, [pc, #120]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005cc:	f004 fb52 	bl	8004c74 <strcat>
  strcat((char *)http, (char *)"<h1>CONTROLLO POTENZE DOMESTICHE</h1>\r\n");
 80005d0:	4925      	ldr	r1, [pc, #148]	; (8000668 <SendWebPage.constprop.0+0xe4>)
 80005d2:	481c      	ldr	r0, [pc, #112]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005d4:	f004 fb4e 	bl	8004c74 <strcat>
  strcat((char *)http, (char *)"<form method =\"POST\">\r\n");
 80005d8:	4924      	ldr	r1, [pc, #144]	; (800066c <SendWebPage.constprop.0+0xe8>)
 80005da:	481a      	ldr	r0, [pc, #104]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005dc:	f004 fb4a 	bl	8004c74 <strcat>
  if (ledIsOn)
 80005e0:	b33c      	cbz	r4, 8000632 <SendWebPage.constprop.0+0xae>
  {
	//strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
	strcat((char *)http, (char *)"<input type=\"hidden\" name=\"spegni\" value=\"0\">");
 80005e2:	4923      	ldr	r1, [pc, #140]	; (8000670 <SendWebPage.constprop.0+0xec>)
 80005e4:	4817      	ldr	r0, [pc, #92]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005e6:	f004 fb45 	bl	8004c74 <strcat>
    strcat((char *)http, (char *)"<br><input type=\"checkbox\" name=\"spegni\" value=\"1\" checked>LED ACCESO");
 80005ea:	4922      	ldr	r1, [pc, #136]	; (8000674 <SendWebPage.constprop.0+0xf0>)
  }
  else
  {
    //strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
	strcat((char *)http, (char *)"<input type=\"hidden\" name=\"accendi\" value=\"0\">");
    strcat((char *)http, (char *)"<br><input type=\"checkbox\" name=\"accendi\" value=\"1\" >LED ACCESO");
 80005ec:	4815      	ldr	r0, [pc, #84]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005ee:	f004 fb41 	bl	8004c74 <strcat>
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 80005f2:	4921      	ldr	r1, [pc, #132]	; (8000678 <SendWebPage.constprop.0+0xf4>)
 80005f4:	4813      	ldr	r0, [pc, #76]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005f6:	f004 fb3d 	bl	8004c74 <strcat>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 80005fa:	4920      	ldr	r1, [pc, #128]	; (800067c <SendWebPage.constprop.0+0xf8>)
 80005fc:	4811      	ldr	r0, [pc, #68]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 80005fe:	f004 fb39 	bl	8004c74 <strcat>


  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 8000604:	f7ff fde4 	bl	80001d0 <strlen>
 8000608:	f242 7310 	movw	r3, #10000	; 0x2710
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	b282      	uxth	r2, r0
 8000610:	490c      	ldr	r1, [pc, #48]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 8000612:	f10d 030e 	add.w	r3, sp, #14
 8000616:	2000      	movs	r0, #0
 8000618:	f001 fa96 	bl	8001b48 <WIFI_SendData>

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 800061c:	b938      	cbnz	r0, 800062e <SendWebPage.constprop.0+0xaa>
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 8000620:	f7ff fdd6 	bl	80001d0 <strlen>
 8000624:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  {
    ret = WIFI_STATUS_ERROR;
 8000628:	1a18      	subs	r0, r3, r0
 800062a:	bf18      	it	ne
 800062c:	2001      	movne	r0, #1
  }

  return ret;
}
 800062e:	b004      	add	sp, #16
 8000630:	bd10      	pop	{r4, pc}
	strcat((char *)http, (char *)"<input type=\"hidden\" name=\"accendi\" value=\"0\">");
 8000632:	4913      	ldr	r1, [pc, #76]	; (8000680 <SendWebPage.constprop.0+0xfc>)
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <SendWebPage.constprop.0+0xc0>)
 8000636:	f004 fb1d 	bl	8004c74 <strcat>
    strcat((char *)http, (char *)"<br><input type=\"checkbox\" name=\"accendi\" value=\"1\" >LED ACCESO");
 800063a:	4912      	ldr	r1, [pc, #72]	; (8000684 <SendWebPage.constprop.0+0x100>)
 800063c:	e7d6      	b.n	80005ec <SendWebPage.constprop.0+0x68>
 800063e:	bf00      	nop
 8000640:	08006198 	.word	0x08006198
 8000644:	200000bc 	.word	0x200000bc
 8000648:	080061d7 	.word	0x080061d7
 800064c:	080061e0 	.word	0x080061e0
 8000650:	080061e9 	.word	0x080061e9
 8000654:	0800620b 	.word	0x0800620b
 8000658:	08006236 	.word	0x08006236
 800065c:	080064c5 	.word	0x080064c5
 8000660:	0800651b 	.word	0x0800651b
 8000664:	08006524 	.word	0x08006524
 8000668:	08006536 	.word	0x08006536
 800066c:	0800655e 	.word	0x0800655e
 8000670:	08006576 	.word	0x08006576
 8000674:	080065a4 	.word	0x080065a4
 8000678:	08006659 	.word	0x08006659
 800067c:	08006689 	.word	0x08006689
 8000680:	080065ea 	.word	0x080065ea
 8000684:	08006619 	.word	0x08006619

08000688 <main>:
{
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 800068e:	f001 fd07 	bl	80020a0 <HAL_Init>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000692:	2460      	movs	r4, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000694:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000696:	2200      	movs	r2, #0
 8000698:	e9cd 2412 	strd	r2, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800069c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a2:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006aa:	2328      	movs	r3, #40	; 0x28
 80006ac:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ae:	2404      	movs	r4, #4
 80006b0:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	e9cd 3419 	strd	r3, r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b8:	921b      	str	r2, [sp, #108]	; 0x6c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f002 fab1 	bl	8002c20 <HAL_RCC_OscConfig>
 80006be:	b100      	cbz	r0, 80006c2 <main+0x3a>
  {
    /* Initialization Error */
    while(1);
 80006c0:	e7fe      	b.n	80006c0 <main+0x38>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	210f      	movs	r1, #15
 80006c4:	2303      	movs	r3, #3
 80006c6:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ca:	e9cd 0008 	strd	r0, r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	900a      	str	r0, [sp, #40]	; 0x28
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d0:	4621      	mov	r1, r4
 80006d2:	a806      	add	r0, sp, #24
 80006d4:	f002 fd24 	bl	8003120 <HAL_RCC_ClockConfig>
 80006d8:	4604      	mov	r4, r0
 80006da:	b100      	cbz	r0, 80006de <main+0x56>
  {
    /* Initialization Error */
    while(1);
 80006dc:	e7fe      	b.n	80006dc <main+0x54>
  BSP_LED_Init(LED2);
 80006de:	f001 fab7 	bl	8001c50 <BSP_LED_Init>
  BSP_Forno_Init();
 80006e2:	f001 fad7 	bl	8001c94 <BSP_Forno_Init>
  hDiscoUart.Instance = DISCOVERY_COM1;
 80006e6:	49ad      	ldr	r1, [pc, #692]	; (800099c <main+0x314>)
  hDiscoUart.Init.BaudRate = 115200;
 80006e8:	4aad      	ldr	r2, [pc, #692]	; (80009a0 <main+0x318>)
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80006ea:	610c      	str	r4, [r1, #16]
  hDiscoUart.Init.BaudRate = 115200;
 80006ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 80006f4:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80006f6:	230c      	movs	r3, #12
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80006f8:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fc:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000700:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000704:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 8000706:	f001 faf9 	bl	8001cfc <BSP_COM_Init>
  BSP_TSENSOR_Init();
 800070a:	f001 fb8f 	bl	8001e2c <BSP_TSENSOR_Init>
  printf("****** WIFI Web Server demonstration****** \n\n");
 800070e:	48a5      	ldr	r0, [pc, #660]	; (80009a4 <main+0x31c>)
 8000710:	f004 fa88 	bl	8004c24 <puts>
  LOG(("\nRunning HTML Server test\n"));
 8000714:	48a4      	ldr	r0, [pc, #656]	; (80009a8 <main+0x320>)
 8000716:	f004 fa85 	bl	8004c24 <puts>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800071a:	f001 f96b 	bl	80019f4 <WIFI_Init>
 800071e:	b9d0      	cbnz	r0, 8000756 <main+0xce>
    LOG(("ES-WIFI Initialized.\n"));
 8000720:	48a2      	ldr	r0, [pc, #648]	; (80009ac <main+0x324>)
 8000722:	f004 fa7f 	bl	8004c24 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8000726:	a80b      	add	r0, sp, #44	; 0x2c
 8000728:	f001 f99c 	bl	8001a64 <WIFI_GetMAC_Address>
 800072c:	2800      	cmp	r0, #0
 800072e:	f040 809a 	bne.w	8000866 <main+0x1de>
      LOG(("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000732:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000736:	9302      	str	r3, [sp, #8]
 8000738:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8000748:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800074c:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8000750:	4897      	ldr	r0, [pc, #604]	; (80009b0 <main+0x328>)
 8000752:	f004 f9e1 	bl	8004b18 <iprintf>
  LOG(("\nConnecting to %s , %s\n",SSID,PASSWORD));
 8000756:	4a97      	ldr	r2, [pc, #604]	; (80009b4 <main+0x32c>)
 8000758:	4997      	ldr	r1, [pc, #604]	; (80009b8 <main+0x330>)
 800075a:	4898      	ldr	r0, [pc, #608]	; (80009bc <main+0x334>)
 800075c:	f004 f9dc 	bl	8004b18 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8000760:	4994      	ldr	r1, [pc, #592]	; (80009b4 <main+0x32c>)
 8000762:	4895      	ldr	r0, [pc, #596]	; (80009b8 <main+0x330>)
 8000764:	2203      	movs	r2, #3
 8000766:	f001 f969 	bl	8001a3c <WIFI_Connect>
 800076a:	2800      	cmp	r0, #0
 800076c:	f040 8086 	bne.w	800087c <main+0x1f4>
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8000770:	4e93      	ldr	r6, [pc, #588]	; (80009c0 <main+0x338>)
 8000772:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 8000776:	f001 f981 	bl	8001a7c <WIFI_GetIP_Address>
 800077a:	4604      	mov	r4, r0
 800077c:	2800      	cmp	r0, #0
 800077e:	d176      	bne.n	800086e <main+0x1e6>
      LOG(("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8000780:	f896 3403 	ldrb.w	r3, [r6, #1027]	; 0x403
 8000784:	f896 2401 	ldrb.w	r2, [r6, #1025]	; 0x401
 8000788:	f896 1400 	ldrb.w	r1, [r6, #1024]	; 0x400
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	488d      	ldr	r0, [pc, #564]	; (80009c4 <main+0x33c>)
 8000790:	f896 3402 	ldrb.w	r3, [r6, #1026]	; 0x402
 8000794:	f004 f9c0 	bl	8004b18 <iprintf>
  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8000798:	2350      	movs	r3, #80	; 0x50
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2201      	movs	r2, #1
 800079e:	4b8a      	ldr	r3, [pc, #552]	; (80009c8 <main+0x340>)
 80007a0:	4621      	mov	r1, r4
 80007a2:	4620      	mov	r0, r4
 80007a4:	f001 f97a 	bl	8001a9c <WIFI_StartServer>
 80007a8:	b110      	cbz	r0, 80007b0 <main+0x128>
    LOG(("ERROR: Cannot start server.\n"));
 80007aa:	4888      	ldr	r0, [pc, #544]	; (80009cc <main+0x344>)
 80007ac:	f004 fa3a 	bl	8004c24 <puts>
  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 80007b0:	f896 3403 	ldrb.w	r3, [r6, #1027]	; 0x403
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	f896 2401 	ldrb.w	r2, [r6, #1025]	; 0x401
 80007ba:	f896 3402 	ldrb.w	r3, [r6, #1026]	; 0x402
 80007be:	f896 1400 	ldrb.w	r1, [r6, #1024]	; 0x400
 80007c2:	4883      	ldr	r0, [pc, #524]	; (80009d0 <main+0x348>)
    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 80007c4:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8000a34 <main+0x3ac>
  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 80007c8:	4f82      	ldr	r7, [pc, #520]	; (80009d4 <main+0x34c>)
    LOG(("Client close connection\n"));
 80007ca:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8000a38 <main+0x3b0>
  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 80007ce:	f004 f9a3 	bl	8004b18 <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 80007d2:	f10d 0316 	add.w	r3, sp, #22
 80007d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80007d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007dc:	2000      	movs	r0, #0
 80007de:	f001 f977 	bl	8001ad0 <WIFI_WaitServerConnection>
 80007e2:	4604      	mov	r4, r0
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d14b      	bne.n	8000880 <main+0x1f8>
    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 80007e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80007f2:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80007f6:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	4640      	mov	r0, r8
 80007fe:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8000802:	f004 f989 	bl	8004b18 <iprintf>
  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8000806:	f242 7310 	movw	r3, #10000	; 0x2710
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000810:	ab06      	add	r3, sp, #24
 8000812:	4639      	mov	r1, r7
 8000814:	4620      	mov	r0, r4
 8000816:	f001 f9a9 	bl	8001b6c <WIFI_ReceiveData>
 800081a:	4682      	mov	sl, r0
 800081c:	2800      	cmp	r0, #0
 800081e:	f040 80af 	bne.w	8000980 <main+0x2f8>
   LOG(("get %d byte from server\n",respLen));
 8000822:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8000826:	486c      	ldr	r0, [pc, #432]	; (80009d8 <main+0x350>)
 8000828:	f004 f976 	bl	8004b18 <iprintf>
   if( respLen > 0)
 800082c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8000830:	b18c      	cbz	r4, 8000856 <main+0x1ce>
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 8000832:	496a      	ldr	r1, [pc, #424]	; (80009dc <main+0x354>)
 8000834:	4638      	mov	r0, r7
 8000836:	f004 fa5b 	bl	8004cf0 <strstr>
 800083a:	4605      	mov	r5, r0
 800083c:	b388      	cbz	r0, 80008a2 <main+0x21a>
        temp = (int) BSP_TSENSOR_ReadTemp();
 800083e:	f001 fb07 	bl	8001e50 <BSP_TSENSOR_ReadTemp>
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8000842:	f896 0804 	ldrb.w	r0, [r6, #2052]	; 0x804
 8000846:	f7ff fe9d 	bl	8000584 <SendWebPage.constprop.0>
 800084a:	4604      	mov	r4, r0
 800084c:	b328      	cbz	r0, 800089a <main+0x212>
          LOG(("> ERROR : Cannot send web page\n"));
 800084e:	4864      	ldr	r0, [pc, #400]	; (80009e0 <main+0x358>)
 8000850:	f004 f9e8 	bl	8004c24 <puts>
  bool    stopserver=false;
 8000854:	4654      	mov	r4, sl
    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 8000856:	2000      	movs	r0, #0
 8000858:	f001 f95e 	bl	8001b18 <WIFI_CloseServerConnection>
 800085c:	2800      	cmp	r0, #0
 800085e:	f000 8091 	beq.w	8000984 <main+0x2fc>
      LOG(("ERROR: failed to close current Server connection\n"));
 8000862:	4860      	ldr	r0, [pc, #384]	; (80009e4 <main+0x35c>)
 8000864:	e004      	b.n	8000870 <main+0x1e8>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 8000866:	4860      	ldr	r0, [pc, #384]	; (80009e8 <main+0x360>)
 8000868:	f004 f9dc 	bl	8004c24 <puts>
      return -1;
 800086c:	e773      	b.n	8000756 <main+0xce>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 800086e:	485f      	ldr	r0, [pc, #380]	; (80009ec <main+0x364>)
  LOG(("Server is stop\n"));
 8000870:	f004 f9d8 	bl	8004c24 <puts>
}
 8000874:	2000      	movs	r0, #0
 8000876:	b01c      	add	sp, #112	; 0x70
 8000878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 LOG(("ERROR : es-wifi module NOT connected\n"));
 800087c:	485c      	ldr	r0, [pc, #368]	; (80009f0 <main+0x368>)
 800087e:	e7f7      	b.n	8000870 <main+0x1e8>
        LOG(("Waiting connection to  %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000880:	f896 3403 	ldrb.w	r3, [r6, #1027]	; 0x403
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	f896 2401 	ldrb.w	r2, [r6, #1025]	; 0x401
 800088a:	f896 3402 	ldrb.w	r3, [r6, #1026]	; 0x402
 800088e:	f896 1400 	ldrb.w	r1, [r6, #1024]	; 0x400
 8000892:	4858      	ldr	r0, [pc, #352]	; (80009f4 <main+0x36c>)
 8000894:	f004 f940 	bl	8004b18 <iprintf>
 8000898:	e79b      	b.n	80007d2 <main+0x14a>
          LOG(("Send page after  GET command\n"));
 800089a:	4857      	ldr	r0, [pc, #348]	; (80009f8 <main+0x370>)
    LOG(("Client close connection\n"));
 800089c:	f004 f9c2 	bl	8004c24 <puts>
 80008a0:	e7d9      	b.n	8000856 <main+0x1ce>
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 80008a2:	4956      	ldr	r1, [pc, #344]	; (80009fc <main+0x374>)
 80008a4:	4638      	mov	r0, r7
 80008a6:	f004 fa23 	bl	8004cf0 <strstr>
 80008aa:	4604      	mov	r4, r0
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d0d2      	beq.n	8000856 <main+0x1ce>
         LOG(("Post request\n"));
 80008b0:	4853      	ldr	r0, [pc, #332]	; (8000a00 <main+0x378>)
 80008b2:	f004 f9b7 	bl	8004c24 <puts>
         if(strstr((char *)resp, "accendi"))
 80008b6:	4953      	ldr	r1, [pc, #332]	; (8000a04 <main+0x37c>)
 80008b8:	4638      	mov	r0, r7
 80008ba:	f004 fa19 	bl	8004cf0 <strstr>
 80008be:	b180      	cbz	r0, 80008e2 <main+0x25a>
        	   	    if(strstr((char *)resp, "accendi=0&accendi=1"))
 80008c0:	4951      	ldr	r1, [pc, #324]	; (8000a08 <main+0x380>)
 80008c2:	4638      	mov	r0, r7
 80008c4:	f004 fa14 	bl	8004cf0 <strstr>
 80008c8:	4604      	mov	r4, r0
 80008ca:	2800      	cmp	r0, #0
 80008cc:	d038      	beq.n	8000940 <main+0x2b8>
        	                      LedState = 1;
 80008ce:	2301      	movs	r3, #1
        	                      BSP_LED_On(LED2);
 80008d0:	4628      	mov	r0, r5
        	                      LedState = 1;
 80008d2:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
        	                      BSP_LED_On(LED2);
 80008d6:	f001 f9ed 	bl	8001cb4 <BSP_LED_On>
        	                      BSP_Forno_Off();
 80008da:	f001 fa07 	bl	8001cec <BSP_Forno_Off>
                    temp = (int) BSP_TSENSOR_ReadTemp();
 80008de:	f001 fab7 	bl	8001e50 <BSP_TSENSOR_ReadTemp>
         if(strstr((char *)resp, "spegni"))
 80008e2:	494a      	ldr	r1, [pc, #296]	; (8000a0c <main+0x384>)
 80008e4:	4638      	mov	r0, r7
 80008e6:	f004 fa03 	bl	8004cf0 <strstr>
 80008ea:	b178      	cbz	r0, 800090c <main+0x284>
        	 	 	 if(strstr((char *)resp, "spegni=0&spegni=1")){
 80008ec:	4948      	ldr	r1, [pc, #288]	; (8000a10 <main+0x388>)
 80008ee:	4638      	mov	r0, r7
 80008f0:	f004 f9fe 	bl	8004cf0 <strstr>
 80008f4:	4604      	mov	r4, r0
 80008f6:	b388      	cbz	r0, 800095c <main+0x2d4>
        	 	 		 	 LedState = 1;
 80008f8:	2301      	movs	r3, #1
        	         	     BSP_LED_On(LED2);
 80008fa:	2000      	movs	r0, #0
        	 	 		 	 LedState = 1;
 80008fc:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
        	         	     BSP_LED_On(LED2);
 8000900:	f001 f9d8 	bl	8001cb4 <BSP_LED_On>
        	         	     BSP_Forno_Off();
 8000904:	f001 f9f2 	bl	8001cec <BSP_Forno_Off>
                     temp = (int) BSP_TSENSOR_ReadTemp();
 8000908:	f001 faa2 	bl	8001e50 <BSP_TSENSOR_ReadTemp>
         if(strstr((char *)resp, "stop_server"))
 800090c:	4941      	ldr	r1, [pc, #260]	; (8000a14 <main+0x38c>)
 800090e:	4638      	mov	r0, r7
 8000910:	f004 f9ee 	bl	8004cf0 <strstr>
 8000914:	b380      	cbz	r0, 8000978 <main+0x2f0>
           if(strstr((char *)resp, "stop_server=0"))
 8000916:	4940      	ldr	r1, [pc, #256]	; (8000a18 <main+0x390>)
 8000918:	4638      	mov	r0, r7
 800091a:	f004 f9e9 	bl	8004cf0 <strstr>
 800091e:	bb58      	cbnz	r0, 8000978 <main+0x2f0>
           else if(strstr((char *)resp, "stop_server=1"))
 8000920:	493e      	ldr	r1, [pc, #248]	; (8000a1c <main+0x394>)
 8000922:	4638      	mov	r0, r7
 8000924:	f004 f9e4 	bl	8004cf0 <strstr>
 8000928:	1e04      	subs	r4, r0, #0
 800092a:	bf18      	it	ne
 800092c:	2401      	movne	r4, #1
         temp = (int) BSP_TSENSOR_ReadTemp();
 800092e:	f001 fa8f 	bl	8001e50 <BSP_TSENSOR_ReadTemp>
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8000932:	f896 0804 	ldrb.w	r0, [r6, #2052]	; 0x804
 8000936:	f7ff fe25 	bl	8000584 <SendWebPage.constprop.0>
 800093a:	b1f8      	cbz	r0, 800097c <main+0x2f4>
           LOG(("> ERROR : Cannot send web page\n"));
 800093c:	4828      	ldr	r0, [pc, #160]	; (80009e0 <main+0x358>)
 800093e:	e7ad      	b.n	800089c <main+0x214>
        	 	 	else if(strstr((char *)resp, "accendi=0"))
 8000940:	4937      	ldr	r1, [pc, #220]	; (8000a20 <main+0x398>)
 8000942:	4638      	mov	r0, r7
 8000944:	f004 f9d4 	bl	8004cf0 <strstr>
 8000948:	2800      	cmp	r0, #0
 800094a:	d0c8      	beq.n	80008de <main+0x256>
                      BSP_LED_Off(LED2);
 800094c:	4620      	mov	r0, r4
                      LedState = 0;
 800094e:	f8c6 4804 	str.w	r4, [r6, #2052]	; 0x804
                      BSP_LED_Off(LED2);
 8000952:	f001 f9c1 	bl	8001cd8 <BSP_LED_Off>
                      BSP_Forno_On();
 8000956:	f001 f9b7 	bl	8001cc8 <BSP_Forno_On>
 800095a:	e7c0      	b.n	80008de <main+0x256>
        	         else if(strstr((char *)resp, "spegni=0")){
 800095c:	4931      	ldr	r1, [pc, #196]	; (8000a24 <main+0x39c>)
 800095e:	4638      	mov	r0, r7
 8000960:	f004 f9c6 	bl	8004cf0 <strstr>
 8000964:	2800      	cmp	r0, #0
 8000966:	d0cf      	beq.n	8000908 <main+0x280>
        	                 BSP_LED_Off(LED2);
 8000968:	4620      	mov	r0, r4
        	                 LedState = 0;
 800096a:	f8c6 4804 	str.w	r4, [r6, #2052]	; 0x804
        	                 BSP_LED_Off(LED2);
 800096e:	f001 f9b3 	bl	8001cd8 <BSP_LED_Off>
        	                 BSP_Forno_On();
 8000972:	f001 f9a9 	bl	8001cc8 <BSP_Forno_On>
 8000976:	e7c7      	b.n	8000908 <main+0x280>
  bool    stopserver=false;
 8000978:	2400      	movs	r4, #0
 800097a:	e7d8      	b.n	800092e <main+0x2a6>
           LOG(("Send Page after POST command\n"));
 800097c:	482a      	ldr	r0, [pc, #168]	; (8000a28 <main+0x3a0>)
 800097e:	e78d      	b.n	800089c <main+0x214>
    LOG(("Client close connection\n"));
 8000980:	4648      	mov	r0, r9
 8000982:	e78b      	b.n	800089c <main+0x214>
  while(StopServer == false);
 8000984:	2c00      	cmp	r4, #0
 8000986:	f43f af24 	beq.w	80007d2 <main+0x14a>
  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 800098a:	f001 f8d1 	bl	8001b30 <WIFI_StopServer>
 800098e:	b110      	cbz	r0, 8000996 <main+0x30e>
    LOG(("ERROR: Cannot stop server.\n"));
 8000990:	4826      	ldr	r0, [pc, #152]	; (8000a2c <main+0x3a4>)
 8000992:	f004 f947 	bl	8004c24 <puts>
  LOG(("Server is stop\n"));
 8000996:	4826      	ldr	r0, [pc, #152]	; (8000a30 <main+0x3a8>)
 8000998:	e76a      	b.n	8000870 <main+0x1e8>
 800099a:	bf00      	nop
 800099c:	20001290 	.word	0x20001290
 80009a0:	40013800 	.word	0x40013800
 80009a4:	0800669c 	.word	0x0800669c
 80009a8:	080066c9 	.word	0x080066c9
 80009ac:	080066e3 	.word	0x080066e3
 80009b0:	080066f8 	.word	0x080066f8
 80009b4:	08006757 	.word	0x08006757
 80009b8:	08006760 	.word	0x08006760
 80009bc:	0800676c 	.word	0x0800676c
 80009c0:	200000bc 	.word	0x200000bc
 80009c4:	08006784 	.word	0x08006784
 80009c8:	080061d6 	.word	0x080061d6
 80009cc:	08006811 	.word	0x08006811
 80009d0:	0800682d 	.word	0x0800682d
 80009d4:	200004c0 	.word	0x200004c0
 80009d8:	080068bf 	.word	0x080068bf
 80009dc:	080068d8 	.word	0x080068d8
 80009e0:	080068dc 	.word	0x080068dc
 80009e4:	080069cf 	.word	0x080069cf
 80009e8:	08006736 	.word	0x08006736
 80009ec:	080067be 	.word	0x080067be
 80009f0:	080067ec 	.word	0x080067ec
 80009f4:	0800687a 	.word	0x0800687a
 80009f8:	080068fb 	.word	0x080068fb
 80009fc:	08006918 	.word	0x08006918
 8000a00:	0800691d 	.word	0x0800691d
 8000a04:	0800692a 	.word	0x0800692a
 8000a08:	08006932 	.word	0x08006932
 8000a0c:	08006950 	.word	0x08006950
 8000a10:	08006957 	.word	0x08006957
 8000a14:	08006972 	.word	0x08006972
 8000a18:	0800697e 	.word	0x0800697e
 8000a1c:	0800698c 	.word	0x0800698c
 8000a20:	08006946 	.word	0x08006946
 8000a24:	08006969 	.word	0x08006969
 8000a28:	0800699a 	.word	0x0800699a
 8000a2c:	08006a00 	.word	0x08006a00
 8000a30:	08006a1b 	.word	0x08006a1b
 8000a34:	0800689e 	.word	0x0800689e
 8000a38:	080069b7 	.word	0x080069b7

08000a3c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000a3c:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8000a42:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000a44:	2201      	movs	r2, #1
 8000a46:	a901      	add	r1, sp, #4
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <__io_putchar+0x1c>)
 8000a4a:	f003 fef5 	bl	8004838 <HAL_UART_Transmit>

  return ch;
}
 8000a4e:	9801      	ldr	r0, [sp, #4]
 8000a50:	b003      	add	sp, #12
 8000a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a56:	bf00      	nop
 8000a58:	20001290 	.word	0x20001290

08000a5c <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8000a5c:	2802      	cmp	r0, #2
 8000a5e:	d101      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x8>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8000a60:	f000 bfbe 	b.w	80019e0 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 8000a64:	4770      	bx	lr
	...

08000a68 <SPI3_IRQHandler>:
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 8000a68:	4801      	ldr	r0, [pc, #4]	; (8000a70 <SPI3_IRQHandler+0x8>)
 8000a6a:	f003 bc5d 	b.w	8004328 <HAL_SPI_IRQHandler>
 8000a6e:	bf00      	nop
 8000a70:	200008d0 	.word	0x200008d0

08000a74 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000a74:	4770      	bx	lr

08000a76 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler>

08000a78 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler>

08000a7a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler>

08000a7c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler>

08000a7e <SVC_Handler>:
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000a84:	f001 bb1c 	b.w	80020c0 <HAL_IncTick>

08000a88 <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f001 bcb5 	b.w	80023f8 <HAL_GPIO_EXTI_IRQHandler>

08000a8e <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8000a90:	7803      	ldrb	r3, [r0, #0]
 8000a92:	2b2d      	cmp	r3, #45	; 0x2d
 8000a94:	d115      	bne.n	8000ac2 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 8000a96:	3001      	adds	r0, #1
        minus = 1;
 8000a98:	2501      	movs	r5, #1
 8000a9a:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 8000a9c:	462a      	mov	r2, r5
 8000a9e:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000aa0:	270a      	movs	r7, #10
 8000aa2:	e003      	b.n	8000aac <ParseNumber+0x1e>
        ptr++;
        i++;
 8000aa4:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000aa6:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8000aaa:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000aac:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8000ab0:	3c30      	subs	r4, #48	; 0x30
 8000ab2:	b2e6      	uxtb	r6, r4
 8000ab4:	2e09      	cmp	r6, #9
 8000ab6:	d9f5      	bls.n	8000aa4 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000ab8:	b101      	cbz	r1, 8000abc <ParseNumber+0x2e>
        *cnt = i;
 8000aba:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000abc:	b105      	cbz	r5, 8000ac0 <ParseNumber+0x32>
        return 0 - sum;
 8000abe:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8000ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	e7e9      	b.n	8000a9a <ParseNumber+0xc>

08000ac6 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ac8:	4604      	mov	r4, r0
 8000aca:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8000acc:	2500      	movs	r5, #0

  while(* ptr) {
    hexcnt = 1;
 8000ace:	2701      	movs	r7, #1
  while(* ptr) {
 8000ad0:	7823      	ldrb	r3, [r4, #0]
 8000ad2:	b90b      	cbnz	r3, 8000ad8 <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 8000ad8:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8000ada:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 8000ade:	d007      	beq.n	8000af0 <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000ae0:	f10d 0107 	add.w	r1, sp, #7
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f7ff ffd2 	bl	8000a8e <ParseNumber>
 8000aea:	1c6b      	adds	r3, r5, #1
 8000aec:	5570      	strb	r0, [r6, r5]
 8000aee:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 8000af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000af4:	441c      	add	r4, r3
 8000af6:	e7eb      	b.n	8000ad0 <ParseIP+0xa>

08000af8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	4604      	mov	r4, r0
  int ret = 0;
  int16_t recv_len = 0;
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8000afc:	4608      	mov	r0, r1
{
 8000afe:	460e      	mov	r6, r1
 8000b00:	4615      	mov	r5, r2
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8000b02:	f7ff fb65 	bl	80001d0 <strlen>
 8000b06:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000b0a:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8000b0e:	b281      	uxth	r1, r0
 8000b10:	4630      	mov	r0, r6
 8000b12:	4798      	blx	r3

  if( ret > 0)
 8000b14:	2800      	cmp	r0, #0
 8000b16:	dd24      	ble.n	8000b62 <AT_ExecuteCommand+0x6a>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000b18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000b1c:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8000b20:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000b24:	4628      	mov	r0, r5
 8000b26:	4798      	blx	r3
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000b28:	1e43      	subs	r3, r0, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b30:	d211      	bcs.n	8000b56 <AT_ExecuteCommand+0x5e>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000b32:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8000b36:	bf08      	it	eq
 8000b38:	b218      	sxtheq	r0, r3
      }
      *(pdata + recv_len) = 0;
 8000b3a:	2400      	movs	r4, #0
 8000b3c:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8000b3e:	490a      	ldr	r1, [pc, #40]	; (8000b68 <AT_ExecuteCommand+0x70>)
 8000b40:	4628      	mov	r0, r5
 8000b42:	f004 f8d5 	bl	8004cf0 <strstr>
 8000b46:	b950      	cbnz	r0, 8000b5e <AT_ExecuteCommand+0x66>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000b48:	4908      	ldr	r1, [pc, #32]	; (8000b6c <AT_ExecuteCommand+0x74>)
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	f004 f8d0 	bl	8004cf0 <strstr>
 8000b50:	b138      	cbz	r0, 8000b62 <AT_ExecuteCommand+0x6a>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000b52:	2005      	movs	r0, #5
 8000b54:	e002      	b.n	8000b5c <AT_ExecuteCommand+0x64>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000b56:	3004      	adds	r0, #4
 8000b58:	d103      	bne.n	8000b62 <AT_ExecuteCommand+0x6a>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000b5a:	2006      	movs	r0, #6
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
}
 8000b5c:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 8000b5e:	4620      	mov	r0, r4
 8000b60:	e7fc      	b.n	8000b5c <AT_ExecuteCommand+0x64>
  return ES_WIFI_STATUS_IO_ERROR;
 8000b62:	2004      	movs	r0, #4
 8000b64:	e7fa      	b.n	8000b5c <AT_ExecuteCommand+0x64>
 8000b66:	bf00      	nop
 8000b68:	08006a2a 	.word	0x08006a2a
 8000b6c:	08006a33 	.word	0x08006a33

08000b70 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	4605      	mov	r5, r0
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8000b76:	4608      	mov	r0, r1
{
 8000b78:	4688      	mov	r8, r1
 8000b7a:	4691      	mov	r9, r2
 8000b7c:	461f      	mov	r7, r3
  cmd_len = strlen((char*)cmd);
 8000b7e:	f7ff fb27 	bl	80001d0 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000b82:	f010 0401 	ands.w	r4, r0, #1
{
 8000b86:	9e08      	ldr	r6, [sp, #32]
  cmd_len = strlen((char*)cmd);
 8000b88:	fa1f fa80 	uxth.w	sl, r0
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000b8c:	d126      	bne.n	8000bdc <AT_RequestSendData+0x6c>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000b8e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8000b92:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000b96:	4651      	mov	r1, sl
 8000b98:	4640      	mov	r0, r8
 8000b9a:	4798      	blx	r3
  if (n == cmd_len)
 8000b9c:	b280      	uxth	r0, r0
 8000b9e:	4582      	cmp	sl, r0
 8000ba0:	d123      	bne.n	8000bea <AT_RequestSendData+0x7a>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000ba2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8000ba6:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000baa:	4639      	mov	r1, r7
 8000bac:	4648      	mov	r0, r9
 8000bae:	4798      	blx	r3
    if (send_len == len)
 8000bb0:	42b8      	cmp	r0, r7
 8000bb2:	d113      	bne.n	8000bdc <AT_RequestSendData+0x6c>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000bb4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8000bb8:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000bbc:	4621      	mov	r1, r4
 8000bbe:	4630      	mov	r0, r6
 8000bc0:	4798      	blx	r3
      if (recv_len > 0)
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	dd0d      	ble.n	8000be2 <AT_RequestSendData+0x72>
      {
        *(pdata+recv_len) = 0;
 8000bc6:	5434      	strb	r4, [r6, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000bc8:	490b      	ldr	r1, [pc, #44]	; (8000bf8 <AT_RequestSendData+0x88>)
 8000bca:	4630      	mov	r0, r6
 8000bcc:	f004 f890 	bl	8004cf0 <strstr>
 8000bd0:	b968      	cbnz	r0, 8000bee <AT_RequestSendData+0x7e>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000bd2:	490a      	ldr	r1, [pc, #40]	; (8000bfc <AT_RequestSendData+0x8c>)
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	f004 f88b 	bl	8004cf0 <strstr>
 8000bda:	b950      	cbnz	r0, 8000bf2 <AT_RequestSendData+0x82>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8000bdc:	2002      	movs	r0, #2
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
}
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000be2:	3004      	adds	r0, #4
 8000be4:	d1fa      	bne.n	8000bdc <AT_RequestSendData+0x6c>
        return ES_WIFI_STATUS_MODULE_CRASH;
 8000be6:	2006      	movs	r0, #6
 8000be8:	e7f9      	b.n	8000bde <AT_RequestSendData+0x6e>
  return ES_WIFI_STATUS_IO_ERROR;
 8000bea:	2004      	movs	r0, #4
 8000bec:	e7f7      	b.n	8000bde <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 8000bee:	4620      	mov	r0, r4
 8000bf0:	e7f5      	b.n	8000bde <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000bf2:	2005      	movs	r0, #5
 8000bf4:	e7f3      	b.n	8000bde <AT_RequestSendData+0x6e>
 8000bf6:	bf00      	nop
 8000bf8:	08006a2a 	.word	0x08006a2a
 8000bfc:	08006a33 	.word	0x08006a33

08000c00 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8000c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c04:	4680      	mov	r8, r0
  int len;
  uint8_t *p=Obj->CmdData;

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000c06:	4608      	mov	r0, r1
{
 8000c08:	4689      	mov	r9, r1
 8000c0a:	4615      	mov	r5, r2
 8000c0c:	461f      	mov	r7, r3
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000c0e:	f7ff fadf 	bl	80001d0 <strlen>
 8000c12:	f8d8 3120 	ldr.w	r3, [r8, #288]	; 0x120
 8000c16:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
{
 8000c1a:	9e08      	ldr	r6, [sp, #32]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000c1c:	b281      	uxth	r1, r0
 8000c1e:	4648      	mov	r0, r9
 8000c20:	4798      	blx	r3
 8000c22:	2800      	cmp	r0, #0
 8000c24:	dc02      	bgt.n	8000c2c <AT_RequestReceiveData+0x2c>
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8000c26:	2004      	movs	r0, #4
}
 8000c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8000c2c:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
 8000c30:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
 8000c34:	2100      	movs	r1, #0
 8000c36:	f508 7094 	add.w	r0, r8, #296	; 0x128
 8000c3a:	4798      	blx	r3
    if ((p[0]!='\r') || (p[1]!='\n'))
 8000c3c:	f898 3128 	ldrb.w	r3, [r8, #296]	; 0x128
 8000c40:	2b0d      	cmp	r3, #13
 8000c42:	d1f0      	bne.n	8000c26 <AT_RequestReceiveData+0x26>
 8000c44:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 8000c48:	2b0a      	cmp	r3, #10
 8000c4a:	d1ec      	bne.n	8000c26 <AT_RequestReceiveData+0x26>
    len-=2;
 8000c4c:	1e81      	subs	r1, r0, #2
    if (len >= AT_OK_STRING_LEN)
 8000c4e:	2907      	cmp	r1, #7
 8000c50:	d9e9      	bls.n	8000c26 <AT_RequestReceiveData+0x26>
    p+=2;
 8000c52:	f508 7995 	add.w	r9, r8, #298	; 0x12a
     while(len && (p[len-1]==0x15)) len--;
 8000c56:	f208 1829 	addw	r8, r8, #297	; 0x129
 8000c5a:	b119      	cbz	r1, 8000c64 <AT_RequestReceiveData+0x64>
 8000c5c:	f818 3001 	ldrb.w	r3, [r8, r1]
 8000c60:	2b15      	cmp	r3, #21
 8000c62:	d017      	beq.n	8000c94 <AT_RequestReceiveData+0x94>
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8000c64:	f1a1 0408 	sub.w	r4, r1, #8
     p[len] = '\0';
 8000c68:	f04f 0800 	mov.w	r8, #0
 8000c6c:	f809 8001 	strb.w	r8, [r9, r1]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8000c70:	eb09 0004 	add.w	r0, r9, r4
 8000c74:	490a      	ldr	r1, [pc, #40]	; (8000ca0 <AT_RequestReceiveData+0xa0>)
 8000c76:	f004 f83b 	bl	8004cf0 <strstr>
 8000c7a:	b168      	cbz	r0, 8000c98 <AT_RequestReceiveData+0x98>
	   if (*ReadData > Reqlen)
 8000c7c:	b2a1      	uxth	r1, r4
 8000c7e:	42b9      	cmp	r1, r7
 8000c80:	460a      	mov	r2, r1
 8000c82:	bf28      	it	cs
 8000c84:	463a      	movcs	r2, r7
 8000c86:	8032      	strh	r2, [r6, #0]
       memcpy(pdata, p, *ReadData);
 8000c88:	4649      	mov	r1, r9
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	f003 ff2e 	bl	8004aec <memcpy>
       return ES_WIFI_STATUS_OK;
 8000c90:	4640      	mov	r0, r8
 8000c92:	e7c9      	b.n	8000c28 <AT_RequestReceiveData+0x28>
     while(len && (p[len-1]==0x15)) len--;
 8000c94:	3901      	subs	r1, #1
 8000c96:	e7e0      	b.n	8000c5a <AT_RequestReceiveData+0x5a>
       *ReadData = 0;
 8000c98:	8030      	strh	r0, [r6, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000c9a:	2005      	movs	r0, #5
 8000c9c:	e7c4      	b.n	8000c28 <AT_RequestReceiveData+0x28>
 8000c9e:	bf00      	nop
 8000ca0:	08006a2a 	.word	0x08006a2a

08000ca4 <ParseMAC>:
{
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8000ca6:	2600      	movs	r6, #0
  while(* ptr) {
 8000ca8:	7803      	ldrb	r3, [r0, #0]
 8000caa:	b903      	cbnz	r3, 8000cae <ParseMAC+0xa>
}
 8000cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 8000cae:	2b3a      	cmp	r3, #58	; 0x3a
 8000cb0:	d128      	bne.n	8000d04 <ParseMAC+0x60>
    hexcnt = 1;
 8000cb2:	f04f 0c01 	mov.w	ip, #1
    ptr = ptr + hexcnt;
 8000cb6:	4460      	add	r0, ip
 8000cb8:	e7f6      	b.n	8000ca8 <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000cba:	2a09      	cmp	r2, #9
        sum <<= 4;
 8000cbc:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000cc0:	d905      	bls.n	8000cce <ParseMAC+0x2a>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000cc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000cc6:	2a05      	cmp	r2, #5
 8000cc8:	d814      	bhi.n	8000cf4 <ParseMAC+0x50>
        return (a - 'a') + 10;
 8000cca:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 8000ccc:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 8000cce:	4414      	add	r4, r2
        i++;
 8000cd0:	3501      	adds	r5, #1
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000cd2:	5d43      	ldrb	r3, [r0, r5]
 8000cd4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	2a09      	cmp	r2, #9
 8000cdc:	fa5f fc85 	uxtb.w	ip, r5
 8000ce0:	d9eb      	bls.n	8000cba <ParseMAC+0x16>
 8000ce2:	f023 0720 	bic.w	r7, r3, #32
 8000ce6:	3f41      	subs	r7, #65	; 0x41
 8000ce8:	2f05      	cmp	r7, #5
 8000cea:	d9e6      	bls.n	8000cba <ParseMAC+0x16>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8000cec:	1c73      	adds	r3, r6, #1
 8000cee:	558c      	strb	r4, [r1, r6]
 8000cf0:	b2de      	uxtb	r6, r3
 8000cf2:	e7e0      	b.n	8000cb6 <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000cf4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000cf8:	2a05      	cmp	r2, #5
 8000cfa:	d801      	bhi.n	8000d00 <ParseMAC+0x5c>
        return (a - 'A') + 10;
 8000cfc:	3b37      	subs	r3, #55	; 0x37
 8000cfe:	e7e5      	b.n	8000ccc <ParseMAC+0x28>
    return 0;
 8000d00:	2200      	movs	r2, #0
 8000d02:	e7e4      	b.n	8000cce <ParseMAC+0x2a>
 8000d04:	2500      	movs	r5, #0
    uint32_t sum = 0;
 8000d06:	462c      	mov	r4, r5
 8000d08:	e7e3      	b.n	8000cd2 <ParseMAC+0x2e>
	...

08000d0c <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000d10:	f247 5330 	movw	r3, #30000	; 0x7530
 8000d14:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8
{
 8000d18:	4604      	mov	r4, r0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8000d1a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8000d1e:	2000      	movs	r0, #0
 8000d20:	4798      	blx	r3
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d14b      	bne.n	8000dbe <ES_WIFI_Init+0xb2>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8000d26:	4927      	ldr	r1, [pc, #156]	; (8000dc4 <ES_WIFI_Init+0xb8>)
 8000d28:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f7ff fee3 	bl	8000af8 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8000d32:	4605      	mov	r5, r0
 8000d34:	b960      	cbnz	r0, 8000d50 <ES_WIFI_Init+0x44>
  ptr = strtok((char *)pdata + 2, ",");
 8000d36:	4924      	ldr	r1, [pc, #144]	; (8000dc8 <ES_WIFI_Init+0xbc>)
      ptr = strtok(ptr, "\r");
 8000d38:	4f24      	ldr	r7, [pc, #144]	; (8000dcc <ES_WIFI_Init+0xc0>)
    ptr = strtok(NULL, ",");
 8000d3a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8000dc8 <ES_WIFI_Init+0xbc>
  ptr = strtok((char *)pdata + 2, ",");
 8000d3e:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000d42:	f003 ffeb 	bl	8004d1c <strtok>
  while (ptr != NULL){
 8000d46:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000d48:	f104 0868 	add.w	r8, r4, #104	; 0x68
 8000d4c:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8000d4e:	b910      	cbnz	r0, 8000d56 <ES_WIFI_Init+0x4a>
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8000d50:	4628      	mov	r0, r5
 8000d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d824      	bhi.n	8000da4 <ES_WIFI_Init+0x98>
 8000d5a:	e8df f003 	tbb	[pc, r3]
 8000d5e:	0a04      	.short	0x0a04
 8000d60:	1e19140f 	.word	0x1e19140f
 8000d64:	29          	.byte	0x29
 8000d65:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8000d66:	4601      	mov	r1, r0
 8000d68:	2220      	movs	r2, #32
 8000d6a:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000d6c:	f003 ffad 	bl	8004cca <strncpy>
      break;
 8000d70:	e018      	b.n	8000da4 <ES_WIFI_Init+0x98>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8000d72:	4601      	mov	r1, r0
 8000d74:	2218      	movs	r2, #24
 8000d76:	f104 0020 	add.w	r0, r4, #32
 8000d7a:	e7f7      	b.n	8000d6c <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	2210      	movs	r2, #16
 8000d80:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8000d84:	e7f2      	b.n	8000d6c <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8000d86:	4601      	mov	r1, r0
 8000d88:	2210      	movs	r2, #16
 8000d8a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8000d8e:	e7ed      	b.n	8000d6c <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8000d90:	4601      	mov	r1, r0
 8000d92:	2210      	movs	r2, #16
 8000d94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d98:	e7e8      	b.n	8000d6c <ES_WIFI_Init+0x60>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f7ff fe77 	bl	8000a8e <ParseNumber>
 8000da0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ptr = strtok(NULL, ",");
 8000da4:	4649      	mov	r1, r9
 8000da6:	2000      	movs	r0, #0
 8000da8:	f003 ffb8 	bl	8004d1c <strtok>
 8000dac:	3601      	adds	r6, #1
 8000dae:	e7cd      	b.n	8000d4c <ES_WIFI_Init+0x40>
      ptr = strtok(ptr, "\r");
 8000db0:	4639      	mov	r1, r7
 8000db2:	f003 ffb3 	bl	8004d1c <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000db6:	2220      	movs	r2, #32
      ptr = strtok(ptr, "\r");
 8000db8:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000dba:	4640      	mov	r0, r8
 8000dbc:	e7d6      	b.n	8000d6c <ES_WIFI_Init+0x60>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000dbe:	2502      	movs	r5, #2
 8000dc0:	e7c6      	b.n	8000d50 <ES_WIFI_Init+0x44>
 8000dc2:	bf00      	nop
 8000dc4:	08006a5b 	.word	0x08006a5b
 8000dc8:	08006c61 	.word	0x08006c61
 8000dcc:	08006b26 	.word	0x08006b26

08000dd0 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8000dd0:	b530      	push	{r4, r5, lr}
 8000dd2:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000dd6:	b158      	cbz	r0, 8000df0 <ES_WIFI_RegisterBusIO+0x20>
 8000dd8:	b151      	cbz	r1, 8000df0 <ES_WIFI_RegisterBusIO+0x20>
 8000dda:	b14a      	cbz	r2, 8000df0 <ES_WIFI_RegisterBusIO+0x20>
 8000ddc:	b145      	cbz	r5, 8000df0 <ES_WIFI_RegisterBusIO+0x20>
 8000dde:	b13c      	cbz	r4, 8000df0 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 8000de0:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 8000de4:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8000de8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8000dec:	2000      	movs	r0, #0
}
 8000dee:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8000df0:	2002      	movs	r0, #2
 8000df2:	e7fc      	b.n	8000dee <ES_WIFI_RegisterBusIO+0x1e>

08000df4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000df6:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 8000dfa:	4605      	mov	r5, r0
 8000dfc:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000dfe:	4620      	mov	r0, r4
 8000e00:	460a      	mov	r2, r1
 8000e02:	4918      	ldr	r1, [pc, #96]	; (8000e64 <ES_WIFI_Connect+0x70>)
{
 8000e04:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000e06:	f003 ff15 	bl	8004c34 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	4628      	mov	r0, r5
 8000e10:	f7ff fe72 	bl	8000af8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000e14:	bb20      	cbnz	r0, 8000e60 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8000e16:	4914      	ldr	r1, [pc, #80]	; (8000e68 <ES_WIFI_Connect+0x74>)
 8000e18:	463a      	mov	r2, r7
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f003 ff0a 	bl	8004c34 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e20:	4622      	mov	r2, r4
 8000e22:	4621      	mov	r1, r4
 8000e24:	4628      	mov	r0, r5
 8000e26:	f7ff fe67 	bl	8000af8 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8000e2a:	b9c8      	cbnz	r0, 8000e60 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000e2c:	490f      	ldr	r1, [pc, #60]	; (8000e6c <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8000e2e:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000e32:	4632      	mov	r2, r6
 8000e34:	4620      	mov	r0, r4
 8000e36:	f003 fefd 	bl	8004c34 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	4628      	mov	r0, r5
 8000e40:	f7ff fe5a 	bl	8000af8 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 8000e44:	b960      	cbnz	r0, 8000e60 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8000e46:	490a      	ldr	r1, [pc, #40]	; (8000e70 <ES_WIFI_Connect+0x7c>)
 8000e48:	4620      	mov	r0, r4
 8000e4a:	f003 ff22 	bl	8004c92 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e4e:	4622      	mov	r2, r4
 8000e50:	4621      	mov	r1, r4
 8000e52:	4628      	mov	r0, r5
 8000e54:	f7ff fe50 	bl	8000af8 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8000e58:	b910      	cbnz	r0, 8000e60 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8000e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08006a6e 	.word	0x08006a6e
 8000e68:	08006a75 	.word	0x08006a75
 8000e6c:	08006a7c 	.word	0x08006a7c
 8000e70:	08006a83 	.word	0x08006a83

08000e74 <ES_WIFI_IsConnected>:
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8000e74:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000e78:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"CS\r");
 8000e7a:	490b      	ldr	r1, [pc, #44]	; (8000ea8 <ES_WIFI_IsConnected+0x34>)
{
 8000e7c:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"CS\r");
 8000e7e:	4610      	mov	r0, r2
 8000e80:	f003 ff07 	bl	8004c92 <strcpy>
 8000e84:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e86:	4601      	mov	r1, r0
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff fe35 	bl	8000af8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000e8e:	b938      	cbnz	r0, 8000ea0 <ES_WIFI_IsConnected+0x2c>
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8000e90:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8000e94:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000e98:	4253      	negs	r3, r2
 8000e9a:	4153      	adcs	r3, r2
 8000e9c:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8000ea0:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	08006a87 	.word	0x08006a87

08000eac <ES_WIFI_GetNetworkSettings>:
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8000eac:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8000eb4:	4935      	ldr	r1, [pc, #212]	; (8000f8c <ES_WIFI_GetNetworkSettings+0xe0>)
{
 8000eb6:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8000eb8:	4610      	mov	r0, r2
 8000eba:	f003 feea 	bl	8004c92 <strcpy>
 8000ebe:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000ec0:	4601      	mov	r1, r0
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff fe18 	bl	8000af8 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8000ec8:	4606      	mov	r6, r0
 8000eca:	b960      	cbnz	r0, 8000ee6 <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8000ecc:	4930      	ldr	r1, [pc, #192]	; (8000f90 <ES_WIFI_GetNetworkSettings+0xe4>)
    ptr = strtok(NULL, ",");
 8000ece:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8000f90 <ES_WIFI_GetNetworkSettings+0xe4>
  ptr = strtok(pdata + 2, ",");
 8000ed2:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000ed6:	f003 ff21 	bl	8004d1c <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8000eda:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 8000ede:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2);
 8000ee0:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 8000ee4:	b910      	cbnz	r0, 8000eec <ES_WIFI_GetNetworkSettings+0x40>
  }

  UNLOCK_WIFI();
  return ret;
}
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8000eec:	2d0b      	cmp	r5, #11
 8000eee:	d80c      	bhi.n	8000f0a <ES_WIFI_GetNetworkSettings+0x5e>
 8000ef0:	e8df f005 	tbb	[pc, r5]
 8000ef4:	241e1906 	.word	0x241e1906
 8000ef8:	3835302a 	.word	0x3835302a
 8000efc:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8000f00:	4601      	mov	r1, r0
 8000f02:	2221      	movs	r2, #33	; 0x21
 8000f04:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8000f06:	f003 fee0 	bl	8004cca <strncpy>
    ptr = strtok(NULL, ",");
 8000f0a:	4649      	mov	r1, r9
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f003 ff05 	bl	8004d1c <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d0e7      	beq.n	8000ee6 <ES_WIFI_GetNetworkSettings+0x3a>
 8000f16:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8000f1a:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8000f1c:	bf14      	ite	ne
 8000f1e:	3501      	addne	r5, #1
      num++;
 8000f20:	3502      	addeq	r5, #2
 8000f22:	b2ed      	uxtb	r5, r5
 8000f24:	e7de      	b.n	8000ee4 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8000f26:	4601      	mov	r1, r0
 8000f28:	2221      	movs	r2, #33	; 0x21
 8000f2a:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 8000f2e:	e7ea      	b.n	8000f06 <ES_WIFI_GetNetworkSettings+0x5a>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000f30:	2100      	movs	r1, #0
 8000f32:	f7ff fdac 	bl	8000a8e <ParseNumber>
 8000f36:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 8000f3a:	e7e6      	b.n	8000f0a <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f7ff fda6 	bl	8000a8e <ParseNumber>
 8000f42:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 8000f46:	e7e0      	b.n	8000f0a <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	f7ff fda0 	bl	8000a8e <ParseNumber>
 8000f4e:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 8000f52:	e7da      	b.n	8000f0a <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Addr);
 8000f54:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask);
 8000f58:	f7ff fdb5 	bl	8000ac6 <ParseIP>
      break;
 8000f5c:	e7d5      	b.n	8000f0a <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Mask);
 8000f5e:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8000f62:	e7f9      	b.n	8000f58 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8000f64:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 8000f68:	e7f6      	b.n	8000f58 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS1);
 8000f6a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 8000f6e:	e7f3      	b.n	8000f58 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS2);
 8000f70:	4641      	mov	r1, r8
 8000f72:	e7f1      	b.n	8000f58 <ES_WIFI_GetNetworkSettings+0xac>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000f74:	2100      	movs	r1, #0
 8000f76:	f7ff fd8a 	bl	8000a8e <ParseNumber>
 8000f7a:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 8000f7e:	e7c4      	b.n	8000f0a <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000f80:	2100      	movs	r1, #0
 8000f82:	f7ff fd84 	bl	8000a8e <ParseNumber>
 8000f86:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 8000f8a:	e7be      	b.n	8000f0a <ES_WIFI_GetNetworkSettings+0x5e>
 8000f8c:	08006a8f 	.word	0x08006a8f
 8000f90:	08006c61 	.word	0x08006c61

08000f94 <ES_WIFI_GetMACAddress>:
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8000f94:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000f98:	b570      	push	{r4, r5, r6, lr}
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4909      	ldr	r1, [pc, #36]	; (8000fc8 <ES_WIFI_GetMACAddress+0x34>)
 8000fa2:	f003 fe76 	bl	8004c92 <strcpy>
 8000fa6:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fa8:	4601      	mov	r1, r0
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff fda4 	bl	8000af8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	b938      	cbnz	r0, 8000fc4 <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8000fb4:	4905      	ldr	r1, [pc, #20]	; (8000fcc <ES_WIFI_GetMACAddress+0x38>)
 8000fb6:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000fba:	f003 feaf 	bl	8004d1c <strtok>
    ParseMAC(ptr, mac) ;
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	f7ff fe70 	bl	8000ca4 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
}
 8000fc4:	4628      	mov	r0, r5
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
 8000fc8:	08006ad0 	.word	0x08006ad0
 8000fcc:	080061d4 	.word	0x080061d4

08000fd0 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8000fd0:	b570      	push	{r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000fd2:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8000fd6:	784a      	ldrb	r2, [r1, #1]
{
 8000fd8:	4605      	mov	r5, r0
 8000fda:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4923      	ldr	r1, [pc, #140]	; (800106c <ES_WIFI_StartServerSingleConn+0x9c>)
 8000fe0:	f003 fe28 	bl	8004c34 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fe4:	4622      	mov	r2, r4
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f7ff fd85 	bl	8000af8 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	d13a      	bne.n	8001068 <ES_WIFI_StartServerSingleConn+0x98>
  {
    UNLOCK_WIFI();
    return ret;
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8000ff2:	7833      	ldrb	r3, [r6, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d82b      	bhi.n	8001052 <ES_WIFI_StartServerSingleConn+0x82>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8000ffa:	7832      	ldrb	r2, [r6, #0]
 8000ffc:	491c      	ldr	r1, [pc, #112]	; (8001070 <ES_WIFI_StartServerSingleConn+0xa0>)
 8000ffe:	4620      	mov	r0, r4
 8001000:	f003 fe18 	bl	8004c34 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001004:	4622      	mov	r2, r4
 8001006:	4621      	mov	r1, r4
 8001008:	4628      	mov	r0, r5
 800100a:	f7ff fd75 	bl	8000af8 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 800100e:	bb58      	cbnz	r0, 8001068 <ES_WIFI_StartServerSingleConn+0x98>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8001010:	7c32      	ldrb	r2, [r6, #16]
 8001012:	4918      	ldr	r1, [pc, #96]	; (8001074 <ES_WIFI_StartServerSingleConn+0xa4>)
 8001014:	4620      	mov	r0, r4
 8001016:	f003 fe0d 	bl	8004c34 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800101a:	4622      	mov	r2, r4
 800101c:	4621      	mov	r1, r4
 800101e:	4628      	mov	r0, r5
 8001020:	f7ff fd6a 	bl	8000af8 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8001024:	bb00      	cbnz	r0, 8001068 <ES_WIFI_StartServerSingleConn+0x98>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001026:	88b2      	ldrh	r2, [r6, #4]
 8001028:	4913      	ldr	r1, [pc, #76]	; (8001078 <ES_WIFI_StartServerSingleConn+0xa8>)
 800102a:	4620      	mov	r0, r4
 800102c:	f003 fe02 	bl	8004c34 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001030:	4622      	mov	r2, r4
 8001032:	4621      	mov	r1, r4
 8001034:	4628      	mov	r0, r5
 8001036:	f7ff fd5f 	bl	8000af8 <AT_ExecuteCommand>
          if (ret == ES_WIFI_STATUS_OK)
 800103a:	b9a8      	cbnz	r0, 8001068 <ES_WIFI_StartServerSingleConn+0x98>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 800103c:	490f      	ldr	r1, [pc, #60]	; (800107c <ES_WIFI_StartServerSingleConn+0xac>)
 800103e:	4620      	mov	r0, r4
 8001040:	f003 fe27 	bl	8004c92 <strcpy>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001044:	4622      	mov	r2, r4
 8001046:	4621      	mov	r1, r4
 8001048:	4628      	mov	r0, r5
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
}
 800104a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800104e:	f7ff bd53 	b.w	8000af8 <AT_ExecuteCommand>
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8001052:	490b      	ldr	r1, [pc, #44]	; (8001080 <ES_WIFI_StartServerSingleConn+0xb0>)
 8001054:	4620      	mov	r0, r4
 8001056:	f003 fe1c 	bl	8004c92 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800105a:	4622      	mov	r2, r4
 800105c:	4621      	mov	r1, r4
 800105e:	4628      	mov	r0, r5
 8001060:	f7ff fd4a 	bl	8000af8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8001064:	2800      	cmp	r0, #0
 8001066:	d0c8      	beq.n	8000ffa <ES_WIFI_StartServerSingleConn+0x2a>
}
 8001068:	bd70      	pop	{r4, r5, r6, pc}
 800106a:	bf00      	nop
 800106c:	08006b2f 	.word	0x08006b2f
 8001070:	08006b36 	.word	0x08006b36
 8001074:	08006b78 	.word	0x08006b78
 8001078:	08006b3d 	.word	0x08006b3d
 800107c:	08006b7f 	.word	0x08006b7f
 8001080:	08006b6d 	.word	0x08006b6d

08001084 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 8001084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001088:	4689      	mov	r9, r1
 800108a:	4606      	mov	r6, r0
 800108c:	4690      	mov	r8, r2
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 800108e:	f001 f823 	bl	80020d8 <HAL_GetTick>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
    sprintf((char*)Obj->CmdData,"MR\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
    if(ret == ES_WIFI_STATUS_OK)
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8001092:	f8df a168 	ldr.w	sl, [pc, #360]	; 80011fc <ES_WIFI_WaitServerConnection+0x178>
 8001096:	f8df b168 	ldr.w	fp, [pc, #360]	; 8001200 <ES_WIFI_WaitServerConnection+0x17c>
 800109a:	eb10 0309 	adds.w	r3, r0, r9
  tstart=HAL_GetTick();
 800109e:	4605      	mov	r5, r0
  tlast=tstart+timeout;
 80010a0:	9301      	str	r3, [sp, #4]
	   tstart=0;
 80010a2:	bf28      	it	cs
 80010a4:	2500      	movcs	r5, #0
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80010a6:	f506 7494 	add.w	r4, r6, #296	; 0x128
 80010aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010ae:	2100      	movs	r1, #0
 80010b0:	4620      	mov	r0, r4
 80010b2:	f003 fd29 	bl	8004b08 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 80010b6:	4946      	ldr	r1, [pc, #280]	; (80011d0 <ES_WIFI_WaitServerConnection+0x14c>)
 80010b8:	4620      	mov	r0, r4
 80010ba:	f003 fdea 	bl	8004c92 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80010be:	4622      	mov	r2, r4
 80010c0:	4621      	mov	r1, r4
 80010c2:	4630      	mov	r0, r6
 80010c4:	f7ff fd18 	bl	8000af8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80010c8:	bb10      	cbnz	r0, 8001110 <ES_WIFI_WaitServerConnection+0x8c>
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80010ca:	4651      	mov	r1, sl
 80010cc:	4620      	mov	r0, r4
 80010ce:	f003 fe0f 	bl	8004cf0 <strstr>
 80010d2:	b330      	cbz	r0, 8001122 <ES_WIFI_WaitServerConnection+0x9e>
 80010d4:	4659      	mov	r1, fp
 80010d6:	4620      	mov	r0, r4
 80010d8:	f003 fe0a 	bl	8004cf0 <strstr>
 80010dc:	b308      	cbz	r0, 8001122 <ES_WIFI_WaitServerConnection+0x9e>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 80010de:	493d      	ldr	r1, [pc, #244]	; (80011d4 <ES_WIFI_WaitServerConnection+0x150>)
 80010e0:	4620      	mov	r0, r4
 80010e2:	f003 fe05 	bl	8004cf0 <strstr>
 80010e6:	b9e0      	cbnz	r0, 8001122 <ES_WIFI_WaitServerConnection+0x9e>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80010e8:	493b      	ldr	r1, [pc, #236]	; (80011d8 <ES_WIFI_WaitServerConnection+0x154>)
 80010ea:	4620      	mov	r0, r4
 80010ec:	f003 fe00 	bl	8004cf0 <strstr>
 80010f0:	b9b8      	cbnz	r0, 8001122 <ES_WIFI_WaitServerConnection+0x9e>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 80010f2:	493a      	ldr	r1, [pc, #232]	; (80011dc <ES_WIFI_WaitServerConnection+0x158>)
 80010f4:	483a      	ldr	r0, [pc, #232]	; (80011e0 <ES_WIFI_WaitServerConnection+0x15c>)
 80010f6:	f240 7231 	movw	r2, #1841	; 0x731
 80010fa:	f003 fd0d 	bl	8004b18 <iprintf>
 80010fe:	4839      	ldr	r0, [pc, #228]	; (80011e4 <ES_WIFI_WaitServerConnection+0x160>)
 8001100:	4621      	mov	r1, r4
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 8001102:	f003 fd09 	bl	8004b18 <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 8001106:	2702      	movs	r7, #2
    LOCK_WIFI();
    t = HAL_GetTick();
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
  return ES_WIFI_STATUS_TIMEOUT;
}
 8001108:	4638      	mov	r0, r7
 800110a:	b003      	add	sp, #12
 800110c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DEBUG("MR command failed %s\n", Obj->CmdData);
 8001110:	4932      	ldr	r1, [pc, #200]	; (80011dc <ES_WIFI_WaitServerConnection+0x158>)
 8001112:	4833      	ldr	r0, [pc, #204]	; (80011e0 <ES_WIFI_WaitServerConnection+0x15c>)
 8001114:	f240 7239 	movw	r2, #1849	; 0x739
 8001118:	f003 fcfe 	bl	8004b18 <iprintf>
 800111c:	4832      	ldr	r0, [pc, #200]	; (80011e8 <ES_WIFI_WaitServerConnection+0x164>)
 800111e:	4621      	mov	r1, r4
 8001120:	e7ef      	b.n	8001102 <ES_WIFI_WaitServerConnection+0x7e>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8001122:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001126:	2100      	movs	r1, #0
 8001128:	4620      	mov	r0, r4
 800112a:	f003 fced 	bl	8004b08 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 800112e:	492f      	ldr	r1, [pc, #188]	; (80011ec <ES_WIFI_WaitServerConnection+0x168>)
 8001130:	4620      	mov	r0, r4
 8001132:	f003 fdae 	bl	8004c92 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001136:	4622      	mov	r2, r4
 8001138:	4621      	mov	r1, r4
 800113a:	4630      	mov	r0, r6
 800113c:	f7ff fcdc 	bl	8000af8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8001140:	4607      	mov	r7, r0
 8001142:	bb48      	cbnz	r0, 8001198 <ES_WIFI_WaitServerConnection+0x114>
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8001144:	492a      	ldr	r1, [pc, #168]	; (80011f0 <ES_WIFI_WaitServerConnection+0x16c>)
 8001146:	220c      	movs	r2, #12
 8001148:	4620      	mov	r0, r4
 800114a:	f003 fdaa 	bl	8004ca2 <strncmp>
 800114e:	b360      	cbz	r0, 80011aa <ES_WIFI_WaitServerConnection+0x126>
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8001150:	4928      	ldr	r1, [pc, #160]	; (80011f4 <ES_WIFI_WaitServerConnection+0x170>)
 8001152:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 8001156:	f003 fde1 	bl	8004d1c <strtok>
        ptr = strtok(0, ","); //port
 800115a:	4926      	ldr	r1, [pc, #152]	; (80011f4 <ES_WIFI_WaitServerConnection+0x170>)
 800115c:	4638      	mov	r0, r7
 800115e:	f003 fddd 	bl	8004d1c <strtok>
        ParseIP((char *)ptr, conn->RemoteIP);
 8001162:	f108 0106 	add.w	r1, r8, #6
 8001166:	f7ff fcae 	bl	8000ac6 <ParseIP>
        ptr = strtok(0, ","); //port
 800116a:	4922      	ldr	r1, [pc, #136]	; (80011f4 <ES_WIFI_WaitServerConnection+0x170>)
 800116c:	4638      	mov	r0, r7
 800116e:	f003 fdd5 	bl	8004d1c <strtok>
        conn->LocalPort=ParseNumber(ptr,0);
 8001172:	4639      	mov	r1, r7
 8001174:	f7ff fc8b 	bl	8000a8e <ParseNumber>
        ptr = strtok(0, ","); //ip
 8001178:	491e      	ldr	r1, [pc, #120]	; (80011f4 <ES_WIFI_WaitServerConnection+0x170>)
        conn->LocalPort=ParseNumber(ptr,0);
 800117a:	f8a8 0004 	strh.w	r0, [r8, #4]
        ptr = strtok(0, ","); //ip
 800117e:	4638      	mov	r0, r7
 8001180:	f003 fdcc 	bl	8004d1c <strtok>
        ptr = strtok(0, ","); //remote port
 8001184:	491b      	ldr	r1, [pc, #108]	; (80011f4 <ES_WIFI_WaitServerConnection+0x170>)
 8001186:	4638      	mov	r0, r7
 8001188:	f003 fdc8 	bl	8004d1c <strtok>
        conn->RemotePort=ParseNumber(ptr,0);
 800118c:	4639      	mov	r1, r7
 800118e:	f7ff fc7e 	bl	8000a8e <ParseNumber>
 8001192:	f8a8 0002 	strh.w	r0, [r8, #2]
        return ES_WIFI_STATUS_OK;
 8001196:	e7b7      	b.n	8001108 <ES_WIFI_WaitServerConnection+0x84>
      DEBUG("P? command failed %s\n", Obj->CmdData);
 8001198:	4910      	ldr	r1, [pc, #64]	; (80011dc <ES_WIFI_WaitServerConnection+0x158>)
 800119a:	4811      	ldr	r0, [pc, #68]	; (80011e0 <ES_WIFI_WaitServerConnection+0x15c>)
 800119c:	f240 7254 	movw	r2, #1876	; 0x754
 80011a0:	f003 fcba 	bl	8004b18 <iprintf>
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <ES_WIFI_WaitServerConnection+0x174>)
 80011a6:	4621      	mov	r1, r4
 80011a8:	e7ab      	b.n	8001102 <ES_WIFI_WaitServerConnection+0x7e>
    Obj->fops.IO_Delay(100);
 80011aa:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
 80011ae:	2064      	movs	r0, #100	; 0x64
 80011b0:	4798      	blx	r3
    t = HAL_GetTick();
 80011b2:	f000 ff91 	bl	80020d8 <HAL_GetTick>
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 80011b6:	f1b9 0f00 	cmp.w	r9, #0
 80011ba:	f43f af74 	beq.w	80010a6 <ES_WIFI_WaitServerConnection+0x22>
 80011be:	9b01      	ldr	r3, [sp, #4]
 80011c0:	4283      	cmp	r3, r0
 80011c2:	f63f af70 	bhi.w	80010a6 <ES_WIFI_WaitServerConnection+0x22>
 80011c6:	42a8      	cmp	r0, r5
 80011c8:	f4ff af6d 	bcc.w	80010a6 <ES_WIFI_WaitServerConnection+0x22>
  return ES_WIFI_STATUS_TIMEOUT;
 80011cc:	2703      	movs	r7, #3
 80011ce:	e79b      	b.n	8001108 <ES_WIFI_WaitServerConnection+0x84>
 80011d0:	08006a66 	.word	0x08006a66
 80011d4:	08006b8d 	.word	0x08006b8d
 80011d8:	08006b96 	.word	0x08006b96
 80011dc:	08006ba3 	.word	0x08006ba3
 80011e0:	08006c1e 	.word	0x08006c1e
 80011e4:	08006c26 	.word	0x08006c26
 80011e8:	08006c3c 	.word	0x08006c3c
 80011ec:	08006c52 	.word	0x08006c52
 80011f0:	08006c56 	.word	0x08006c56
 80011f4:	08006c61 	.word	0x08006c61
 80011f8:	08006c63 	.word	0x08006c63
 80011fc:	08006b86 	.word	0x08006b86
 8001200:	08006b9c 	.word	0x08006b9c

08001204 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8001204:	b570      	push	{r4, r5, r6, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8001206:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 800120a:	460a      	mov	r2, r1
 800120c:	4606      	mov	r6, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800120e:	4916      	ldr	r1, [pc, #88]	; (8001268 <ES_WIFI_CloseServerConnection+0x64>)
 8001210:	4628      	mov	r0, r5
 8001212:	f003 fd0f 	bl	8004c34 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001216:	462a      	mov	r2, r5
 8001218:	4629      	mov	r1, r5
 800121a:	4630      	mov	r0, r6
 800121c:	f7ff fc6c 	bl	8000af8 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8001220:	4604      	mov	r4, r0
 8001222:	b158      	cbz	r0, 800123c <ES_WIFI_CloseServerConnection+0x38>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8001224:	4911      	ldr	r1, [pc, #68]	; (800126c <ES_WIFI_CloseServerConnection+0x68>)
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <ES_WIFI_CloseServerConnection+0x6c>)
 8001228:	f44f 62ee 	mov.w	r2, #1904	; 0x770
 800122c:	f003 fc74 	bl	8004b18 <iprintf>
 8001230:	4810      	ldr	r0, [pc, #64]	; (8001274 <ES_WIFI_CloseServerConnection+0x70>)
 8001232:	4629      	mov	r1, r5

  sprintf((char*)Obj->CmdData,"P5=10\r");
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  if(ret != ES_WIFI_STATUS_OK)
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 8001234:	f003 fc70 	bl	8004b18 <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
}
 8001238:	4620      	mov	r0, r4
 800123a:	bd70      	pop	{r4, r5, r6, pc}
  sprintf((char*)Obj->CmdData,"P5=10\r");
 800123c:	490e      	ldr	r1, [pc, #56]	; (8001278 <ES_WIFI_CloseServerConnection+0x74>)
 800123e:	4628      	mov	r0, r5
 8001240:	f003 fd27 	bl	8004c92 <strcpy>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001244:	462a      	mov	r2, r5
 8001246:	4629      	mov	r1, r5
 8001248:	4630      	mov	r0, r6
 800124a:	f7ff fc55 	bl	8000af8 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 800124e:	4604      	mov	r4, r0
 8001250:	2800      	cmp	r0, #0
 8001252:	d0f1      	beq.n	8001238 <ES_WIFI_CloseServerConnection+0x34>
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 8001254:	4905      	ldr	r1, [pc, #20]	; (800126c <ES_WIFI_CloseServerConnection+0x68>)
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <ES_WIFI_CloseServerConnection+0x6c>)
 8001258:	f240 7279 	movw	r2, #1913	; 0x779
 800125c:	f003 fc5c 	bl	8004b18 <iprintf>
 8001260:	4806      	ldr	r0, [pc, #24]	; (800127c <ES_WIFI_CloseServerConnection+0x78>)
 8001262:	4629      	mov	r1, r5
 8001264:	e7e6      	b.n	8001234 <ES_WIFI_CloseServerConnection+0x30>
 8001266:	bf00      	nop
 8001268:	08006b2f 	.word	0x08006b2f
 800126c:	08006ba3 	.word	0x08006ba3
 8001270:	08006c1e 	.word	0x08006c1e
 8001274:	08006c79 	.word	0x08006c79
 8001278:	08006c94 	.word	0x08006c94
 800127c:	08006c9b 	.word	0x08006c9b

08001280 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8001280:	b570      	push	{r4, r5, r6, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8001282:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8001286:	460a      	mov	r2, r1
 8001288:	4606      	mov	r6, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800128a:	4916      	ldr	r1, [pc, #88]	; (80012e4 <ES_WIFI_StopServerSingleConn+0x64>)
 800128c:	4628      	mov	r0, r5
 800128e:	f003 fcd1 	bl	8004c34 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001292:	462a      	mov	r2, r5
 8001294:	4629      	mov	r1, r5
 8001296:	4630      	mov	r0, r6
 8001298:	f7ff fc2e 	bl	8000af8 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 800129c:	4604      	mov	r4, r0
 800129e:	b158      	cbz	r0, 80012b8 <ES_WIFI_StopServerSingleConn+0x38>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 80012a0:	4911      	ldr	r1, [pc, #68]	; (80012e8 <ES_WIFI_StopServerSingleConn+0x68>)
 80012a2:	4812      	ldr	r0, [pc, #72]	; (80012ec <ES_WIFI_StopServerSingleConn+0x6c>)
 80012a4:	f240 728f 	movw	r2, #1935	; 0x78f
 80012a8:	f003 fc36 	bl	8004b18 <iprintf>
 80012ac:	4810      	ldr	r0, [pc, #64]	; (80012f0 <ES_WIFI_StopServerSingleConn+0x70>)
 80012ae:	4629      	mov	r1, r5

  sprintf((char*)Obj->CmdData,"P5=0\r");
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  if(ret != ES_WIFI_STATUS_OK)
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 80012b0:	f003 fc32 	bl	8004b18 <iprintf>
    return ret;
  }

  UNLOCK_WIFI();
  return ret;
}
 80012b4:	4620      	mov	r0, r4
 80012b6:	bd70      	pop	{r4, r5, r6, pc}
  sprintf((char*)Obj->CmdData,"P5=0\r");
 80012b8:	490e      	ldr	r1, [pc, #56]	; (80012f4 <ES_WIFI_StopServerSingleConn+0x74>)
 80012ba:	4628      	mov	r0, r5
 80012bc:	f003 fce9 	bl	8004c92 <strcpy>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012c0:	462a      	mov	r2, r5
 80012c2:	4629      	mov	r1, r5
 80012c4:	4630      	mov	r0, r6
 80012c6:	f7ff fc17 	bl	8000af8 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 80012ca:	4604      	mov	r4, r0
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d0f1      	beq.n	80012b4 <ES_WIFI_StopServerSingleConn+0x34>
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 80012d0:	4905      	ldr	r1, [pc, #20]	; (80012e8 <ES_WIFI_StopServerSingleConn+0x68>)
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <ES_WIFI_StopServerSingleConn+0x6c>)
 80012d4:	f44f 62f3 	mov.w	r2, #1944	; 0x798
 80012d8:	f003 fc1e 	bl	8004b18 <iprintf>
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <ES_WIFI_StopServerSingleConn+0x78>)
 80012de:	4629      	mov	r1, r5
 80012e0:	e7e6      	b.n	80012b0 <ES_WIFI_StopServerSingleConn+0x30>
 80012e2:	bf00      	nop
 80012e4:	08006b2f 	.word	0x08006b2f
 80012e8:	08006ba3 	.word	0x08006ba3
 80012ec:	08006c1e 	.word	0x08006c1e
 80012f0:	08006cb1 	.word	0x08006cb1
 80012f4:	08006cce 	.word	0x08006cce
 80012f8:	08006cd4 	.word	0x08006cd4

080012fc <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80012fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001300:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8001304:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8001308:	bf28      	it	cs
 800130a:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800130e:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8001312:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 8001314:	f8a8 3000 	strh.w	r3, [r8]
{
 8001318:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800131a:	4628      	mov	r0, r5
 800131c:	460a      	mov	r2, r1
 800131e:	492e      	ldr	r1, [pc, #184]	; (80013d8 <ES_WIFI_SendData+0xdc>)
 8001320:	461f      	mov	r7, r3
 8001322:	f003 fc87 	bl	8004c34 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001326:	462a      	mov	r2, r5
 8001328:	4629      	mov	r1, r5
 800132a:	4630      	mov	r0, r6
 800132c:	f7ff fbe4 	bl	8000af8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8001330:	4604      	mov	r4, r0
 8001332:	2800      	cmp	r0, #0
 8001334:	d147      	bne.n	80013c6 <ES_WIFI_SendData+0xca>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001336:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001338:	4928      	ldr	r1, [pc, #160]	; (80013dc <ES_WIFI_SendData+0xe0>)
 800133a:	2a01      	cmp	r2, #1
 800133c:	bf38      	it	cc
 800133e:	2201      	movcc	r2, #1
 8001340:	4628      	mov	r0, r5
 8001342:	f003 fc77 	bl	8004c34 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001346:	462a      	mov	r2, r5
 8001348:	4629      	mov	r1, r5
 800134a:	4630      	mov	r0, r6
 800134c:	f7ff fbd4 	bl	8000af8 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8001350:	4604      	mov	r4, r0
 8001352:	bb80      	cbnz	r0, 80013b6 <ES_WIFI_SendData+0xba>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001354:	4922      	ldr	r1, [pc, #136]	; (80013e0 <ES_WIFI_SendData+0xe4>)
 8001356:	463a      	mov	r2, r7
 8001358:	4628      	mov	r0, r5
 800135a:	f003 fc6b 	bl	8004c34 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800135e:	9500      	str	r5, [sp, #0]
 8001360:	463b      	mov	r3, r7
 8001362:	464a      	mov	r2, r9
 8001364:	4629      	mov	r1, r5
 8001366:	4630      	mov	r0, r6
 8001368:	f7ff fc02 	bl	8000b70 <AT_RequestSendData>

      if(ret == ES_WIFI_STATUS_OK)
 800136c:	4604      	mov	r4, r0
 800136e:	b998      	cbnz	r0, 8001398 <ES_WIFI_SendData+0x9c>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001370:	491c      	ldr	r1, [pc, #112]	; (80013e4 <ES_WIFI_SendData+0xe8>)
 8001372:	4628      	mov	r0, r5
 8001374:	f003 fcbc 	bl	8004cf0 <strstr>
 8001378:	b1c8      	cbz	r0, 80013ae <ES_WIFI_SendData+0xb2>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800137a:	491b      	ldr	r1, [pc, #108]	; (80013e8 <ES_WIFI_SendData+0xec>)
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <ES_WIFI_SendData+0xf0>)
 800137e:	f640 024c 	movw	r2, #2124	; 0x84c
 8001382:	f003 fbc9 	bl	8004b18 <iprintf>
 8001386:	481a      	ldr	r0, [pc, #104]	; (80013f0 <ES_WIFI_SendData+0xf4>)
 8001388:	4629      	mov	r1, r5
 800138a:	f003 fbc5 	bl	8004b18 <iprintf>
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	f8a8 3000 	strh.w	r3, [r8]
 8001394:	2402      	movs	r4, #2
 8001396:	e00a      	b.n	80013ae <ES_WIFI_SendData+0xb2>
        DEBUG("Send Data command failed\n");
 8001398:	4913      	ldr	r1, [pc, #76]	; (80013e8 <ES_WIFI_SendData+0xec>)
 800139a:	4814      	ldr	r0, [pc, #80]	; (80013ec <ES_WIFI_SendData+0xf0>)
 800139c:	f640 0252 	movw	r2, #2130	; 0x852
 80013a0:	f003 fbba 	bl	8004b18 <iprintf>
 80013a4:	4813      	ldr	r0, [pc, #76]	; (80013f4 <ES_WIFI_SendData+0xf8>)
   DEBUG("P0 command failed\n");
 80013a6:	f003 fc3d 	bl	8004c24 <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 80013aa:	2c02      	cmp	r4, #2
 80013ac:	d0ef      	beq.n	800138e <ES_WIFI_SendData+0x92>
  }
  UNLOCK_WIFI();
  return ret;
}
 80013ae:	4620      	mov	r0, r4
 80013b0:	b003      	add	sp, #12
 80013b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n");
 80013b6:	490c      	ldr	r1, [pc, #48]	; (80013e8 <ES_WIFI_SendData+0xec>)
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <ES_WIFI_SendData+0xf0>)
 80013ba:	f640 0257 	movw	r2, #2135	; 0x857
 80013be:	f003 fbab 	bl	8004b18 <iprintf>
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <ES_WIFI_SendData+0xfc>)
 80013c4:	e7ef      	b.n	80013a6 <ES_WIFI_SendData+0xaa>
   DEBUG("P0 command failed\n");
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <ES_WIFI_SendData+0xec>)
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <ES_WIFI_SendData+0xf0>)
 80013ca:	f640 025c 	movw	r2, #2140	; 0x85c
 80013ce:	f003 fba3 	bl	8004b18 <iprintf>
 80013d2:	480a      	ldr	r0, [pc, #40]	; (80013fc <ES_WIFI_SendData+0x100>)
 80013d4:	e7e7      	b.n	80013a6 <ES_WIFI_SendData+0xaa>
 80013d6:	bf00      	nop
 80013d8:	08006b2f 	.word	0x08006b2f
 80013dc:	08006d0d 	.word	0x08006d0d
 80013e0:	08006d15 	.word	0x08006d15
 80013e4:	08006d1e 	.word	0x08006d1e
 80013e8:	08006ba3 	.word	0x08006ba3
 80013ec:	08006c1e 	.word	0x08006c1e
 80013f0:	08006d23 	.word	0x08006d23
 80013f4:	08006d3e 	.word	0x08006d3e
 80013f8:	08006d57 	.word	0x08006d57
 80013fc:	08006d69 	.word	0x08006d69

08001400 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8001400:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001404:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8001408:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800140c:	4606      	mov	r6, r0
 800140e:	4690      	mov	r8, r2
 8001410:	461f      	mov	r7, r3
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001412:	d867      	bhi.n	80014e4 <ES_WIFI_ReceiveData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001414:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8001418:	460a      	mov	r2, r1
 800141a:	4628      	mov	r0, r5
 800141c:	4932      	ldr	r1, [pc, #200]	; (80014e8 <ES_WIFI_ReceiveData+0xe8>)
 800141e:	f003 fc09 	bl	8004c34 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001422:	462a      	mov	r2, r5
 8001424:	4629      	mov	r1, r5
 8001426:	4630      	mov	r0, r6
 8001428:	f7ff fb66 	bl	8000af8 <AT_ExecuteCommand>
 800142c:	4604      	mov	r4, r0
 800142e:	4682      	mov	sl, r0

    if(ret == ES_WIFI_STATUS_OK)
 8001430:	2800      	cmp	r0, #0
 8001432:	d149      	bne.n	80014c8 <ES_WIFI_ReceiveData+0xc8>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001434:	492d      	ldr	r1, [pc, #180]	; (80014ec <ES_WIFI_ReceiveData+0xec>)
 8001436:	463a      	mov	r2, r7
 8001438:	4628      	mov	r0, r5
 800143a:	f003 fbfb 	bl	8004c34 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800143e:	462a      	mov	r2, r5
 8001440:	4629      	mov	r1, r5
 8001442:	4630      	mov	r0, r6
 8001444:	f7ff fb58 	bl	8000af8 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8001448:	4604      	mov	r4, r0
 800144a:	bb88      	cbnz	r0, 80014b0 <ES_WIFI_ReceiveData+0xb0>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800144c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800144e:	4928      	ldr	r1, [pc, #160]	; (80014f0 <ES_WIFI_ReceiveData+0xf0>)
 8001450:	2a01      	cmp	r2, #1
 8001452:	bf38      	it	cc
 8001454:	2201      	movcc	r2, #1
 8001456:	4628      	mov	r0, r5
 8001458:	f003 fbec 	bl	8004c34 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800145c:	462a      	mov	r2, r5
 800145e:	4629      	mov	r1, r5
 8001460:	4630      	mov	r0, r6
 8001462:	f7ff fb49 	bl	8000af8 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8001466:	4604      	mov	r4, r0
 8001468:	b9d0      	cbnz	r0, 80014a0 <ES_WIFI_ReceiveData+0xa0>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800146a:	4922      	ldr	r1, [pc, #136]	; (80014f4 <ES_WIFI_ReceiveData+0xf4>)
 800146c:	4628      	mov	r0, r5
 800146e:	f003 fc10 	bl	8004c92 <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001472:	f8cd 9000 	str.w	r9, [sp]
 8001476:	463b      	mov	r3, r7
 8001478:	4642      	mov	r2, r8
 800147a:	4629      	mov	r1, r5
 800147c:	4630      	mov	r0, r6
 800147e:	f7ff fbbf 	bl	8000c00 <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 8001482:	4604      	mov	r4, r0
 8001484:	b140      	cbz	r0, 8001498 <ES_WIFI_ReceiveData+0x98>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 8001486:	491c      	ldr	r1, [pc, #112]	; (80014f8 <ES_WIFI_ReceiveData+0xf8>)
 8001488:	481c      	ldr	r0, [pc, #112]	; (80014fc <ES_WIFI_ReceiveData+0xfc>)
 800148a:	f640 02ed 	movw	r2, #2285	; 0x8ed
 800148e:	f003 fb43 	bl	8004b18 <iprintf>
 8001492:	481b      	ldr	r0, [pc, #108]	; (8001500 <ES_WIFI_ReceiveData+0x100>)
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 8001494:	f003 fbc6 	bl	8004c24 <puts>
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8001498:	4620      	mov	r0, r4
 800149a:	b002      	add	sp, #8
 800149c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("setting timeout failed\n");
 80014a0:	4915      	ldr	r1, [pc, #84]	; (80014f8 <ES_WIFI_ReceiveData+0xf8>)
 80014a2:	4816      	ldr	r0, [pc, #88]	; (80014fc <ES_WIFI_ReceiveData+0xfc>)
 80014a4:	f640 02f2 	movw	r2, #2290	; 0x8f2
 80014a8:	f003 fb36 	bl	8004b18 <iprintf>
 80014ac:	4815      	ldr	r0, [pc, #84]	; (8001504 <ES_WIFI_ReceiveData+0x104>)
 80014ae:	e7f1      	b.n	8001494 <ES_WIFI_ReceiveData+0x94>
        DEBUG("setting requested len failed\n");
 80014b0:	4911      	ldr	r1, [pc, #68]	; (80014f8 <ES_WIFI_ReceiveData+0xf8>)
 80014b2:	4812      	ldr	r0, [pc, #72]	; (80014fc <ES_WIFI_ReceiveData+0xfc>)
 80014b4:	f640 02f7 	movw	r2, #2295	; 0x8f7
 80014b8:	f003 fb2e 	bl	8004b18 <iprintf>
 80014bc:	4812      	ldr	r0, [pc, #72]	; (8001508 <ES_WIFI_ReceiveData+0x108>)
 80014be:	f003 fbb1 	bl	8004c24 <puts>
        *Receivedlen = 0;
 80014c2:	f8a9 a000 	strh.w	sl, [r9]
 80014c6:	e7e7      	b.n	8001498 <ES_WIFI_ReceiveData+0x98>
      DEBUG("setting socket for read failed\n");
 80014c8:	f640 02fd 	movw	r2, #2301	; 0x8fd
 80014cc:	490a      	ldr	r1, [pc, #40]	; (80014f8 <ES_WIFI_ReceiveData+0xf8>)
 80014ce:	480b      	ldr	r0, [pc, #44]	; (80014fc <ES_WIFI_ReceiveData+0xfc>)
 80014d0:	f003 fb22 	bl	8004b18 <iprintf>
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <ES_WIFI_ReceiveData+0x10c>)
 80014d6:	f003 fba5 	bl	8004c24 <puts>
      issue15++;
 80014da:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <ES_WIFI_ReceiveData+0x110>)
 80014dc:	6813      	ldr	r3, [r2, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e7d9      	b.n	8001498 <ES_WIFI_ReceiveData+0x98>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80014e4:	2402      	movs	r4, #2
 80014e6:	e7d7      	b.n	8001498 <ES_WIFI_ReceiveData+0x98>
 80014e8:	08006b2f 	.word	0x08006b2f
 80014ec:	08006d8b 	.word	0x08006d8b
 80014f0:	08006d92 	.word	0x08006d92
 80014f4:	08006d9a 	.word	0x08006d9a
 80014f8:	08006ba3 	.word	0x08006ba3
 80014fc:	08006c1e 	.word	0x08006c1e
 8001500:	08006d9e 	.word	0x08006d9e
 8001504:	08006dbc 	.word	0x08006dbc
 8001508:	08006dd3 	.word	0x08006dd3
 800150c:	08006df0 	.word	0x08006df0
 8001510:	200008c4 	.word	0x200008c4

08001514 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t        loop_per_us = 0;
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8001516:	4c16      	ldr	r4, [pc, #88]	; (8001570 <SPI_WIFI_DelayUs+0x5c>)
 8001518:	4f16      	ldr	r7, [pc, #88]	; (8001574 <SPI_WIFI_DelayUs+0x60>)
  volatile        uint32_t ct = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	9301      	str	r3, [sp, #4]
  if (cycle_per_loop == 0 ) 
 800151e:	6823      	ldr	r3, [r4, #0]
{
 8001520:	4606      	mov	r6, r0
  if (cycle_per_loop == 0 ) 
 8001522:	b98b      	cbnz	r3, 8001548 <SPI_WIFI_DelayUs+0x34>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800152a:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t t = 0;
     ct = cycle_per_ms;
 800152e:	9301      	str	r3, [sp, #4]
     t = HAL_GetTick();
 8001530:	f000 fdd2 	bl	80020d8 <HAL_GetTick>
 8001534:	4605      	mov	r5, r0
     while(ct) ct--;
 8001536:	9b01      	ldr	r3, [sp, #4]
 8001538:	b99b      	cbnz	r3, 8001562 <SPI_WIFI_DelayUs+0x4e>
     cycle_per_loop = HAL_GetTick()-t;
 800153a:	f000 fdcd 	bl	80020d8 <HAL_GetTick>
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800153e:	1b40      	subs	r0, r0, r5
 8001540:	bf0a      	itet	eq
 8001542:	2301      	moveq	r3, #1
     cycle_per_loop = HAL_GetTick()-t;
 8001544:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001546:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <SPI_WIFI_DelayUs+0x64>)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001550:	6820      	ldr	r0, [r4, #0]
 8001552:	fbb3 f3f0 	udiv	r3, r3, r0
  ct = n * loop_per_us;
 8001556:	4373      	muls	r3, r6
  while(ct) ct--;
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	9b01      	ldr	r3, [sp, #4]
 800155c:	b92b      	cbnz	r3, 800156a <SPI_WIFI_DelayUs+0x56>
  return;
}
 800155e:	b003      	add	sp, #12
 8001560:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 8001562:	9b01      	ldr	r3, [sp, #4]
 8001564:	3b01      	subs	r3, #1
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	e7e5      	b.n	8001536 <SPI_WIFI_DelayUs+0x22>
  while(ct) ct--;
 800156a:	9b01      	ldr	r3, [sp, #4]
 800156c:	3b01      	subs	r3, #1
 800156e:	e7f3      	b.n	8001558 <SPI_WIFI_DelayUs+0x44>
 8001570:	200008c8 	.word	0x200008c8
 8001574:	20000030 	.word	0x20000030
 8001578:	000f4240 	.word	0x000f4240

0800157c <wait_spi_tx_event.isra.0>:
int wait_spi_tx_event(int timeout)
 800157c:	b570      	push	{r4, r5, r6, lr}
 800157e:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 8001580:	f000 fdaa 	bl	80020d8 <HAL_GetTick>
  while (spi_tx_event==1)
 8001584:	4e05      	ldr	r6, [pc, #20]	; (800159c <wait_spi_tx_event.isra.0+0x20>)
  int tickstart = HAL_GetTick();
 8001586:	4604      	mov	r4, r0
  while (spi_tx_event==1)
 8001588:	6873      	ldr	r3, [r6, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d104      	bne.n	8001598 <wait_spi_tx_event.isra.0+0x1c>
    if((HAL_GetTick() - tickstart ) > timeout)
 800158e:	f000 fda3 	bl	80020d8 <HAL_GetTick>
 8001592:	1b00      	subs	r0, r0, r4
 8001594:	42a8      	cmp	r0, r5
 8001596:	d9f7      	bls.n	8001588 <wait_spi_tx_event.isra.0+0xc>
}
 8001598:	bd70      	pop	{r4, r5, r6, pc}
 800159a:	bf00      	nop
 800159c:	200008c8 	.word	0x200008c8

080015a0 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 80015a0:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80015a2:	4840      	ldr	r0, [pc, #256]	; (80016a4 <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 80015a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 80015a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 80015a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ac:	659a      	str	r2, [r3, #88]	; 0x58
 80015ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 80015b0:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 80015b2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80015b6:	9201      	str	r2, [sp, #4]
 80015b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015bc:	f042 0202 	orr.w	r2, r2, #2
 80015c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80015c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c4:	f002 0202 	and.w	r2, r2, #2
 80015c8:	9202      	str	r2, [sp, #8]
 80015ca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ce:	f042 0204 	orr.w	r2, r2, #4
 80015d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80015d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015d6:	f002 0204 	and.w	r2, r2, #4
 80015da:	9203      	str	r2, [sp, #12]
 80015dc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015e0:	f042 0210 	orr.w	r2, r2, #16
 80015e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80015ec:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ee:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80015f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80015f4:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 80015f6:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80015fa:	f000 fef7 	bl	80023ec <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80015fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001602:	a905      	add	r1, sp, #20
 8001604:	4827      	ldr	r0, [pc, #156]	; (80016a4 <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001606:	2602      	movs	r6, #2
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001608:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800160c:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001610:	f000 fe08 	bl	8002224 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001614:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001618:	a905      	add	r1, sp, #20
 800161a:	4823      	ldr	r0, [pc, #140]	; (80016a8 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800161c:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001620:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001624:	f000 fdfe 	bl	8002224 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001628:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800162c:	a905      	add	r1, sp, #20
 800162e:	481e      	ldr	r0, [pc, #120]	; (80016a8 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Alternate = 0;
 8001630:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001632:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001636:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800163a:	f000 fdf3 	bl	8002224 <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800163e:	4622      	mov	r2, r4
 8001640:	4621      	mov	r1, r4
 8001642:	4819      	ldr	r0, [pc, #100]	; (80016a8 <SPI_WIFI_MspInit+0x108>)
 8001644:	f000 fed2 	bl	80023ec <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001648:	a905      	add	r1, sp, #20
 800164a:	4817      	ldr	r0, [pc, #92]	; (80016a8 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800164c:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800164e:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001652:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001656:	f000 fde5 	bl	8002224 <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800165a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800165e:	a905      	add	r1, sp, #20
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001662:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001664:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001668:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800166c:	f000 fdda 	bl	8002224 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001674:	a905      	add	r1, sp, #20
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001678:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800167a:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800167e:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001682:	f000 fdcf 	bl	8002224 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001686:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800168a:	4808      	ldr	r0, [pc, #32]	; (80016ac <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800168c:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800168e:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001690:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001694:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001698:	f000 fdc4 	bl	8002224 <HAL_GPIO_Init>
}
 800169c:	b00b      	add	sp, #44	; 0x2c
 800169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48000400 	.word	0x48000400
 80016a8:	48001000 	.word	0x48001000
 80016ac:	48000800 	.word	0x48000800

080016b0 <SPI_WIFI_ResetModule>:
{
 80016b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 80016b2:	f000 fd11 	bl	80020d8 <HAL_GetTick>
  WIFI_RESET_MODULE();
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 80016bc:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 80016be:	482e      	ldr	r0, [pc, #184]	; (8001778 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80016c0:	4f2e      	ldr	r7, [pc, #184]	; (800177c <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 80016c2:	f000 fe93 	bl	80023ec <HAL_GPIO_WritePin>
 80016c6:	200a      	movs	r0, #10
 80016c8:	f000 fd0c 	bl	80020e4 <HAL_Delay>
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d2:	4829      	ldr	r0, [pc, #164]	; (8001778 <SPI_WIFI_ResetModule+0xc8>)
 80016d4:	f000 fe8a 	bl	80023ec <HAL_GPIO_WritePin>
 80016d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016dc:	f000 fd02 	bl	80020e4 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 80016e0:	4825      	ldr	r0, [pc, #148]	; (8001778 <SPI_WIFI_ResetModule+0xc8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	2101      	movs	r1, #1
 80016e6:	f000 fe81 	bl	80023ec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80016ea:	200f      	movs	r0, #15
 80016ec:	f7ff ff12 	bl	8001514 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 80016f0:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 80016f2:	4821      	ldr	r0, [pc, #132]	; (8001778 <SPI_WIFI_ResetModule+0xc8>)
 80016f4:	2102      	movs	r1, #2
 80016f6:	f000 fe73 	bl	80023e0 <HAL_GPIO_ReadPin>
 80016fa:	2801      	cmp	r0, #1
 80016fc:	4602      	mov	r2, r0
 80016fe:	d020      	beq.n	8001742 <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS();
 8001700:	2201      	movs	r2, #1
 8001702:	481d      	ldr	r0, [pc, #116]	; (8001778 <SPI_WIFI_ResetModule+0xc8>)
 8001704:	4611      	mov	r1, r2
 8001706:	f000 fe71 	bl	80023ec <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800170a:	f89d 3000 	ldrb.w	r3, [sp]
 800170e:	2b15      	cmp	r3, #21
 8001710:	d12e      	bne.n	8001770 <SPI_WIFI_ResetModule+0xc0>
 8001712:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001716:	2b15      	cmp	r3, #21
 8001718:	d12a      	bne.n	8001770 <SPI_WIFI_ResetModule+0xc0>
 800171a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800171e:	2b0d      	cmp	r3, #13
 8001720:	d126      	bne.n	8001770 <SPI_WIFI_ResetModule+0xc0>
 8001722:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001726:	2b0a      	cmp	r3, #10
 8001728:	d122      	bne.n	8001770 <SPI_WIFI_ResetModule+0xc0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800172a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800172e:	2b3e      	cmp	r3, #62	; 0x3e
 8001730:	d11e      	bne.n	8001770 <SPI_WIFI_ResetModule+0xc0>
 8001732:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001736:	3820      	subs	r0, #32
 8001738:	bf18      	it	ne
 800173a:	f04f 30ff 	movne.w	r0, #4294967295
}
 800173e:	b003      	add	sp, #12
 8001740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001742:	eb0d 0104 	add.w	r1, sp, r4
 8001746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800174a:	4638      	mov	r0, r7
 800174c:	f002 f944 	bl	80039d8 <HAL_SPI_Receive>
 8001750:	4606      	mov	r6, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001752:	f000 fcc1 	bl	80020d8 <HAL_GetTick>
 8001756:	1b40      	subs	r0, r0, r5
    count += 2;
 8001758:	3402      	adds	r4, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800175a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 800175e:	b2e4      	uxtb	r4, r4
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001760:	d201      	bcs.n	8001766 <SPI_WIFI_ResetModule+0xb6>
 8001762:	2e00      	cmp	r6, #0
 8001764:	d0c5      	beq.n	80016f2 <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS();
 8001766:	2201      	movs	r2, #1
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <SPI_WIFI_ResetModule+0xc8>)
 800176a:	4611      	mov	r1, r2
 800176c:	f000 fe3e 	bl	80023ec <HAL_GPIO_WritePin>
    return -1;
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	e7e3      	b.n	800173e <SPI_WIFI_ResetModule+0x8e>
 8001776:	bf00      	nop
 8001778:	48001000 	.word	0x48001000
 800177c:	200008d0 	.word	0x200008d0

08001780 <SPI_WIFI_Init>:
{
 8001780:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8001782:	4605      	mov	r5, r0
 8001784:	bb88      	cbnz	r0, 80017ea <SPI_WIFI_Init+0x6a>
    hspi.Instance               = SPI3;
 8001786:	4c1d      	ldr	r4, [pc, #116]	; (80017fc <SPI_WIFI_Init+0x7c>)
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <SPI_WIFI_Init+0x80>)
 800178a:	4620      	mov	r0, r4
 800178c:	f840 3f08 	str.w	r3, [r0, #8]!
    SPI_WIFI_MspInit(&hspi);
 8001790:	f7ff ff06 	bl	80015a0 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001794:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001798:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800179c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80017a0:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80017a4:	e9c4 3505 	strd	r3, r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80017a8:	f104 0008 	add.w	r0, r4, #8
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80017ac:	2310      	movs	r3, #16
 80017ae:	e9c4 2308 	strd	r2, r3, [r4, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80017b2:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 80017b6:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80017ba:	61e5      	str	r5, [r4, #28]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80017bc:	f001 feab 	bl	8003516 <HAL_SPI_Init>
 80017c0:	4602      	mov	r2, r0
 80017c2:	b9b8      	cbnz	r0, 80017f4 <SPI_WIFI_Init+0x74>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80017c4:	4601      	mov	r1, r0
 80017c6:	9001      	str	r0, [sp, #4]
 80017c8:	2007      	movs	r0, #7
 80017ca:	f000 fcb1 	bl	8002130 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80017ce:	2007      	movs	r0, #7
 80017d0:	f000 fce0 	bl	8002194 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80017d4:	9a01      	ldr	r2, [sp, #4]
 80017d6:	2033      	movs	r0, #51	; 0x33
 80017d8:	4611      	mov	r1, r2
 80017da:	f000 fca9 	bl	8002130 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80017de:	2033      	movs	r0, #51	; 0x33
 80017e0:	f000 fcd8 	bl	8002194 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 80017e4:	200a      	movs	r0, #10
 80017e6:	f7ff fe95 	bl	8001514 <SPI_WIFI_DelayUs>
}
 80017ea:	b003      	add	sp, #12
 80017ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc= SPI_WIFI_ResetModule();
 80017f0:	f7ff bf5e 	b.w	80016b0 <SPI_WIFI_ResetModule>
}
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	b003      	add	sp, #12
 80017fa:	bd30      	pop	{r4, r5, pc}
 80017fc:	200008c8 	.word	0x200008c8
 8001800:	40003c00 	.word	0x40003c00

08001804 <SPI_WIFI_DeInit>:
{
 8001804:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8001806:	4802      	ldr	r0, [pc, #8]	; (8001810 <SPI_WIFI_DeInit+0xc>)
 8001808:	f001 ff0a 	bl	8003620 <HAL_SPI_DeInit>
}
 800180c:	2000      	movs	r0, #0
 800180e:	bd08      	pop	{r3, pc}
 8001810:	200008d0 	.word	0x200008d0

08001814 <SPI_WIFI_ReceiveData>:
{
 8001814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001818:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS();
 800181a:	2201      	movs	r2, #1
{
 800181c:	4604      	mov	r4, r0
 800181e:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS();
 8001820:	4836      	ldr	r0, [pc, #216]	; (80018fc <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event==1)
 8001822:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001900 <SPI_WIFI_ReceiveData+0xec>
  WIFI_DISABLE_NSS();
 8001826:	4611      	mov	r1, r2
 8001828:	f000 fde0 	bl	80023ec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 800182c:	2003      	movs	r0, #3
 800182e:	f7ff fe71 	bl	8001514 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 8001832:	f000 fc51 	bl	80020d8 <HAL_GetTick>
 8001836:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event==1)
 8001838:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800183c:	2b01      	cmp	r3, #1
 800183e:	d01a      	beq.n	8001876 <SPI_WIFI_ReceiveData+0x62>
  WIFI_ENABLE_NSS();
 8001840:	482e      	ldr	r0, [pc, #184]	; (80018fc <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 8001842:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80018fc <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001846:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001904 <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS();
 800184a:	2200      	movs	r2, #0
 800184c:	2101      	movs	r1, #1
 800184e:	f000 fdcd 	bl	80023ec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001852:	200f      	movs	r0, #15
 8001854:	f7ff fe5e 	bl	8001514 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001858:	3402      	adds	r4, #2
 800185a:	2500      	movs	r5, #0
 800185c:	2102      	movs	r1, #2
 800185e:	4658      	mov	r0, fp
 8001860:	f000 fdbe 	bl	80023e0 <HAL_GPIO_ReadPin>
 8001864:	2801      	cmp	r0, #1
 8001866:	b22e      	sxth	r6, r5
 8001868:	d00d      	beq.n	8001886 <SPI_WIFI_ReceiveData+0x72>
  WIFI_DISABLE_NSS();
 800186a:	2201      	movs	r2, #1
 800186c:	4823      	ldr	r0, [pc, #140]	; (80018fc <SPI_WIFI_ReceiveData+0xe8>)
 800186e:	4611      	mov	r1, r2
 8001870:	f000 fdbc 	bl	80023ec <HAL_GPIO_WritePin>
  return length;
 8001874:	e01a      	b.n	80018ac <SPI_WIFI_ReceiveData+0x98>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001876:	f000 fc2f 	bl	80020d8 <HAL_GetTick>
 800187a:	1b40      	subs	r0, r0, r5
 800187c:	4580      	cmp	r8, r0
 800187e:	d2db      	bcs.n	8001838 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001880:	f06f 0602 	mvn.w	r6, #2
 8001884:	e012      	b.n	80018ac <SPI_WIFI_ReceiveData+0x98>
    if((length < len) || (!len))
 8001886:	42af      	cmp	r7, r5
 8001888:	dc01      	bgt.n	800188e <SPI_WIFI_ReceiveData+0x7a>
 800188a:	2f00      	cmp	r7, #0
 800188c:	d1ed      	bne.n	800186a <SPI_WIFI_ReceiveData+0x56>
      spi_rx_event=1;
 800188e:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001890:	a901      	add	r1, sp, #4
 8001892:	4650      	mov	r0, sl
      spi_rx_event=1;
 8001894:	f8c9 2070 	str.w	r2, [r9, #112]	; 0x70
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001898:	f002 fa9c 	bl	8003dd4 <HAL_SPI_Receive_IT>
 800189c:	2201      	movs	r2, #1
 800189e:	b148      	cbz	r0, 80018b4 <SPI_WIFI_ReceiveData+0xa0>
        WIFI_DISABLE_NSS();
 80018a0:	4816      	ldr	r0, [pc, #88]	; (80018fc <SPI_WIFI_ReceiveData+0xe8>)
 80018a2:	4611      	mov	r1, r2
 80018a4:	f000 fda2 	bl	80023ec <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 80018a8:	f04f 36ff 	mov.w	r6, #4294967295
}
 80018ac:	4630      	mov	r0, r6
 80018ae:	b003      	add	sp, #12
 80018b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 80018b4:	f000 fc10 	bl	80020d8 <HAL_GetTick>
 80018b8:	4606      	mov	r6, r0
  while (spi_rx_event==1)
 80018ba:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d104      	bne.n	80018cc <SPI_WIFI_ReceiveData+0xb8>
    if((HAL_GetTick() - tickstart ) > timeout)
 80018c2:	f000 fc09 	bl	80020d8 <HAL_GetTick>
 80018c6:	1b80      	subs	r0, r0, r6
 80018c8:	4580      	cmp	r8, r0
 80018ca:	d2f6      	bcs.n	80018ba <SPI_WIFI_ReceiveData+0xa6>
      pData[0] = tmp[0];
 80018cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018d0:	f804 3c02 	strb.w	r3, [r4, #-2]
      if (length >= ES_WIFI_DATA_SIZE) {
 80018d4:	3502      	adds	r5, #2
      pData[1] = tmp[1];
 80018d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80018da:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 80018de:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80018e2:	f104 0402 	add.w	r4, r4, #2
 80018e6:	d1b9      	bne.n	800185c <SPI_WIFI_ReceiveData+0x48>
        WIFI_DISABLE_NSS();
 80018e8:	2201      	movs	r2, #1
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <SPI_WIFI_ReceiveData+0xe8>)
 80018ec:	4611      	mov	r1, r2
 80018ee:	f000 fd7d 	bl	80023ec <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80018f2:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();
 80018f6:	f7ff fedb 	bl	80016b0 <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80018fa:	e7d7      	b.n	80018ac <SPI_WIFI_ReceiveData+0x98>
 80018fc:	48001000 	.word	0x48001000
 8001900:	200008c8 	.word	0x200008c8
 8001904:	200008d0 	.word	0x200008d0

08001908 <SPI_WIFI_SendData>:
{
 8001908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800190c:	4605      	mov	r5, r0
 800190e:	460c      	mov	r4, r1
 8001910:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 8001912:	f000 fbe1 	bl	80020d8 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001916:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80019b0 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 800191a:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY()==0)
 800191c:	2102      	movs	r1, #2
 800191e:	4648      	mov	r0, r9
 8001920:	f000 fd5e 	bl	80023e0 <HAL_GPIO_ReadPin>
 8001924:	2801      	cmp	r0, #1
 8001926:	4606      	mov	r6, r0
 8001928:	d11c      	bne.n	8001964 <SPI_WIFI_SendData+0x5c>
  cmddata_rdy_rising_event=1;
 800192a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80019b8 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 800192e:	4601      	mov	r1, r0
  cmddata_rdy_rising_event=1;
 8001930:	f8c8 006c 	str.w	r0, [r8, #108]	; 0x6c
  WIFI_ENABLE_NSS();
 8001934:	2200      	movs	r2, #0
 8001936:	481e      	ldr	r0, [pc, #120]	; (80019b0 <SPI_WIFI_SendData+0xa8>)
 8001938:	f000 fd58 	bl	80023ec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800193c:	200f      	movs	r0, #15
 800193e:	f7ff fde9 	bl	8001514 <SPI_WIFI_DelayUs>
  if (len > 1)
 8001942:	2c01      	cmp	r4, #1
 8001944:	d91a      	bls.n	800197c <SPI_WIFI_SendData+0x74>
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8001946:	0862      	lsrs	r2, r4, #1
 8001948:	4629      	mov	r1, r5
 800194a:	f108 0008 	add.w	r0, r8, #8
    spi_tx_event=1;
 800194e:	f8c8 6004 	str.w	r6, [r8, #4]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8001952:	f002 f965 	bl	8003c20 <HAL_SPI_Transmit_IT>
 8001956:	b170      	cbz	r0, 8001976 <SPI_WIFI_SendData+0x6e>
      WIFI_DISABLE_NSS();
 8001958:	2201      	movs	r2, #1
 800195a:	4815      	ldr	r0, [pc, #84]	; (80019b0 <SPI_WIFI_SendData+0xa8>)
 800195c:	4611      	mov	r1, r2
 800195e:	f000 fd45 	bl	80023ec <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 8001962:	e005      	b.n	8001970 <SPI_WIFI_SendData+0x68>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001964:	f000 fbb8 	bl	80020d8 <HAL_GetTick>
 8001968:	eba0 0008 	sub.w	r0, r0, r8
 800196c:	4287      	cmp	r7, r0
 800196e:	d2d5      	bcs.n	800191c <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	e019      	b.n	80019aa <SPI_WIFI_SendData+0xa2>
    wait_spi_tx_event(timeout);
 8001976:	4638      	mov	r0, r7
 8001978:	f7ff fe00 	bl	800157c <wait_spi_tx_event.isra.0>
  if ( len & 1)
 800197c:	07e3      	lsls	r3, r4, #31
 800197e:	d513      	bpl.n	80019a8 <SPI_WIFI_SendData+0xa0>
    Padding[0] = pdata[len-1];
 8001980:	4425      	add	r5, r4
    spi_tx_event=1;
 8001982:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 8001984:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8001988:	f88d 3004 	strb.w	r3, [sp, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800198c:	4809      	ldr	r0, [pc, #36]	; (80019b4 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 800198e:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8001992:	230a      	movs	r3, #10
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001994:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8001996:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800199a:	f002 f941 	bl	8003c20 <HAL_SPI_Transmit_IT>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d1da      	bne.n	8001958 <SPI_WIFI_SendData+0x50>
    wait_spi_tx_event(timeout);
 80019a2:	4638      	mov	r0, r7
 80019a4:	f7ff fdea 	bl	800157c <wait_spi_tx_event.isra.0>
  return len;
 80019a8:	b220      	sxth	r0, r4
}
 80019aa:	b003      	add	sp, #12
 80019ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019b0:	48001000 	.word	0x48001000
 80019b4:	200008d0 	.word	0x200008d0
 80019b8:	200008c8 	.word	0x200008c8

080019bc <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 80019bc:	f000 bb92 	b.w	80020e4 <HAL_Delay>

080019c0 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 80019c0:	4b02      	ldr	r3, [pc, #8]	; (80019cc <HAL_SPI_RxCpltCallback+0xc>)
 80019c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019c4:	b10a      	cbz	r2, 80019ca <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80019c6:	2200      	movs	r2, #0
 80019c8:	671a      	str	r2, [r3, #112]	; 0x70
  }
}
 80019ca:	4770      	bx	lr
 80019cc:	200008c8 	.word	0x200008c8

080019d0 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <HAL_SPI_TxCpltCallback+0xc>)
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	b10a      	cbz	r2, 80019da <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80019d6:	2200      	movs	r2, #0
 80019d8:	605a      	str	r2, [r3, #4]
  }
}
 80019da:	4770      	bx	lr
 80019dc:	200008c8 	.word	0x200008c8

080019e0 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event==1)  
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <SPI_WIFI_ISR+0x10>)
 80019e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019e4:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80019e6:	bf04      	itt	eq
 80019e8:	2200      	moveq	r2, #0
 80019ea:	66da      	streq	r2, [r3, #108]	; 0x6c
   }
}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200008c8 	.word	0x200008c8

080019f4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80019f4:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <WIFI_Init+0x30>)
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <WIFI_Init+0x34>)
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <WIFI_Init+0x38>)
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <WIFI_Init+0x3c>)
 8001a02:	490c      	ldr	r1, [pc, #48]	; (8001a34 <WIFI_Init+0x40>)
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <WIFI_Init+0x44>)
 8001a06:	f7ff f9e3 	bl	8000dd0 <ES_WIFI_RegisterBusIO>
 8001a0a:	b940      	cbnz	r0, 8001a1e <WIFI_Init+0x2a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001a0c:	480a      	ldr	r0, [pc, #40]	; (8001a38 <WIFI_Init+0x44>)
 8001a0e:	f7ff f97d 	bl	8000d0c <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001a12:	3800      	subs	r0, #0
 8001a14:	bf18      	it	ne
 8001a16:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8001a18:	b003      	add	sp, #12
 8001a1a:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001a1e:	2001      	movs	r0, #1
 8001a20:	e7fa      	b.n	8001a18 <WIFI_Init+0x24>
 8001a22:	bf00      	nop
 8001a24:	08001815 	.word	0x08001815
 8001a28:	08001909 	.word	0x08001909
 8001a2c:	08001805 	.word	0x08001805
 8001a30:	080019bd 	.word	0x080019bd
 8001a34:	08001781 	.word	0x08001781
 8001a38:	2000093c 	.word	0x2000093c

08001a3c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8001a3c:	b508      	push	{r3, lr}
 8001a3e:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8001a40:	460a      	mov	r2, r1
 8001a42:	4601      	mov	r1, r0
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <WIFI_Connect+0x24>)
 8001a46:	f7ff f9d5 	bl	8000df4 <ES_WIFI_Connect>
 8001a4a:	b930      	cbnz	r0, 8001a5a <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <WIFI_Connect+0x24>)
 8001a4e:	f7ff fa2d 	bl	8000eac <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001a52:	3800      	subs	r0, #0
 8001a54:	bf18      	it	ne
 8001a56:	2001      	movne	r0, #1
    {
       ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8001a58:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	e7fc      	b.n	8001a58 <WIFI_Connect+0x1c>
 8001a5e:	bf00      	nop
 8001a60:	2000093c 	.word	0x2000093c

08001a64 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8001a64:	4601      	mov	r1, r0
 8001a66:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <WIFI_GetMAC_Address+0x14>)
 8001a6a:	f7ff fa93 	bl	8000f94 <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001a6e:	3800      	subs	r0, #0
 8001a70:	bf18      	it	ne
 8001a72:	2001      	movne	r0, #1
 8001a74:	bd08      	pop	{r3, pc}
 8001a76:	bf00      	nop
 8001a78:	2000093c 	.word	0x2000093c

08001a7c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8001a7c:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8001a7e:	4d06      	ldr	r5, [pc, #24]	; (8001a98 <WIFI_GetIP_Address+0x1c>)
{
 8001a80:	4604      	mov	r4, r0
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8001a82:	4628      	mov	r0, r5
 8001a84:	f7ff f9f6 	bl	8000e74 <ES_WIFI_IsConnected>
 8001a88:	2801      	cmp	r0, #1
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8001a8a:	bf03      	ittte	eq
 8001a8c:	f8d5 30d5 	ldreq.w	r3, [r5, #213]	; 0xd5
 8001a90:	6023      	streq	r3, [r4, #0]
    ret = WIFI_STATUS_OK;
 8001a92:	2000      	moveq	r0, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001a94:	2001      	movne	r0, #1
  }
  return ret;
}
 8001a96:	bd38      	pop	{r3, r4, r5, pc}
 8001a98:	2000093c 	.word	0x2000093c

08001a9c <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 8001a9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
  conn.LocalPort = port;
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001a9e:	3900      	subs	r1, #0
 8001aa0:	bf18      	it	ne
 8001aa2:	2101      	movne	r1, #1
  conn.LocalPort = port;
 8001aa4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  conn.Number = socket;
 8001aa8:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001aac:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.Backlog = backlog;
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001ab0:	4806      	ldr	r0, [pc, #24]	; (8001acc <WIFI_StartServer+0x30>)
  conn.LocalPort = port;
 8001ab2:	f8ad 3008 	strh.w	r3, [sp, #8]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001ab6:	a901      	add	r1, sp, #4
  conn.Backlog = backlog;
 8001ab8:	f88d 2014 	strb.w	r2, [sp, #20]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001abc:	f7ff fa88 	bl	8000fd0 <ES_WIFI_StartServerSingleConn>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001ac0:	3800      	subs	r0, #0
 8001ac2:	bf18      	it	ne
 8001ac4:	2001      	movne	r0, #1
 8001ac6:	b007      	add	sp, #28
 8001ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001acc:	2000093c 	.word	0x2000093c

08001ad0 <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 8001ad0:	b530      	push	{r4, r5, lr}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	4614      	mov	r4, r2
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 8001ad6:	f88d 0005 	strb.w	r0, [sp, #5]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8001ada:	aa01      	add	r2, sp, #4
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <WIFI_WaitServerConnection+0x44>)
{
 8001ade:	461d      	mov	r5, r3
  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8001ae0:	f7ff fad0 	bl	8001084 <ES_WIFI_WaitServerConnection>

  if (ES_WIFI_STATUS_OK == ret)
 8001ae4:	b948      	cbnz	r0, 8001afa <WIFI_WaitServerConnection+0x2a>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 8001ae6:	b115      	cbz	r5, 8001aee <WIFI_WaitServerConnection+0x1e>
 8001ae8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001aec:	802b      	strh	r3, [r5, #0]
    if (RemoteIp)
 8001aee:	b114      	cbz	r4, 8001af6 <WIFI_WaitServerConnection+0x26>
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 8001af0:	f8dd 300a 	ldr.w	r3, [sp, #10]
 8001af4:	6023      	str	r3, [r4, #0]
    }
    return  WIFI_STATUS_TIMEOUT;
  }

  return WIFI_STATUS_ERROR;
}
 8001af6:	b007      	add	sp, #28
 8001af8:	bd30      	pop	{r4, r5, pc}
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 8001afa:	2803      	cmp	r0, #3
 8001afc:	d107      	bne.n	8001b0e <WIFI_WaitServerConnection+0x3e>
    if (RemotePort) *RemotePort=0;
 8001afe:	b10d      	cbz	r5, 8001b04 <WIFI_WaitServerConnection+0x34>
 8001b00:	2300      	movs	r3, #0
 8001b02:	802b      	strh	r3, [r5, #0]
    if (RemoteIp)
 8001b04:	b10c      	cbz	r4, 8001b0a <WIFI_WaitServerConnection+0x3a>
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 8001b06:	2300      	movs	r3, #0
 8001b08:	6023      	str	r3, [r4, #0]
    return  WIFI_STATUS_TIMEOUT;
 8001b0a:	2005      	movs	r0, #5
 8001b0c:	e7f3      	b.n	8001af6 <WIFI_WaitServerConnection+0x26>
  return WIFI_STATUS_ERROR;
 8001b0e:	2001      	movs	r0, #1
 8001b10:	e7f1      	b.n	8001af6 <WIFI_WaitServerConnection+0x26>
 8001b12:	bf00      	nop
 8001b14:	2000093c 	.word	0x2000093c

08001b18 <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 8001b18:	4601      	mov	r1, r0
 8001b1a:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <WIFI_CloseServerConnection+0x14>)
 8001b1e:	f7ff fb71 	bl	8001204 <ES_WIFI_CloseServerConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001b22:	3800      	subs	r0, #0
 8001b24:	bf18      	it	ne
 8001b26:	2001      	movne	r0, #1
 8001b28:	bd08      	pop	{r3, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000093c 	.word	0x2000093c

08001b30 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8001b30:	4601      	mov	r1, r0
 8001b32:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 8001b34:	4803      	ldr	r0, [pc, #12]	; (8001b44 <WIFI_StopServer+0x14>)
 8001b36:	f7ff fba3 	bl	8001280 <ES_WIFI_StopServerSingleConn>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001b3a:	3800      	subs	r0, #0
 8001b3c:	bf18      	it	ne
 8001b3e:	2001      	movne	r0, #1
 8001b40:	bd08      	pop	{r3, pc}
 8001b42:	bf00      	nop
 8001b44:	2000093c 	.word	0x2000093c

08001b48 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8001b48:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8001b4a:	9c04      	ldr	r4, [sp, #16]
 8001b4c:	e9cd 3400 	strd	r3, r4, [sp]
 8001b50:	4613      	mov	r3, r2
 8001b52:	460a      	mov	r2, r1
 8001b54:	4601      	mov	r1, r0
 8001b56:	4804      	ldr	r0, [pc, #16]	; (8001b68 <WIFI_SendData+0x20>)
 8001b58:	f7ff fbd0 	bl	80012fc <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8001b5c:	3800      	subs	r0, #0
 8001b5e:	bf18      	it	ne
 8001b60:	2001      	movne	r0, #1
 8001b62:	b002      	add	sp, #8
 8001b64:	bd10      	pop	{r4, pc}
 8001b66:	bf00      	nop
 8001b68:	2000093c 	.word	0x2000093c

08001b6c <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8001b6c:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8001b6e:	9c04      	ldr	r4, [sp, #16]
 8001b70:	e9cd 3400 	strd	r3, r4, [sp]
 8001b74:	4613      	mov	r3, r2
 8001b76:	460a      	mov	r2, r1
 8001b78:	4601      	mov	r1, r0
 8001b7a:	4804      	ldr	r0, [pc, #16]	; (8001b8c <WIFI_ReceiveData+0x20>)
 8001b7c:	f7ff fc40 	bl	8001400 <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001b80:	3800      	subs	r0, #0
 8001b82:	bf18      	it	ne
 8001b84:	2001      	movne	r0, #1
 8001b86:	b002      	add	sp, #8
 8001b88:	bd10      	pop	{r4, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000093c 	.word	0x2000093c

08001b90 <I2Cx_Init.constprop.0>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8001b90:	b570      	push	{r4, r5, r6, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001b92:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <I2Cx_Init.constprop.0+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001b94:	4c2a      	ldr	r4, [pc, #168]	; (8001c40 <I2Cx_Init.constprop.0+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001b96:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <I2Cx_Init.constprop.0+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b98:	4d2b      	ldr	r5, [pc, #172]	; (8001c48 <I2Cx_Init.constprop.0+0xb8>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001b9a:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001b9c:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 8001ba6:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001baa:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bae:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001bb6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8001bb8:	b088      	sub	sp, #32
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001bc2:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001bc4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001bc8:	2312      	movs	r3, #18
 8001bca:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001bce:	2003      	movs	r0, #3
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bd6:	a903      	add	r1, sp, #12
 8001bd8:	481c      	ldr	r0, [pc, #112]	; (8001c4c <I2Cx_Init.constprop.0+0xbc>)
 8001bda:	f000 fb23 	bl	8002224 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bde:	a903      	add	r1, sp, #12
 8001be0:	481a      	ldr	r0, [pc, #104]	; (8001c4c <I2Cx_Init.constprop.0+0xbc>)
 8001be2:	f000 fb1f 	bl	8002224 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001be6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bec:	65ab      	str	r3, [r5, #88]	; 0x58
 8001bee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8001bf8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001bfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bfe:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001c00:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001c02:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c06:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001c08:	4632      	mov	r2, r6
 8001c0a:	210f      	movs	r1, #15
 8001c0c:	2021      	movs	r0, #33	; 0x21
 8001c0e:	f000 fa8f 	bl	8002130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001c12:	2021      	movs	r0, #33	; 0x21
 8001c14:	f000 fabe 	bl	8002194 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001c18:	4632      	mov	r2, r6
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	2022      	movs	r0, #34	; 0x22
 8001c1e:	f000 fa87 	bl	8002130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001c22:	2022      	movs	r0, #34	; 0x22
 8001c24:	f000 fab6 	bl	8002194 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f000 fd17 	bl	800265c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001c2e:	4631      	mov	r1, r6
 8001c30:	4620      	mov	r0, r4
}
 8001c32:	b008      	add	sp, #32
 8001c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001c38:	f000 bf34 	b.w	8002aa4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c3c:	40005800 	.word	0x40005800
 8001c40:	2000123c 	.word	0x2000123c
 8001c44:	00702681 	.word	0x00702681
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48000400 	.word	0x48000400

08001c50 <BSP_LED_Init>:
{
 8001c50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001c52:	b948      	cbnz	r0, 8001c68 <BSP_LED_Init+0x18>
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <BSP_LED_Init+0x3c>)
 8001c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c58:	f042 0202 	orr.w	r2, r2, #2
 8001c5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c72:	2100      	movs	r1, #0
 8001c74:	2302      	movs	r3, #2
 8001c76:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <BSP_LED_Init+0x40>)
 8001c7c:	a901      	add	r1, sp, #4
 8001c7e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c82:	f000 facf 	bl	8002224 <HAL_GPIO_Init>
}
 8001c86:	b007      	add	sp, #28
 8001c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	20000000 	.word	0x20000000

08001c94 <BSP_Forno_Init>:
{
 8001c94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  	gpio_init_structure.Pin = GPIO_PIN_0;
 8001c96:	2301      	movs	r3, #1
  	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	e9cd 3301 	strd	r3, r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001c9c:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <BSP_Forno_Init+0x1c>)
  	gpio_init_structure.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001ca0:	a901      	add	r1, sp, #4
  	gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001ca6:	f000 fabd 	bl	8002224 <HAL_GPIO_Init>
}
 8001caa:	b007      	add	sp, #28
 8001cac:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cb0:	48000800 	.word	0x48000800

08001cb4 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <BSP_LED_On+0x10>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc0:	f000 bb94 	b.w	80023ec <HAL_GPIO_WritePin>
 8001cc4:	20000000 	.word	0x20000000

08001cc8 <BSP_Forno_On>:
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <BSP_Forno_On+0xc>)
 8001ccc:	4611      	mov	r1, r2
 8001cce:	f000 bb8d 	b.w	80023ec <HAL_GPIO_WritePin>
 8001cd2:	bf00      	nop
 8001cd4:	48000800 	.word	0x48000800

08001cd8 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <BSP_LED_Off+0x10>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001ce0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce4:	f000 bb82 	b.w	80023ec <HAL_GPIO_WritePin>
 8001ce8:	20000000 	.word	0x20000000

08001cec <BSP_Forno_Off>:
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <BSP_Forno_Off+0xc>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	f000 bb7b 	b.w	80023ec <HAL_GPIO_WritePin>
 8001cf6:	bf00      	nop
 8001cf8:	48000800 	.word	0x48000800

08001cfc <BSP_COM_Init>:
{
 8001cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfe:	460d      	mov	r5, r1
 8001d00:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8001d02:	b9d8      	cbnz	r0, 8001d3c <BSP_COM_Init+0x40>
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <BSP_COM_Init+0x80>)
 8001d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d08:	f042 0202 	orr.w	r2, r2, #2
 8001d0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d10:	f002 0202 	and.w	r2, r2, #2
 8001d14:	9200      	str	r2, [sp, #0]
 8001d16:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8001d18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d1a:	f042 0202 	orr.w	r2, r2, #2
 8001d1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d22:	f002 0202 	and.w	r2, r2, #2
 8001d26:	9201      	str	r2, [sp, #4]
 8001d28:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8001d2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d30:	661a      	str	r2, [r3, #96]	; 0x60
 8001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d38:	9302      	str	r3, [sp, #8]
 8001d3a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001d3c:	4c10      	ldr	r4, [pc, #64]	; (8001d80 <BSP_COM_Init+0x84>)
 8001d3e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d42:	2602      	movs	r6, #2
 8001d44:	2340      	movs	r3, #64	; 0x40
 8001d46:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001d4a:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4c:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001d50:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001d52:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001d54:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001d56:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001d58:	f000 fa64 	bl	8002224 <HAL_GPIO_Init>
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001d5c:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8001d5e:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8001d60:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001d62:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d64:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001d68:	f000 fa5c 	bl	8002224 <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 8001d6c:	6923      	ldr	r3, [r4, #16]
 8001d6e:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 8001d70:	4628      	mov	r0, r5
 8001d72:	f002 fdee 	bl	8004952 <HAL_UART_Init>
}
 8001d76:	b009      	add	sp, #36	; 0x24
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	20000000 	.word	0x20000000

08001d84 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8001d84:	f7ff bf04 	b.w	8001b90 <I2Cx_Init.constprop.0>

08001d88 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d8a:	2301      	movs	r3, #1
{
 8001d8c:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d94:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001d98:	f10d 0217 	add.w	r2, sp, #23
 8001d9c:	9200      	str	r2, [sp, #0]
 8001d9e:	460a      	mov	r2, r1
 8001da0:	4601      	mov	r1, r0
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <SENSOR_IO_Write+0x34>)
 8001da4:	f000 fcc6 	bl	8002734 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001da8:	b120      	cbz	r0, 8001db4 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8001daa:	4804      	ldr	r0, [pc, #16]	; (8001dbc <SENSOR_IO_Write+0x34>)
 8001dac:	f000 fca8 	bl	8002700 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001db0:	f7ff feee 	bl	8001b90 <I2Cx_Init.constprop.0>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8001db4:	b007      	add	sp, #28
 8001db6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dba:	bf00      	nop
 8001dbc:	2000123c 	.word	0x2000123c

08001dc0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001dc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 8001dc2:	2300      	movs	r3, #0
{
 8001dc4:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8001dc6:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001dca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001dd4:	f10d 0117 	add.w	r1, sp, #23
 8001dd8:	9100      	str	r1, [sp, #0]
 8001dda:	4601      	mov	r1, r0
 8001ddc:	4806      	ldr	r0, [pc, #24]	; (8001df8 <SENSOR_IO_Read+0x38>)
 8001dde:	f000 fd83 	bl	80028e8 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001de2:	b120      	cbz	r0, 8001dee <SENSOR_IO_Read+0x2e>
  HAL_I2C_DeInit(i2c_handler);
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <SENSOR_IO_Read+0x38>)
 8001de6:	f000 fc8b 	bl	8002700 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001dea:	f7ff fed1 	bl	8001b90 <I2Cx_Init.constprop.0>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8001dee:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001df2:	b007      	add	sp, #28
 8001df4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001df8:	2000123c 	.word	0x2000123c

08001dfc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001dfe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001e02:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001e06:	9200      	str	r2, [sp, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	460a      	mov	r2, r1
 8001e0c:	4601      	mov	r1, r0
 8001e0e:	4806      	ldr	r0, [pc, #24]	; (8001e28 <SENSOR_IO_ReadMultiple+0x2c>)
 8001e10:	f000 fd6a 	bl	80028e8 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001e14:	4604      	mov	r4, r0
 8001e16:	b120      	cbz	r0, 8001e22 <SENSOR_IO_ReadMultiple+0x26>
  HAL_I2C_DeInit(i2c_handler);
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <SENSOR_IO_ReadMultiple+0x2c>)
 8001e1a:	f000 fc71 	bl	8002700 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001e1e:	f7ff feb7 	bl	8001b90 <I2Cx_Init.constprop.0>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8001e22:	b2a0      	uxth	r0, r4
 8001e24:	b004      	add	sp, #16
 8001e26:	bd10      	pop	{r4, pc}
 8001e28:	2000123c 	.word	0x2000123c

08001e2c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001e2c:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001e2e:	4c06      	ldr	r4, [pc, #24]	; (8001e48 <BSP_TSENSOR_Init+0x1c>)
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <BSP_TSENSOR_Init+0x20>)
 8001e32:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001e34:	f7ff ffa6 	bl	8001d84 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	20be      	movs	r0, #190	; 0xbe
 8001e40:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8001e42:	2000      	movs	r0, #0
 8001e44:	bd10      	pop	{r4, pc}
 8001e46:	bf00      	nop
 8001e48:	20001314 	.word	0x20001314
 8001e4c:	20000014 	.word	0x20000014

08001e50 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <BSP_TSENSOR_ReadTemp+0xc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	20be      	movs	r0, #190	; 0xbe
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4718      	bx	r3
 8001e5a:	bf00      	nop
 8001e5c:	20001314 	.word	0x20001314

08001e60 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001e60:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001e62:	b2c4      	uxtb	r4, r0
 8001e64:	2120      	movs	r1, #32
 8001e66:	4620      	mov	r0, r4
 8001e68:	f7ff ffaa 	bl	8001dc0 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001e6c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e70:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 8001e74:	2120      	movs	r1, #32
 8001e76:	4620      	mov	r0, r4
}
 8001e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e7c:	f7ff bf84 	b.w	8001d88 <SENSOR_IO_Write>

08001e80 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001e80:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001e82:	b2c4      	uxtb	r4, r0
 8001e84:	2120      	movs	r1, #32
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff ff9a 	bl	8001dc0 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001e8c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e90:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 8001e94:	2120      	movs	r1, #32
 8001e96:	4620      	mov	r0, r4
}
 8001e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e9c:	f7ff bf74 	b.w	8001d88 <SENSOR_IO_Write>

08001ea0 <HTS221_H_ReadID>:
{  
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8001ea4:	f7ff ff6e 	bl	8001d84 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001ea8:	b2e0      	uxtb	r0, r4
 8001eaa:	210f      	movs	r1, #15
}
 8001eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001eb0:	f7ff bf86 	b.w	8001dc0 <SENSOR_IO_Read>

08001eb4 <HTS221_H_ReadHumidity>:
{
 8001eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001eb8:	b2c6      	uxtb	r6, r0
 8001eba:	2302      	movs	r3, #2
 8001ebc:	aa01      	add	r2, sp, #4
 8001ebe:	21b0      	movs	r1, #176	; 0xb0
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f7ff ff9b 	bl	8001dfc <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	aa01      	add	r2, sp, #4
 8001eca:	21b6      	movs	r1, #182	; 0xb6
 8001ecc:	4630      	mov	r0, r6
  H0_rh = buffer[0] >> 1;
 8001ece:	f89d 5004 	ldrb.w	r5, [sp, #4]
  H1_rh = buffer[1] >> 1;
 8001ed2:	f89d 4005 	ldrb.w	r4, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001ed6:	f7ff ff91 	bl	8001dfc <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001eda:	2302      	movs	r3, #2
 8001edc:	aa01      	add	r2, sp, #4
 8001ede:	21ba      	movs	r1, #186	; 0xba
 8001ee0:	4630      	mov	r0, r6
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001ee2:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001ee6:	f7ff ff89 	bl	8001dfc <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001eea:	2302      	movs	r3, #2
 8001eec:	aa01      	add	r2, sp, #4
 8001eee:	21a8      	movs	r1, #168	; 0xa8
 8001ef0:	4630      	mov	r0, r6
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001ef2:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001ef6:	f7ff ff81 	bl	8001dfc <SENSOR_IO_ReadMultiple>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001efa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001efe:	eba3 0308 	sub.w	r3, r3, r8
 8001f02:	ee07 3a10 	vmov	s14, r3
  H0_rh = buffer[0] >> 1;
 8001f06:	086d      	lsrs	r5, r5, #1
  H1_rh = buffer[1] >> 1;
 8001f08:	0864      	lsrs	r4, r4, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001f0a:	1b63      	subs	r3, r4, r5
 8001f0c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001f10:	ee07 3a10 	vmov	s14, r3
 8001f14:	eba7 0708 	sub.w	r7, r7, r8
 8001f18:	ee07 7a90 	vmov	s15, r7
 8001f1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f20:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001f24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2c:	ee07 5a10 	vmov	s14, r5
 8001f30:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
        : ( tmp_f <    0.0f ) ?    0.0f
 8001f34:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001f6c <HTS221_H_ReadHumidity+0xb8>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001f38:	ee77 7a80 	vadd.f32	s15, s15, s0
  tmp_f *= 10.0f;
 8001f3c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001f40:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8001f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4c:	dc07      	bgt.n	8001f5e <HTS221_H_ReadHumidity+0xaa>
        : tmp_f;
 8001f4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d504      	bpl.n	8001f62 <HTS221_H_ReadHumidity+0xae>
 8001f58:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001f70 <HTS221_H_ReadHumidity+0xbc>
 8001f5c:	e001      	b.n	8001f62 <HTS221_H_ReadHumidity+0xae>
        : ( tmp_f <    0.0f ) ?    0.0f
 8001f5e:	eef0 7a47 	vmov.f32	s15, s14
}
 8001f62:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001f66:	b002      	add	sp, #8
 8001f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f6c:	447a0000 	.word	0x447a0000
 8001f70:	00000000 	.word	0x00000000

08001f74 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001f74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001f78:	b2c6      	uxtb	r6, r0
 8001f7a:	aa01      	add	r2, sp, #4
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	21b2      	movs	r1, #178	; 0xb2
 8001f80:	4630      	mov	r0, r6
 8001f82:	f7ff ff3b 	bl	8001dfc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001f86:	2135      	movs	r1, #53	; 0x35
 8001f88:	4630      	mov	r0, r6
 8001f8a:	f7ff ff19 	bl	8001dc0 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f8e:	0205      	lsls	r5, r0, #8
 8001f90:	f405 7340 	and.w	r3, r5, #768	; 0x300
 8001f94:	f89d 5004 	ldrb.w	r5, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f98:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001f9c:	0180      	lsls	r0, r0, #6
  T0_degC = T0_degC_x8_u16 >> 3;
 8001f9e:	431d      	orrs	r5, r3
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001fa0:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T1_degC = T1_degC_x8_u16 >> 3;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8001faa:	4304      	orrs	r4, r0
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001fac:	21bc      	movs	r1, #188	; 0xbc
 8001fae:	4630      	mov	r0, r6
 8001fb0:	f7ff ff24 	bl	8001dfc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	aa01      	add	r2, sp, #4
 8001fb8:	21aa      	movs	r1, #170	; 0xaa
 8001fba:	4630      	mov	r0, r6
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001fbc:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001fc0:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001fc4:	f7ff ff1a 	bl	8001dfc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001fc8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001fcc:	eba3 0308 	sub.w	r3, r3, r8
 8001fd0:	ee07 3a90 	vmov	s15, r3
  T0_degC = T0_degC_x8_u16 >> 3;
 8001fd4:	08ed      	lsrs	r5, r5, #3
  T1_degC = T1_degC_x8_u16 >> 3;
 8001fd6:	08e4      	lsrs	r4, r4, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001fd8:	1b64      	subs	r4, r4, r5
 8001fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fde:	ee07 4a90 	vmov	s15, r4
 8001fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe6:	eba7 0708 	sub.w	r7, r7, r8
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	ee07 7a10 	vmov	s14, r7
 8001ff2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ff6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ffa:	ee07 5a90 	vmov	s15, r5
 8001ffe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8002002:	ee36 0a80 	vadd.f32	s0, s13, s0
 8002006:	b002      	add	sp, #8
 8002008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800200c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <SystemInit+0x40>)
 800200e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002012:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <SystemInit+0x44>)
 800201c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800201e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002026:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800202e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002032:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002038:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002040:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002042:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002044:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002048:	608b      	str	r3, [r1, #8]
#endif
}
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002054:	4770      	bx	lr
	...

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800205a:	4e0f      	ldr	r6, [pc, #60]	; (8002098 <HAL_InitTick+0x40>)
{
 800205c:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800205e:	7830      	ldrb	r0, [r6, #0]
 8002060:	b908      	cbnz	r0, 8002066 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002062:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002064:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002066:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_InitTick+0x44>)
 8002068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800206c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002070:	6810      	ldr	r0, [r2, #0]
 8002072:	fbb0 f0f3 	udiv	r0, r0, r3
 8002076:	f000 f89b 	bl	80021b0 <HAL_SYSTICK_Config>
 800207a:	4604      	mov	r4, r0
 800207c:	2800      	cmp	r0, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002080:	2d0f      	cmp	r5, #15
 8002082:	d8ee      	bhi.n	8002062 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	4602      	mov	r2, r0
 8002086:	4629      	mov	r1, r5
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 f850 	bl	8002130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002090:	6075      	str	r5, [r6, #4]
 8002092:	4620      	mov	r0, r4
 8002094:	e7e6      	b.n	8002064 <HAL_InitTick+0xc>
 8002096:	bf00      	nop
 8002098:	20000034 	.word	0x20000034
 800209c:	20000030 	.word	0x20000030

080020a0 <HAL_Init>:
{
 80020a0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a2:	2003      	movs	r0, #3
 80020a4:	f000 f832 	bl	800210c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020a8:	200f      	movs	r0, #15
 80020aa:	f7ff ffd5 	bl	8002058 <HAL_InitTick>
 80020ae:	4604      	mov	r4, r0
 80020b0:	b918      	cbnz	r0, 80020ba <HAL_Init+0x1a>
    HAL_MspInit();
 80020b2:	f7ff ffcf 	bl	8002054 <HAL_MspInit>
}
 80020b6:	4620      	mov	r0, r4
 80020b8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80020ba:	2401      	movs	r4, #1
 80020bc:	e7fb      	b.n	80020b6 <HAL_Init+0x16>
	...

080020c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80020c0:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <HAL_IncTick+0x10>)
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_IncTick+0x14>)
 80020c4:	6811      	ldr	r1, [r2, #0]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	440b      	add	r3, r1
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20001318 	.word	0x20001318
 80020d4:	20000034 	.word	0x20000034

080020d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80020d8:	4b01      	ldr	r3, [pc, #4]	; (80020e0 <HAL_GetTick+0x8>)
 80020da:	6818      	ldr	r0, [r3, #0]
}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20001318 	.word	0x20001318

080020e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e4:	b538      	push	{r3, r4, r5, lr}
 80020e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff fff6 	bl	80020d8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ec:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 80020ee:	bf1c      	itt	ne
 80020f0:	4b05      	ldrne	r3, [pc, #20]	; (8002108 <HAL_Delay+0x24>)
 80020f2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 80020f6:	bf18      	it	ne
 80020f8:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fa:	f7ff ffed 	bl	80020d8 <HAL_GetTick>
 80020fe:	1b43      	subs	r3, r0, r5
 8002100:	42a3      	cmp	r3, r4
 8002102:	d3fa      	bcc.n	80020fa <HAL_Delay+0x16>
  {
  }
}
 8002104:	bd38      	pop	{r3, r4, r5, pc}
 8002106:	bf00      	nop
 8002108:	20000034 	.word	0x20000034

0800210c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800210e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002110:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002128:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002132:	b530      	push	{r4, r5, lr}
 8002134:	68dc      	ldr	r4, [r3, #12]
 8002136:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	2d04      	cmp	r5, #4
 8002142:	bf28      	it	cs
 8002144:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002146:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214c:	bf8c      	ite	hi
 800214e:	3c03      	subhi	r4, #3
 8002150:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002152:	fa03 f505 	lsl.w	r5, r3, r5
 8002156:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215a:	40a3      	lsls	r3, r4
 800215c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002162:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	bfac      	ite	ge
 800216a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	4a08      	ldrlt	r2, [pc, #32]	; (8002190 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	bfb8      	it	lt
 8002176:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	b2db      	uxtb	r3, r3
 800217c:	bfaa      	itet	ge
 800217e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002188:	bd30      	pop	{r4, r5, pc}
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00
 8002190:	e000ed14 	.word	0xe000ed14

08002194 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002194:	2800      	cmp	r0, #0
 8002196:	db08      	blt.n	80021aa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002198:	2301      	movs	r3, #1
 800219a:	0942      	lsrs	r2, r0, #5
 800219c:	f000 001f 	and.w	r0, r0, #31
 80021a0:	fa03 f000 	lsl.w	r0, r3, r0
 80021a4:	4b01      	ldr	r3, [pc, #4]	; (80021ac <HAL_NVIC_EnableIRQ+0x18>)
 80021a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100

080021b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b0:	3801      	subs	r0, #1
 80021b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80021b6:	d20b      	bcs.n	80021d0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021be:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	21f0      	movs	r1, #240	; 0xf0
 80021c2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ca:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021cc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ce:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80021d0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021d8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021da:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80021de:	2a02      	cmp	r2, #2
 80021e0:	d003      	beq.n	80021ea <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e2:	2204      	movs	r2, #4
 80021e4:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80021e6:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80021e8:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ea:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 80021ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ee:	6811      	ldr	r1, [r2, #0]
 80021f0:	f021 010e 	bic.w	r1, r1, #14
 80021f4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80021f6:	6811      	ldr	r1, [r2, #0]
 80021f8:	f021 0101 	bic.w	r1, r1, #1
 80021fc:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021fe:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8002202:	2101      	movs	r1, #1
 8002204:	f002 021c 	and.w	r2, r2, #28
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800220e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002210:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002214:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8002218:	b113      	cbz	r3, 8002220 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 800221a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800221c:	4620      	mov	r0, r4
 800221e:	e7e3      	b.n	80021e8 <HAL_DMA_Abort_IT+0x10>
 8002220:	4618      	mov	r0, r3
 8002222:	e7e1      	b.n	80021e8 <HAL_DMA_Abort_IT+0x10>

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002228:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80023dc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800222c:	4c69      	ldr	r4, [pc, #420]	; (80023d4 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 800222e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002230:	680a      	ldr	r2, [r1, #0]
 8002232:	fa32 f503 	lsrs.w	r5, r2, r3
 8002236:	d102      	bne.n	800223e <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002238:	b003      	add	sp, #12
 800223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800223e:	f04f 0e01 	mov.w	lr, #1
 8002242:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8002246:	ea1e 0202 	ands.w	r2, lr, r2
 800224a:	f000 8090 	beq.w	800236e <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800224e:	684d      	ldr	r5, [r1, #4]
 8002250:	f005 0603 	and.w	r6, r5, #3
 8002254:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002258:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800225c:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800225e:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002262:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002264:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002268:	f200 8083 	bhi.w	8002372 <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 800226c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800226e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002272:	68cf      	ldr	r7, [r1, #12]
 8002274:	fa07 f708 	lsl.w	r7, r7, r8
 8002278:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800227c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800227e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002280:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002288:	409f      	lsls	r7, r3
 800228a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800228e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002290:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002292:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002296:	688f      	ldr	r7, [r1, #8]
 8002298:	fa07 f708 	lsl.w	r7, r7, r8
 800229c:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a0:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 80022a2:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	d071      	beq.n	800238a <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 80022a6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022a8:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022ac:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b0:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022b2:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80022b6:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022b8:	d059      	beq.n	800236e <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80022be:	f046 0601 	orr.w	r6, r6, #1
 80022c2:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80022c6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80022ca:	f023 0703 	bic.w	r7, r3, #3
 80022ce:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80022d2:	f006 0601 	and.w	r6, r6, #1
 80022d6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80022da:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022dc:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e0:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80022e2:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80022e8:	f04f 0c0f 	mov.w	ip, #15
 80022ec:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022f4:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f8:	d05f      	beq.n	80023ba <HAL_GPIO_Init+0x196>
 80022fa:	4e37      	ldr	r6, [pc, #220]	; (80023d8 <HAL_GPIO_Init+0x1b4>)
 80022fc:	42b0      	cmp	r0, r6
 80022fe:	d05e      	beq.n	80023be <HAL_GPIO_Init+0x19a>
 8002300:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002304:	42b0      	cmp	r0, r6
 8002306:	d05c      	beq.n	80023c2 <HAL_GPIO_Init+0x19e>
 8002308:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800230c:	42b0      	cmp	r0, r6
 800230e:	d05a      	beq.n	80023c6 <HAL_GPIO_Init+0x1a2>
 8002310:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002314:	42b0      	cmp	r0, r6
 8002316:	d058      	beq.n	80023ca <HAL_GPIO_Init+0x1a6>
 8002318:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800231c:	42b0      	cmp	r0, r6
 800231e:	d056      	beq.n	80023ce <HAL_GPIO_Init+0x1aa>
 8002320:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002324:	42b0      	cmp	r0, r6
 8002326:	bf0c      	ite	eq
 8002328:	2606      	moveq	r6, #6
 800232a:	2607      	movne	r6, #7
 800232c:	fa06 f60e 	lsl.w	r6, r6, lr
 8002330:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002334:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8002336:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8002338:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800233a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800233e:	bf0c      	ite	eq
 8002340:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002342:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8002344:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8002346:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002348:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800234c:	bf0c      	ite	eq
 800234e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002350:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8002352:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8002354:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002356:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 800235a:	bf0c      	ite	eq
 800235c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800235e:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8002360:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8002362:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002364:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8002366:	bf54      	ite	pl
 8002368:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800236a:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 800236c:	6026      	str	r6, [r4, #0]
    position++;
 800236e:	3301      	adds	r3, #1
 8002370:	e75e      	b.n	8002230 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002372:	2e03      	cmp	r6, #3
 8002374:	d18c      	bne.n	8002290 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8002376:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002378:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800237c:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8002380:	409f      	lsls	r7, r3
 8002382:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8002386:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002388:	e78d      	b.n	80022a6 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 800238a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800238e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002392:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002396:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800239a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800239e:	f04f 0e0f 	mov.w	lr, #15
 80023a2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80023a6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023aa:	690f      	ldr	r7, [r1, #16]
 80023ac:	fa07 f70b 	lsl.w	r7, r7, fp
 80023b0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80023b4:	f8ca 7020 	str.w	r7, [sl, #32]
 80023b8:	e775      	b.n	80022a6 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023ba:	2600      	movs	r6, #0
 80023bc:	e7b6      	b.n	800232c <HAL_GPIO_Init+0x108>
 80023be:	2601      	movs	r6, #1
 80023c0:	e7b4      	b.n	800232c <HAL_GPIO_Init+0x108>
 80023c2:	2602      	movs	r6, #2
 80023c4:	e7b2      	b.n	800232c <HAL_GPIO_Init+0x108>
 80023c6:	2603      	movs	r6, #3
 80023c8:	e7b0      	b.n	800232c <HAL_GPIO_Init+0x108>
 80023ca:	2604      	movs	r6, #4
 80023cc:	e7ae      	b.n	800232c <HAL_GPIO_Init+0x108>
 80023ce:	2605      	movs	r6, #5
 80023d0:	e7ac      	b.n	800232c <HAL_GPIO_Init+0x108>
 80023d2:	bf00      	nop
 80023d4:	40010400 	.word	0x40010400
 80023d8:	48000400 	.word	0x48000400
 80023dc:	40021000 	.word	0x40021000

080023e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023e0:	6903      	ldr	r3, [r0, #16]
 80023e2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80023e4:	bf14      	ite	ne
 80023e6:	2001      	movne	r0, #1
 80023e8:	2000      	moveq	r0, #0
 80023ea:	4770      	bx	lr

080023ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ec:	b10a      	cbz	r2, 80023f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ee:	6181      	str	r1, [r0, #24]
 80023f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023f2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80023fa:	6951      	ldr	r1, [r2, #20]
 80023fc:	4201      	tst	r1, r0
{
 80023fe:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002400:	d002      	beq.n	8002408 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002402:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002404:	f7fe fb2a 	bl	8000a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002408:	bd08      	pop	{r3, pc}
 800240a:	bf00      	nop
 800240c:	40010400 	.word	0x40010400

08002410 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002410:	6803      	ldr	r3, [r0, #0]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8002416:	bf44      	itt	mi
 8002418:	2200      	movmi	r2, #0
 800241a:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002420:	bf5e      	ittt	pl
 8002422:	699a      	ldrpl	r2, [r3, #24]
 8002424:	f042 0201 	orrpl.w	r2, r2, #1
 8002428:	619a      	strpl	r2, [r3, #24]
  }
}
 800242a:	4770      	bx	lr

0800242c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800242c:	b530      	push	{r4, r5, lr}
 800242e:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002430:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002432:	432b      	orrs	r3, r5
 8002434:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <I2C_TransferConfig+0x28>)
 800243a:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800243c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002440:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002442:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800244a:	ea20 0002 	bic.w	r0, r0, r2
 800244e:	4303      	orrs	r3, r0
 8002450:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002452:	bd30      	pop	{r4, r5, pc}
 8002454:	03ff63ff 	.word	0x03ff63ff

08002458 <I2C_IsErrorOccurred>:
{
 8002458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800245c:	6803      	ldr	r3, [r0, #0]
 800245e:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002460:	f014 0410 	ands.w	r4, r4, #16
{
 8002464:	4605      	mov	r5, r0
 8002466:	4688      	mov	r8, r1
 8002468:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800246a:	d079      	beq.n	8002560 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800246c:	2210      	movs	r2, #16
 800246e:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002470:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8002472:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002476:	682b      	ldr	r3, [r5, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	0694      	lsls	r4, r2, #26
 800247c:	d436      	bmi.n	80024ec <I2C_IsErrorOccurred+0x94>
 800247e:	b10e      	cbz	r6, 8002484 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8002480:	2404      	movs	r4, #4
 8002482:	e039      	b.n	80024f8 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8002484:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002488:	d0f6      	beq.n	8002478 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7ff fe25 	bl	80020d8 <HAL_GetTick>
 800248e:	1bc0      	subs	r0, r0, r7
 8002490:	4540      	cmp	r0, r8
 8002492:	d802      	bhi.n	800249a <I2C_IsErrorOccurred+0x42>
 8002494:	f1b8 0f00 	cmp.w	r8, #0
 8002498:	d1ed      	bne.n	8002476 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800249a:	682b      	ldr	r3, [r5, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800249e:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024a2:	6998      	ldr	r0, [r3, #24]
 80024a4:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 80024a6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024a8:	d50a      	bpl.n	80024c0 <I2C_IsErrorOccurred+0x68>
 80024aa:	0449      	lsls	r1, r1, #17
 80024ac:	d408      	bmi.n	80024c0 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 80024ae:	2a20      	cmp	r2, #32
 80024b0:	d006      	beq.n	80024c0 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024b8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80024ba:	f7ff fe0d 	bl	80020d8 <HAL_GetTick>
 80024be:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c0:	682b      	ldr	r3, [r5, #0]
 80024c2:	699c      	ldr	r4, [r3, #24]
 80024c4:	f014 0420 	ands.w	r4, r4, #32
 80024c8:	d1d5      	bne.n	8002476 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024ca:	f7ff fe05 	bl	80020d8 <HAL_GetTick>
 80024ce:	1bc0      	subs	r0, r0, r7
 80024d0:	2819      	cmp	r0, #25
 80024d2:	d9f5      	bls.n	80024c0 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 80024d6:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024da:	f043 0320 	orr.w	r3, r3, #32
 80024de:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 80024e0:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 80024ea:	e7e9      	b.n	80024c0 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 80024ec:	2e00      	cmp	r6, #0
 80024ee:	d1c7      	bne.n	8002480 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f0:	2220      	movs	r2, #32
 80024f2:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80024f4:	2404      	movs	r4, #4
    status = HAL_ERROR;
 80024f6:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 80024f8:	682b      	ldr	r3, [r5, #0]
 80024fa:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024fc:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024fe:	bf41      	itttt	mi
 8002500:	f44f 7180 	movmi.w	r1, #256	; 0x100
 8002504:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002506:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 800250a:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800250c:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800250e:	bf41      	itttt	mi
 8002510:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8002514:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002518:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 800251a:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800251c:	0592      	lsls	r2, r2, #22
 800251e:	d521      	bpl.n	8002564 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002520:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002524:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002528:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800252a:	4628      	mov	r0, r5
 800252c:	f7ff ff70 	bl	8002410 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002530:	682a      	ldr	r2, [r5, #0]
 8002532:	6853      	ldr	r3, [r2, #4]
 8002534:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002538:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800253c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002546:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002548:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800254a:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800254c:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800254e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	2300      	movs	r3, #0
 8002554:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002558:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800255c:	2601      	movs	r6, #1
 800255e:	e003      	b.n	8002568 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8002560:	4626      	mov	r6, r4
 8002562:	e7c9      	b.n	80024f8 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8002564:	2e00      	cmp	r6, #0
 8002566:	d1e0      	bne.n	800252a <I2C_IsErrorOccurred+0xd2>
}
 8002568:	4630      	mov	r0, r6
 800256a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800256e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800256e:	b570      	push	{r4, r5, r6, lr}
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
 8002574:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	079b      	lsls	r3, r3, #30
 800257c:	d501      	bpl.n	8002582 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800257e:	2000      	movs	r0, #0
}
 8002580:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002582:	4632      	mov	r2, r6
 8002584:	4629      	mov	r1, r5
 8002586:	4620      	mov	r0, r4
 8002588:	f7ff ff66 	bl	8002458 <I2C_IsErrorOccurred>
 800258c:	b9a0      	cbnz	r0, 80025b8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800258e:	1c6a      	adds	r2, r5, #1
 8002590:	d0f1      	beq.n	8002576 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002592:	f7ff fda1 	bl	80020d8 <HAL_GetTick>
 8002596:	1b80      	subs	r0, r0, r6
 8002598:	42a8      	cmp	r0, r5
 800259a:	d801      	bhi.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800259c:	2d00      	cmp	r5, #0
 800259e:	d1ea      	bne.n	8002576 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025a2:	f043 0320 	orr.w	r3, r3, #32
 80025a6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	2320      	movs	r3, #32
 80025aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80025b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80025b8:	2001      	movs	r0, #1
 80025ba:	e7e1      	b.n	8002580 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080025bc <I2C_WaitOnFlagUntilTimeout>:
{
 80025bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c0:	9f06      	ldr	r7, [sp, #24]
 80025c2:	4604      	mov	r4, r0
 80025c4:	4688      	mov	r8, r1
 80025c6:	4616      	mov	r6, r2
 80025c8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	6993      	ldr	r3, [r2, #24]
 80025ce:	ea38 0303 	bics.w	r3, r8, r3
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	42b3      	cmp	r3, r6
 80025da:	d001      	beq.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80025dc:	2000      	movs	r0, #0
 80025de:	e015      	b.n	800260c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80025e0:	1c6b      	adds	r3, r5, #1
 80025e2:	d0f3      	beq.n	80025cc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e4:	f7ff fd78 	bl	80020d8 <HAL_GetTick>
 80025e8:	1bc0      	subs	r0, r0, r7
 80025ea:	42a8      	cmp	r0, r5
 80025ec:	d801      	bhi.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x36>
 80025ee:	2d00      	cmp	r5, #0
 80025f0:	d1eb      	bne.n	80025ca <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025f4:	f043 0320 	orr.w	r3, r3, #32
 80025f8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	2320      	movs	r3, #32
 80025fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002600:	2300      	movs	r3, #0
 8002602:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002606:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800260a:	2001      	movs	r0, #1
}
 800260c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002610 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	4604      	mov	r4, r0
 8002614:	460d      	mov	r5, r1
 8002616:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	069b      	lsls	r3, r3, #26
 800261e:	d501      	bpl.n	8002624 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002620:	2000      	movs	r0, #0
}
 8002622:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002624:	4632      	mov	r2, r6
 8002626:	4629      	mov	r1, r5
 8002628:	4620      	mov	r0, r4
 800262a:	f7ff ff15 	bl	8002458 <I2C_IsErrorOccurred>
 800262e:	b990      	cbnz	r0, 8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002630:	f7ff fd52 	bl	80020d8 <HAL_GetTick>
 8002634:	1b80      	subs	r0, r0, r6
 8002636:	42a8      	cmp	r0, r5
 8002638:	d801      	bhi.n	800263e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800263a:	2d00      	cmp	r5, #0
 800263c:	d1ec      	bne.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800263e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002640:	f043 0320 	orr.w	r3, r3, #32
 8002644:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002646:	2320      	movs	r3, #32
 8002648:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	2300      	movs	r3, #0
 800264e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002652:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
 8002658:	e7e3      	b.n	8002622 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800265a <HAL_I2C_MspInit>:
}
 800265a:	4770      	bx	lr

0800265c <HAL_I2C_Init>:
{
 800265c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800265e:	4604      	mov	r4, r0
 8002660:	2800      	cmp	r0, #0
 8002662:	d04a      	beq.n	80026fa <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002664:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002668:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800266c:	b91b      	cbnz	r3, 8002676 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800266e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002672:	f7ff fff2 	bl	800265a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002676:	2324      	movs	r3, #36	; 0x24
 8002678:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002686:	6862      	ldr	r2, [r4, #4]
 8002688:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800268c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002694:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002696:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800269a:	2901      	cmp	r1, #1
 800269c:	d124      	bne.n	80026e8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800269e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a2:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80026aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ae:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026b8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80026bc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026be:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026c4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026c6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026da:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80026e6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026e8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026ec:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ee:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026f0:	bf04      	itt	eq
 80026f2:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80026f6:	605a      	streq	r2, [r3, #4]
 80026f8:	e7d4      	b.n	80026a4 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80026fa:	2001      	movs	r0, #1
 80026fc:	e7f3      	b.n	80026e6 <HAL_I2C_Init+0x8a>

080026fe <HAL_I2C_MspDeInit>:
 80026fe:	4770      	bx	lr

08002700 <HAL_I2C_DeInit>:
{
 8002700:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002702:	4604      	mov	r4, r0
 8002704:	b198      	cbz	r0, 800272e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8002706:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002708:	2324      	movs	r3, #36	; 0x24
 800270a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002716:	f7ff fff2 	bl	80026fe <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800271a:	2000      	movs	r0, #0
 800271c:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800271e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8002722:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002726:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800272c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800272e:	2001      	movs	r0, #1
 8002730:	e7fc      	b.n	800272c <HAL_I2C_DeInit+0x2c>
	...

08002734 <HAL_I2C_Mem_Write>:
{
 8002734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002738:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800273a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800273e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002742:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002746:	2b20      	cmp	r3, #32
{
 8002748:	4604      	mov	r4, r0
 800274a:	460f      	mov	r7, r1
 800274c:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	f040 80c6 	bne.w	80028de <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8002752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002754:	b113      	cbz	r3, 800275c <HAL_I2C_Mem_Write+0x28>
 8002756:	f1ba 0f00 	cmp.w	sl, #0
 800275a:	d106      	bne.n	800276a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800275c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002760:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002762:	2001      	movs	r0, #1
}
 8002764:	b003      	add	sp, #12
 8002766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800276a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800276e:	2b01      	cmp	r3, #1
 8002770:	f000 80b5 	beq.w	80028de <HAL_I2C_Mem_Write+0x1aa>
 8002774:	f04f 0b01 	mov.w	fp, #1
 8002778:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800277c:	f7ff fcac 	bl	80020d8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002780:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002782:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002784:	9000      	str	r0, [sp, #0]
 8002786:	465a      	mov	r2, fp
 8002788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff ff15 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 8002792:	2800      	cmp	r0, #0
 8002794:	d1e5      	bne.n	8002762 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002796:	2321      	movs	r3, #33	; 0x21
 8002798:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800279c:	2340      	movs	r3, #64	; 0x40
 800279e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80027a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027a4:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027a6:	4b4f      	ldr	r3, [pc, #316]	; (80028e4 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 80027aa:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	fa5f f289 	uxtb.w	r2, r9
 80027b2:	4639      	mov	r1, r7
 80027b4:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 80027b6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027be:	f7ff fe35 	bl	800242c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c2:	462a      	mov	r2, r5
 80027c4:	4641      	mov	r1, r8
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7ff fed1 	bl	800256e <I2C_WaitOnTXISFlagUntilTimeout>
 80027cc:	bb18      	cbnz	r0, 8002816 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ce:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027d4:	d115      	bne.n	8002802 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d6:	b2f6      	uxtb	r6, r6
 80027d8:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027da:	2200      	movs	r2, #0
 80027dc:	9500      	str	r5, [sp, #0]
 80027de:	4643      	mov	r3, r8
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff feea 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 80027e8:	b9a8      	cbnz	r0, 8002816 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2bff      	cmp	r3, #255	; 0xff
 80027f0:	d815      	bhi.n	800281e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80027f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027f4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80027f6:	b292      	uxth	r2, r2
 80027f8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	e012      	b.n	8002828 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002802:	0a32      	lsrs	r2, r6, #8
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002806:	4641      	mov	r1, r8
 8002808:	462a      	mov	r2, r5
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff feaf 	bl	800256e <I2C_WaitOnTXISFlagUntilTimeout>
 8002810:	b908      	cbnz	r0, 8002816 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	e7df      	b.n	80027d6 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800281c:	e7a1      	b.n	8002762 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800281e:	22ff      	movs	r2, #255	; 0xff
 8002820:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002822:	9000      	str	r0, [sp, #0]
 8002824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002828:	4639      	mov	r1, r7
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff fdfe 	bl	800242c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002830:	462a      	mov	r2, r5
 8002832:	4641      	mov	r1, r8
 8002834:	4620      	mov	r0, r4
 8002836:	f7ff fe9a 	bl	800256e <I2C_WaitOnTXISFlagUntilTimeout>
 800283a:	2800      	cmp	r0, #0
 800283c:	d191      	bne.n	8002762 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800283e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002846:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002848:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800284a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800284c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800284e:	3b01      	subs	r3, #1
 8002850:	b29b      	uxth	r3, r3
 8002852:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002854:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002856:	3a01      	subs	r2, #1
 8002858:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800285a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800285c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800285e:	b1b3      	cbz	r3, 800288e <HAL_I2C_Mem_Write+0x15a>
 8002860:	b9aa      	cbnz	r2, 800288e <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002862:	9500      	str	r5, [sp, #0]
 8002864:	4643      	mov	r3, r8
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff fea7 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 800286e:	2800      	cmp	r0, #0
 8002870:	f47f af77 	bne.w	8002762 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2bff      	cmp	r3, #255	; 0xff
 800287a:	d928      	bls.n	80028ce <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800287c:	22ff      	movs	r2, #255	; 0xff
 800287e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002880:	9000      	str	r0, [sp, #0]
 8002882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002886:	4639      	mov	r1, r7
 8002888:	4620      	mov	r0, r4
 800288a:	f7ff fdcf 	bl	800242c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800288e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1cc      	bne.n	8002830 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002896:	462a      	mov	r2, r5
 8002898:	4641      	mov	r1, r8
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff feb8 	bl	8002610 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	f47f af5e 	bne.w	8002762 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	2120      	movs	r1, #32
 80028aa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80028b2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80028b6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80028c4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028c8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80028cc:	e74a      	b.n	8002764 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80028ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028d0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80028d2:	b292      	uxth	r2, r2
 80028d4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	e7d3      	b.n	8002886 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 80028de:	2002      	movs	r0, #2
 80028e0:	e740      	b.n	8002764 <HAL_I2C_Mem_Write+0x30>
 80028e2:	bf00      	nop
 80028e4:	80002000 	.word	0x80002000

080028e8 <HAL_I2C_Mem_Read>:
{
 80028e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ec:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80028f2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80028f6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fa:	2b20      	cmp	r3, #32
{
 80028fc:	4604      	mov	r4, r0
 80028fe:	460f      	mov	r7, r1
 8002900:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002902:	f040 80c9 	bne.w	8002a98 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8002906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002908:	b113      	cbz	r3, 8002910 <HAL_I2C_Mem_Read+0x28>
 800290a:	f1ba 0f00 	cmp.w	sl, #0
 800290e:	d106      	bne.n	800291e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002914:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002916:	2001      	movs	r0, #1
}
 8002918:	b003      	add	sp, #12
 800291a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800291e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002922:	2b01      	cmp	r3, #1
 8002924:	f000 80b8 	beq.w	8002a98 <HAL_I2C_Mem_Read+0x1b0>
 8002928:	f04f 0b01 	mov.w	fp, #1
 800292c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002930:	f7ff fbd2 	bl	80020d8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002934:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002936:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002938:	9000      	str	r0, [sp, #0]
 800293a:	465a      	mov	r2, fp
 800293c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002940:	4620      	mov	r0, r4
 8002942:	f7ff fe3b 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 8002946:	2800      	cmp	r0, #0
 8002948:	d1e5      	bne.n	8002916 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800294a:	2322      	movs	r3, #34	; 0x22
 800294c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002950:	2340      	movs	r3, #64	; 0x40
 8002952:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002958:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800295a:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 800295e:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	fa5f f289 	uxtb.w	r2, r9
 8002966:	4603      	mov	r3, r0
 8002968:	4639      	mov	r1, r7
 800296a:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 800296c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002970:	f7ff fd5c 	bl	800242c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002974:	462a      	mov	r2, r5
 8002976:	4641      	mov	r1, r8
 8002978:	4620      	mov	r0, r4
 800297a:	f7ff fdf8 	bl	800256e <I2C_WaitOnTXISFlagUntilTimeout>
 800297e:	bb20      	cbnz	r0, 80029ca <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002980:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002984:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002986:	d116      	bne.n	80029b6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002988:	b2f6      	uxtb	r6, r6
 800298a:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800298c:	2200      	movs	r2, #0
 800298e:	9500      	str	r5, [sp, #0]
 8002990:	4643      	mov	r3, r8
 8002992:	2140      	movs	r1, #64	; 0x40
 8002994:	4620      	mov	r0, r4
 8002996:	f7ff fe11 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 800299a:	b9b0      	cbnz	r0, 80029ca <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800299c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2bff      	cmp	r3, #255	; 0xff
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_I2C_Mem_Read+0x1b8>)
 80029a4:	d815      	bhi.n	80029d2 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80029a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029a8:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80029aa:	b292      	uxth	r2, r2
 80029ac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	e012      	b.n	80029dc <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029b6:	0a32      	lsrs	r2, r6, #8
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ba:	4641      	mov	r1, r8
 80029bc:	462a      	mov	r2, r5
 80029be:	4620      	mov	r0, r4
 80029c0:	f7ff fdd5 	bl	800256e <I2C_WaitOnTXISFlagUntilTimeout>
 80029c4:	b908      	cbnz	r0, 80029ca <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	e7de      	b.n	8002988 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80029ca:	2300      	movs	r3, #0
 80029cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80029d0:	e7a1      	b.n	8002916 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029d4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029dc:	4639      	mov	r1, r7
 80029de:	4620      	mov	r0, r4
 80029e0:	f7ff fd24 	bl	800242c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029e4:	9500      	str	r5, [sp, #0]
 80029e6:	4643      	mov	r3, r8
 80029e8:	2200      	movs	r2, #0
 80029ea:	2104      	movs	r1, #4
 80029ec:	4620      	mov	r0, r4
 80029ee:	f7ff fde5 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 80029f2:	2800      	cmp	r0, #0
 80029f4:	d18f      	bne.n	8002916 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029fc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80029fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002a00:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002a02:	3301      	adds	r3, #1
 8002a04:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002a06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002a10:	3a01      	subs	r2, #1
 8002a12:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a14:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002a16:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a18:	b1b3      	cbz	r3, 8002a48 <HAL_I2C_Mem_Read+0x160>
 8002a1a:	b9aa      	cbnz	r2, 8002a48 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a1c:	9500      	str	r5, [sp, #0]
 8002a1e:	4643      	mov	r3, r8
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff fdca 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	f47f af74 	bne.w	8002916 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2bff      	cmp	r3, #255	; 0xff
 8002a34:	d928      	bls.n	8002a88 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a3a:	9000      	str	r0, [sp, #0]
 8002a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a40:	4639      	mov	r1, r7
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7ff fcf2 	bl	800242c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002a48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1c9      	bne.n	80029e4 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a50:	462a      	mov	r2, r5
 8002a52:	4641      	mov	r1, r8
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7ff fddb 	bl	8002610 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	f47f af5b 	bne.w	8002916 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	2120      	movs	r1, #32
 8002a64:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002a6c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002a70:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002a7e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a82:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002a86:	e747      	b.n	8002918 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8002a88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a8a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002a8c:	b292      	uxth	r2, r2
 8002a8e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	e7d3      	b.n	8002a40 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8002a98:	2002      	movs	r0, #2
 8002a9a:	e73d      	b.n	8002918 <HAL_I2C_Mem_Read+0x30>
 8002a9c:	80002000 	.word	0x80002000
 8002aa0:	80002400 	.word	0x80002400

08002aa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aa4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	b2dc      	uxtb	r4, r3
 8002aae:	d11d      	bne.n	8002aec <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d019      	beq.n	8002aec <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab8:	2324      	movs	r3, #36	; 0x24
 8002aba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002abe:	6803      	ldr	r3, [r0, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ace:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ade:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ae4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002ae8:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002aea:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002aec:	2002      	movs	r0, #2
 8002aee:	e7fc      	b.n	8002aea <HAL_I2CEx_ConfigAnalogFilter+0x46>

08002af0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002af0:	4b02      	ldr	r3, [pc, #8]	; (8002afc <HAL_PWREx_GetVoltageRange+0xc>)
 8002af2:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002af4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40007000 	.word	0x40007000

08002b00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b02:	4d1e      	ldr	r5, [pc, #120]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002b04:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b06:	00da      	lsls	r2, r3, #3
{
 8002b08:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b0a:	d518      	bpl.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b0c:	f7ff fff0 	bl	8002af0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002b14:	d123      	bne.n	8002b5e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b16:	2c80      	cmp	r4, #128	; 0x80
 8002b18:	d929      	bls.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b1a:	2ca0      	cmp	r4, #160	; 0xa0
 8002b1c:	bf8c      	ite	hi
 8002b1e:	2002      	movhi	r0, #2
 8002b20:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b22:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002b24:	6813      	ldr	r3, [r2, #0]
 8002b26:	f023 0307 	bic.w	r3, r3, #7
 8002b2a:	4303      	orrs	r3, r0
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002b34:	1a18      	subs	r0, r3, r0
 8002b36:	bf18      	it	ne
 8002b38:	2001      	movne	r0, #1
 8002b3a:	b003      	add	sp, #12
 8002b3c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	65ab      	str	r3, [r5, #88]	; 0x58
 8002b46:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002b50:	f7ff ffce 	bl	8002af0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b54:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	65ab      	str	r3, [r5, #88]	; 0x58
 8002b5c:	e7d8      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002b5e:	2c80      	cmp	r4, #128	; 0x80
 8002b60:	d807      	bhi.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002b62:	d008      	beq.n	8002b76 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002b64:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002b68:	4258      	negs	r0, r3
 8002b6a:	4158      	adcs	r0, r3
 8002b6c:	e7d9      	b.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e7d7      	b.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b72:	2003      	movs	r0, #3
 8002b74:	e7d5      	b.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b76:	2002      	movs	r0, #2
 8002b78:	e7d3      	b.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40022000 	.word	0x40022000

08002b84 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002b86:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b88:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b8a:	f012 020c 	ands.w	r2, r2, #12
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x18>
 8002b90:	2a0c      	cmp	r2, #12
 8002b92:	d115      	bne.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b94:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b98:	2901      	cmp	r1, #1
 8002b9a:	d118      	bne.n	8002bce <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b9c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002b9e:	481d      	ldr	r0, [pc, #116]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ba0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ba2:	bf55      	itete	pl
 8002ba4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ba8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002baa:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bae:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002bb2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb6:	b34a      	cbz	r2, 8002c0c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bb8:	2a0c      	cmp	r2, #12
 8002bba:	d009      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x4c>
 8002bbc:	2000      	movs	r0, #0
  return sysclockfreq;
 8002bbe:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bc0:	2a04      	cmp	r2, #4
 8002bc2:	d022      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bc4:	2a08      	cmp	r2, #8
 8002bc6:	4814      	ldr	r0, [pc, #80]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc8:	bf18      	it	ne
 8002bca:	2000      	movne	r0, #0
 8002bcc:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bce:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002bd6:	2a02      	cmp	r2, #2
 8002bd8:	d015      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x82>
 8002bda:	490f      	ldr	r1, [pc, #60]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bdc:	2a03      	cmp	r2, #3
 8002bde:	bf08      	it	eq
 8002be0:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002be2:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002bea:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bec:	68d8      	ldr	r0, [r3, #12]
 8002bee:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf2:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bf6:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf8:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bfa:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bfc:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002c00:	fbb2 f0f0 	udiv	r0, r2, r0
 8002c04:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002c06:	4805      	ldr	r0, [pc, #20]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c08:	e7eb      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002c0a:	4804      	ldr	r0, [pc, #16]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08006140 	.word	0x08006140
 8002c18:	007a1200 	.word	0x007a1200
 8002c1c:	00f42400 	.word	0x00f42400

08002c20 <HAL_RCC_OscConfig>:
{
 8002c20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002c24:	4605      	mov	r5, r0
 8002c26:	b918      	cbnz	r0, 8002c30 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002c28:	2001      	movs	r0, #1
}
 8002c2a:	b003      	add	sp, #12
 8002c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c30:	4c92      	ldr	r4, [pc, #584]	; (8002e7c <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c32:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c34:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c36:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c38:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c3e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c42:	d53d      	bpl.n	8002cc0 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c44:	b11e      	cbz	r6, 8002c4e <HAL_RCC_OscConfig+0x2e>
 8002c46:	2e0c      	cmp	r6, #12
 8002c48:	d166      	bne.n	8002d18 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c4a:	2f01      	cmp	r7, #1
 8002c4c:	d164      	bne.n	8002d18 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	0798      	lsls	r0, r3, #30
 8002c52:	d502      	bpl.n	8002c5a <HAL_RCC_OscConfig+0x3a>
 8002c54:	69ab      	ldr	r3, [r5, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0e6      	beq.n	8002c28 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	6a28      	ldr	r0, [r5, #32]
 8002c5e:	0719      	lsls	r1, r3, #28
 8002c60:	bf56      	itet	pl
 8002c62:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002c66:	6823      	ldrmi	r3, [r4, #0]
 8002c68:	091b      	lsrpl	r3, r3, #4
 8002c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6e:	4298      	cmp	r0, r3
 8002c70:	d93b      	bls.n	8002cea <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c72:	f7ff ff45 	bl	8002b00 <RCC_SetFlashLatencyFromMSIRange>
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d1d6      	bne.n	8002c28 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	6a2a      	ldr	r2, [r5, #32]
 8002c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c8e:	6863      	ldr	r3, [r4, #4]
 8002c90:	69ea      	ldr	r2, [r5, #28]
 8002c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c9a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c9c:	f7ff ff72 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002ca0:	68a3      	ldr	r3, [r4, #8]
 8002ca2:	4a77      	ldr	r2, [pc, #476]	; (8002e80 <HAL_RCC_OscConfig+0x260>)
 8002ca4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	40d8      	lsrs	r0, r3
 8002cb0:	4b74      	ldr	r3, [pc, #464]	; (8002e84 <HAL_RCC_OscConfig+0x264>)
 8002cb2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002cb4:	4b74      	ldr	r3, [pc, #464]	; (8002e88 <HAL_RCC_OscConfig+0x268>)
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	f7ff f9ce 	bl	8002058 <HAL_InitTick>
        if(status != HAL_OK)
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d1b4      	bne.n	8002c2a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc0:	682b      	ldr	r3, [r5, #0]
 8002cc2:	07d8      	lsls	r0, r3, #31
 8002cc4:	d45f      	bmi.n	8002d86 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	682b      	ldr	r3, [r5, #0]
 8002cc8:	0799      	lsls	r1, r3, #30
 8002cca:	f100 809e 	bmi.w	8002e0a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cce:	682b      	ldr	r3, [r5, #0]
 8002cd0:	0718      	lsls	r0, r3, #28
 8002cd2:	f100 80db 	bmi.w	8002e8c <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd6:	682b      	ldr	r3, [r5, #0]
 8002cd8:	0759      	lsls	r1, r3, #29
 8002cda:	f100 8101 	bmi.w	8002ee0 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cde:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f040 816a 	bne.w	8002fba <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	e79f      	b.n	8002c2a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	f043 0308 	orr.w	r3, r3, #8
 8002cf0:	6023      	str	r3, [r4, #0]
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cf8:	4303      	orrs	r3, r0
 8002cfa:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cfc:	6863      	ldr	r3, [r4, #4]
 8002cfe:	69ea      	ldr	r2, [r5, #28]
 8002d00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d08:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d0a:	2e00      	cmp	r6, #0
 8002d0c:	d1c6      	bne.n	8002c9c <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d0e:	f7ff fef7 	bl	8002b00 <RCC_SetFlashLatencyFromMSIRange>
 8002d12:	2800      	cmp	r0, #0
 8002d14:	d0c2      	beq.n	8002c9c <HAL_RCC_OscConfig+0x7c>
 8002d16:	e787      	b.n	8002c28 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d18:	69ab      	ldr	r3, [r5, #24]
 8002d1a:	b31b      	cbz	r3, 8002d64 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d24:	f7ff f9d8 	bl	80020d8 <HAL_GetTick>
 8002d28:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	079a      	lsls	r2, r3, #30
 8002d2e:	d511      	bpl.n	8002d54 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	f043 0308 	orr.w	r3, r3, #8
 8002d36:	6023      	str	r3, [r4, #0]
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	6a2a      	ldr	r2, [r5, #32]
 8002d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d40:	4313      	orrs	r3, r2
 8002d42:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d44:	6863      	ldr	r3, [r4, #4]
 8002d46:	69ea      	ldr	r2, [r5, #28]
 8002d48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d50:	6063      	str	r3, [r4, #4]
 8002d52:	e7b5      	b.n	8002cc0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d54:	f7ff f9c0 	bl	80020d8 <HAL_GetTick>
 8002d58:	eba0 0008 	sub.w	r0, r0, r8
 8002d5c:	2802      	cmp	r0, #2
 8002d5e:	d9e4      	bls.n	8002d2a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002d60:	2003      	movs	r0, #3
 8002d62:	e762      	b.n	8002c2a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d6c:	f7ff f9b4 	bl	80020d8 <HAL_GetTick>
 8002d70:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	079b      	lsls	r3, r3, #30
 8002d76:	d5a3      	bpl.n	8002cc0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d78:	f7ff f9ae 	bl	80020d8 <HAL_GetTick>
 8002d7c:	eba0 0008 	sub.w	r0, r0, r8
 8002d80:	2802      	cmp	r0, #2
 8002d82:	d9f6      	bls.n	8002d72 <HAL_RCC_OscConfig+0x152>
 8002d84:	e7ec      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d86:	2e08      	cmp	r6, #8
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_OscConfig+0x172>
 8002d8a:	2e0c      	cmp	r6, #12
 8002d8c:	d108      	bne.n	8002da0 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d8e:	2f03      	cmp	r7, #3
 8002d90:	d106      	bne.n	8002da0 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	039a      	lsls	r2, r3, #14
 8002d96:	d596      	bpl.n	8002cc6 <HAL_RCC_OscConfig+0xa6>
 8002d98:	686b      	ldr	r3, [r5, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d193      	bne.n	8002cc6 <HAL_RCC_OscConfig+0xa6>
 8002d9e:	e743      	b.n	8002c28 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da0:	686b      	ldr	r3, [r5, #4]
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da6:	d110      	bne.n	8002dca <HAL_RCC_OscConfig+0x1aa>
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002db0:	f7ff f992 	bl	80020d8 <HAL_GetTick>
 8002db4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	039b      	lsls	r3, r3, #14
 8002dba:	d484      	bmi.n	8002cc6 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7ff f98c 	bl	80020d8 <HAL_GetTick>
 8002dc0:	eba0 0008 	sub.w	r0, r0, r8
 8002dc4:	2864      	cmp	r0, #100	; 0x64
 8002dc6:	d9f6      	bls.n	8002db6 <HAL_RCC_OscConfig+0x196>
 8002dc8:	e7ca      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dce:	d104      	bne.n	8002dda <HAL_RCC_OscConfig+0x1ba>
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd6:	6023      	str	r3, [r4, #0]
 8002dd8:	e7e6      	b.n	8002da8 <HAL_RCC_OscConfig+0x188>
 8002dda:	6822      	ldr	r2, [r4, #0]
 8002ddc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002de0:	6022      	str	r2, [r4, #0]
 8002de2:	6822      	ldr	r2, [r4, #0]
 8002de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002de8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002dee:	f7ff f973 	bl	80020d8 <HAL_GetTick>
 8002df2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	0398      	lsls	r0, r3, #14
 8002df8:	f57f af65 	bpl.w	8002cc6 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7ff f96c 	bl	80020d8 <HAL_GetTick>
 8002e00:	eba0 0008 	sub.w	r0, r0, r8
 8002e04:	2864      	cmp	r0, #100	; 0x64
 8002e06:	d9f5      	bls.n	8002df4 <HAL_RCC_OscConfig+0x1d4>
 8002e08:	e7aa      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e0a:	2e04      	cmp	r6, #4
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
 8002e0e:	2e0c      	cmp	r6, #12
 8002e10:	d110      	bne.n	8002e34 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e12:	2f02      	cmp	r7, #2
 8002e14:	d10e      	bne.n	8002e34 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	0559      	lsls	r1, r3, #21
 8002e1a:	d503      	bpl.n	8002e24 <HAL_RCC_OscConfig+0x204>
 8002e1c:	68eb      	ldr	r3, [r5, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f43f af02 	beq.w	8002c28 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	6863      	ldr	r3, [r4, #4]
 8002e26:	692a      	ldr	r2, [r5, #16]
 8002e28:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002e2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e30:	6063      	str	r3, [r4, #4]
 8002e32:	e74c      	b.n	8002cce <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e34:	68eb      	ldr	r3, [r5, #12]
 8002e36:	b17b      	cbz	r3, 8002e58 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e40:	f7ff f94a 	bl	80020d8 <HAL_GetTick>
 8002e44:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	055a      	lsls	r2, r3, #21
 8002e4a:	d4eb      	bmi.n	8002e24 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7ff f944 	bl	80020d8 <HAL_GetTick>
 8002e50:	1bc0      	subs	r0, r0, r7
 8002e52:	2802      	cmp	r0, #2
 8002e54:	d9f7      	bls.n	8002e46 <HAL_RCC_OscConfig+0x226>
 8002e56:	e783      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e60:	f7ff f93a 	bl	80020d8 <HAL_GetTick>
 8002e64:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	055b      	lsls	r3, r3, #21
 8002e6a:	f57f af30 	bpl.w	8002cce <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7ff f933 	bl	80020d8 <HAL_GetTick>
 8002e72:	1bc0      	subs	r0, r0, r7
 8002e74:	2802      	cmp	r0, #2
 8002e76:	d9f6      	bls.n	8002e66 <HAL_RCC_OscConfig+0x246>
 8002e78:	e772      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08006170 	.word	0x08006170
 8002e84:	20000030 	.word	0x20000030
 8002e88:	20000038 	.word	0x20000038
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8c:	696b      	ldr	r3, [r5, #20]
 8002e8e:	b19b      	cbz	r3, 8002eb8 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8002e90:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002e9c:	f7ff f91c 	bl	80020d8 <HAL_GetTick>
 8002ea0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ea2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002ea6:	079a      	lsls	r2, r3, #30
 8002ea8:	f53f af15 	bmi.w	8002cd6 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7ff f914 	bl	80020d8 <HAL_GetTick>
 8002eb0:	1bc0      	subs	r0, r0, r7
 8002eb2:	2802      	cmp	r0, #2
 8002eb4:	d9f5      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x282>
 8002eb6:	e753      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002eb8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002ec4:	f7ff f908 	bl	80020d8 <HAL_GetTick>
 8002ec8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002ece:	079b      	lsls	r3, r3, #30
 8002ed0:	f57f af01 	bpl.w	8002cd6 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7ff f900 	bl	80020d8 <HAL_GetTick>
 8002ed8:	1bc0      	subs	r0, r0, r7
 8002eda:	2802      	cmp	r0, #2
 8002edc:	d9f5      	bls.n	8002eca <HAL_RCC_OscConfig+0x2aa>
 8002ede:	e73f      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ee0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ee2:	00df      	lsls	r7, r3, #3
 8002ee4:	d429      	bmi.n	8002f3a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	65a3      	str	r3, [r4, #88]	; 0x58
 8002eee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	9301      	str	r3, [sp, #4]
 8002ef6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ef8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efc:	4f85      	ldr	r7, [pc, #532]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	05d8      	lsls	r0, r3, #23
 8002f02:	d51d      	bpl.n	8002f40 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f04:	68ab      	ldr	r3, [r5, #8]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d12b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x342>
 8002f0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002f16:	f7ff f8df 	bl	80020d8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f1e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f20:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f24:	079a      	lsls	r2, r3, #30
 8002f26:	d542      	bpl.n	8002fae <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002f28:	f1b8 0f00 	cmp.w	r8, #0
 8002f2c:	f43f aed7 	beq.w	8002cde <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f36:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f38:	e6d1      	b.n	8002cde <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002f3a:	f04f 0800 	mov.w	r8, #0
 8002f3e:	e7dd      	b.n	8002efc <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f46:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002f48:	f7ff f8c6 	bl	80020d8 <HAL_GetTick>
 8002f4c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	05d9      	lsls	r1, r3, #23
 8002f52:	d4d7      	bmi.n	8002f04 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7ff f8c0 	bl	80020d8 <HAL_GetTick>
 8002f58:	eba0 0009 	sub.w	r0, r0, r9
 8002f5c:	2802      	cmp	r0, #2
 8002f5e:	d9f6      	bls.n	8002f4e <HAL_RCC_OscConfig+0x32e>
 8002f60:	e6fe      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f62:	2b05      	cmp	r3, #5
 8002f64:	d106      	bne.n	8002f74 <HAL_RCC_OscConfig+0x354>
 8002f66:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002f72:	e7ca      	b.n	8002f0a <HAL_RCC_OscConfig+0x2ea>
 8002f74:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002f80:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002f84:	f022 0204 	bic.w	r2, r2, #4
 8002f88:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1c2      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002f90:	f7ff f8a2 	bl	80020d8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f98:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f9a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f9e:	079b      	lsls	r3, r3, #30
 8002fa0:	d5c2      	bpl.n	8002f28 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7ff f899 	bl	80020d8 <HAL_GetTick>
 8002fa6:	1bc0      	subs	r0, r0, r7
 8002fa8:	4548      	cmp	r0, r9
 8002faa:	d9f6      	bls.n	8002f9a <HAL_RCC_OscConfig+0x37a>
 8002fac:	e6d8      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7ff f893 	bl	80020d8 <HAL_GetTick>
 8002fb2:	1bc0      	subs	r0, r0, r7
 8002fb4:	4548      	cmp	r0, r9
 8002fb6:	d9b3      	bls.n	8002f20 <HAL_RCC_OscConfig+0x300>
 8002fb8:	e6d2      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	f040 808f 	bne.w	80030de <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002fc0:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002fc4:	f003 0103 	and.w	r1, r3, #3
 8002fc8:	4291      	cmp	r1, r2
 8002fca:	d124      	bne.n	8003016 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fcc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002fce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fd2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002fd8:	d11d      	bne.n	8003016 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fda:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002fdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fe0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002fe4:	d117      	bne.n	8003016 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fe6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002fe8:	3a07      	subs	r2, #7
 8002fea:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002fee:	bf18      	it	ne
 8002ff0:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff2:	4291      	cmp	r1, r2
 8002ff4:	d10f      	bne.n	8003016 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002ff8:	0852      	lsrs	r2, r2, #1
 8002ffa:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002ffe:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003000:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003004:	d107      	bne.n	8003016 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003006:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003008:	0852      	lsrs	r2, r2, #1
 800300a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800300e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003010:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003014:	d04a      	beq.n	80030ac <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003016:	2e0c      	cmp	r6, #12
 8003018:	f43f ae06 	beq.w	8002c28 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	015f      	lsls	r7, r3, #5
 8003020:	f53f ae02 	bmi.w	8002c28 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	00de      	lsls	r6, r3, #3
 8003028:	f53f adfe 	bmi.w	8002c28 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003032:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8003034:	f7ff f850 	bl	80020d8 <HAL_GetTick>
 8003038:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	0198      	lsls	r0, r3, #6
 800303e:	d42f      	bmi.n	80030a0 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003040:	68e2      	ldr	r2, [r4, #12]
 8003042:	4b35      	ldr	r3, [pc, #212]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8003044:	4013      	ands	r3, r2
 8003046:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003048:	4313      	orrs	r3, r2
 800304a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800304c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003050:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003052:	3a01      	subs	r2, #1
 8003054:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003058:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800305a:	0912      	lsrs	r2, r2, #4
 800305c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003060:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003062:	0852      	lsrs	r2, r2, #1
 8003064:	3a01      	subs	r2, #1
 8003066:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800306a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800306c:	0852      	lsrs	r2, r2, #1
 800306e:	3a01      	subs	r2, #1
 8003070:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003074:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307c:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800307e:	68e3      	ldr	r3, [r4, #12]
 8003080:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003084:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8003086:	f7ff f827 	bl	80020d8 <HAL_GetTick>
 800308a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	0199      	lsls	r1, r3, #6
 8003090:	f53f ae29 	bmi.w	8002ce6 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003094:	f7ff f820 	bl	80020d8 <HAL_GetTick>
 8003098:	1b40      	subs	r0, r0, r5
 800309a:	2802      	cmp	r0, #2
 800309c:	d9f6      	bls.n	800308c <HAL_RCC_OscConfig+0x46c>
 800309e:	e65f      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a0:	f7ff f81a 	bl	80020d8 <HAL_GetTick>
 80030a4:	1b80      	subs	r0, r0, r6
 80030a6:	2802      	cmp	r0, #2
 80030a8:	d9c7      	bls.n	800303a <HAL_RCC_OscConfig+0x41a>
 80030aa:	e659      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	019a      	lsls	r2, r3, #6
 80030b0:	f53f ae19 	bmi.w	8002ce6 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ba:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030bc:	68e3      	ldr	r3, [r4, #12]
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c2:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80030c4:	f7ff f808 	bl	80020d8 <HAL_GetTick>
 80030c8:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	019b      	lsls	r3, r3, #6
 80030ce:	f53f ae0a 	bmi.w	8002ce6 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7ff f801 	bl	80020d8 <HAL_GetTick>
 80030d6:	1b40      	subs	r0, r0, r5
 80030d8:	2802      	cmp	r0, #2
 80030da:	d9f6      	bls.n	80030ca <HAL_RCC_OscConfig+0x4aa>
 80030dc:	e640      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030de:	2e0c      	cmp	r6, #12
 80030e0:	f43f ada2 	beq.w	8002c28 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80030ec:	f7fe fff4 	bl	80020d8 <HAL_GetTick>
 80030f0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80030f8:	d105      	bne.n	8003106 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030fa:	68e1      	ldr	r1, [r4, #12]
 80030fc:	4a07      	ldr	r2, [pc, #28]	; (800311c <HAL_RCC_OscConfig+0x4fc>)
 80030fe:	400a      	ands	r2, r1
 8003100:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8003102:	4618      	mov	r0, r3
 8003104:	e591      	b.n	8002c2a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe ffe7 	bl	80020d8 <HAL_GetTick>
 800310a:	1b40      	subs	r0, r0, r5
 800310c:	2802      	cmp	r0, #2
 800310e:	d9f0      	bls.n	80030f2 <HAL_RCC_OscConfig+0x4d2>
 8003110:	e626      	b.n	8002d60 <HAL_RCC_OscConfig+0x140>
 8003112:	bf00      	nop
 8003114:	40007000 	.word	0x40007000
 8003118:	f99d808c 	.word	0xf99d808c
 800311c:	feeefffc 	.word	0xfeeefffc

08003120 <HAL_RCC_ClockConfig>:
{
 8003120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003124:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003126:	4604      	mov	r4, r0
 8003128:	b910      	cbnz	r0, 8003130 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800312a:	2001      	movs	r0, #1
}
 800312c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003130:	4a4b      	ldr	r2, [pc, #300]	; (8003260 <HAL_RCC_ClockConfig+0x140>)
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	428b      	cmp	r3, r1
 800313a:	d32c      	bcc.n	8003196 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313c:	6820      	ldr	r0, [r4, #0]
 800313e:	0786      	lsls	r6, r0, #30
 8003140:	d434      	bmi.n	80031ac <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	07c1      	lsls	r1, r0, #31
 8003144:	d43f      	bmi.n	80031c6 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003146:	6821      	ldr	r1, [r4, #0]
 8003148:	078a      	lsls	r2, r1, #30
 800314a:	d468      	bmi.n	800321e <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4a44      	ldr	r2, [pc, #272]	; (8003260 <HAL_RCC_ClockConfig+0x140>)
 800314e:	6813      	ldr	r3, [r2, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	42ab      	cmp	r3, r5
 8003156:	d86f      	bhi.n	8003238 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	f011 0f04 	tst.w	r1, #4
 800315c:	4d41      	ldr	r5, [pc, #260]	; (8003264 <HAL_RCC_ClockConfig+0x144>)
 800315e:	d177      	bne.n	8003250 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003160:	070b      	lsls	r3, r1, #28
 8003162:	d506      	bpl.n	8003172 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003164:	68ab      	ldr	r3, [r5, #8]
 8003166:	6922      	ldr	r2, [r4, #16]
 8003168:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800316c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003170:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003172:	f7ff fd07 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8003176:	68ab      	ldr	r3, [r5, #8]
 8003178:	4a3b      	ldr	r2, [pc, #236]	; (8003268 <HAL_RCC_ClockConfig+0x148>)
 800317a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800317e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	40d8      	lsrs	r0, r3
 800318a:	4b38      	ldr	r3, [pc, #224]	; (800326c <HAL_RCC_ClockConfig+0x14c>)
 800318c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800318e:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_RCC_ClockConfig+0x150>)
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	f7fe bf61 	b.w	8002058 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	f023 0307 	bic.w	r3, r3, #7
 800319c:	430b      	orrs	r3, r1
 800319e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a0:	6813      	ldr	r3, [r2, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	428b      	cmp	r3, r1
 80031a8:	d1bf      	bne.n	800312a <HAL_RCC_ClockConfig+0xa>
 80031aa:	e7c7      	b.n	800313c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031ac:	4a2d      	ldr	r2, [pc, #180]	; (8003264 <HAL_RCC_ClockConfig+0x144>)
 80031ae:	68a6      	ldr	r6, [r4, #8]
 80031b0:	6891      	ldr	r1, [r2, #8]
 80031b2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80031b6:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	bf81      	itttt	hi
 80031ba:	6893      	ldrhi	r3, [r2, #8]
 80031bc:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 80031c0:	4333      	orrhi	r3, r6
 80031c2:	6093      	strhi	r3, [r2, #8]
 80031c4:	e7bd      	b.n	8003142 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c6:	6862      	ldr	r2, [r4, #4]
 80031c8:	4e26      	ldr	r6, [pc, #152]	; (8003264 <HAL_RCC_ClockConfig+0x144>)
 80031ca:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031cc:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ce:	d11a      	bne.n	8003206 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d4:	d0a9      	beq.n	800312a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031d6:	68b3      	ldr	r3, [r6, #8]
 80031d8:	f023 0303 	bic.w	r3, r3, #3
 80031dc:	4313      	orrs	r3, r2
 80031de:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80031e0:	f7fe ff7a 	bl	80020d8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80031e8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	68b3      	ldr	r3, [r6, #8]
 80031ec:	6862      	ldr	r2, [r4, #4]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80031f6:	d0a6      	beq.n	8003146 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f8:	f7fe ff6e 	bl	80020d8 <HAL_GetTick>
 80031fc:	1bc0      	subs	r0, r0, r7
 80031fe:	4540      	cmp	r0, r8
 8003200:	d9f3      	bls.n	80031ea <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8003202:	2003      	movs	r0, #3
 8003204:	e792      	b.n	800312c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003206:	2a02      	cmp	r2, #2
 8003208:	d102      	bne.n	8003210 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800320e:	e7e1      	b.n	80031d4 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003210:	b912      	cbnz	r2, 8003218 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003212:	f013 0f02 	tst.w	r3, #2
 8003216:	e7dd      	b.n	80031d4 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003218:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800321c:	e7da      	b.n	80031d4 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800321e:	4a11      	ldr	r2, [pc, #68]	; (8003264 <HAL_RCC_ClockConfig+0x144>)
 8003220:	68a6      	ldr	r6, [r4, #8]
 8003222:	6890      	ldr	r0, [r2, #8]
 8003224:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8003228:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322a:	bf3f      	itttt	cc
 800322c:	6893      	ldrcc	r3, [r2, #8]
 800322e:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8003232:	4333      	orrcc	r3, r6
 8003234:	6093      	strcc	r3, [r2, #8]
 8003236:	e789      	b.n	800314c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	f023 0307 	bic.w	r3, r3, #7
 800323e:	432b      	orrs	r3, r5
 8003240:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	6813      	ldr	r3, [r2, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	42ab      	cmp	r3, r5
 800324a:	f47f af6e 	bne.w	800312a <HAL_RCC_ClockConfig+0xa>
 800324e:	e783      	b.n	8003158 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	68ab      	ldr	r3, [r5, #8]
 8003252:	68e2      	ldr	r2, [r4, #12]
 8003254:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003258:	4313      	orrs	r3, r2
 800325a:	60ab      	str	r3, [r5, #8]
 800325c:	e780      	b.n	8003160 <HAL_RCC_ClockConfig+0x40>
 800325e:	bf00      	nop
 8003260:	40022000 	.word	0x40022000
 8003264:	40021000 	.word	0x40021000
 8003268:	08006170 	.word	0x08006170
 800326c:	20000030 	.word	0x20000030
 8003270:	20000038 	.word	0x20000038

08003274 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003276:	4a06      	ldr	r2, [pc, #24]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800327e:	5cd3      	ldrb	r3, [r2, r3]
 8003280:	4a04      	ldr	r2, [pc, #16]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003282:	6810      	ldr	r0, [r2, #0]
 8003284:	f003 031f 	and.w	r3, r3, #31
}
 8003288:	40d8      	lsrs	r0, r3
 800328a:	4770      	bx	lr
 800328c:	40021000 	.word	0x40021000
 8003290:	08006180 	.word	0x08006180
 8003294:	20000030 	.word	0x20000030

08003298 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800329a:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80032a2:	5cd3      	ldrb	r3, [r2, r3]
 80032a4:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a6:	6810      	ldr	r0, [r2, #0]
 80032a8:	f003 031f 	and.w	r3, r3, #31
}
 80032ac:	40d8      	lsrs	r0, r3
 80032ae:	4770      	bx	lr
 80032b0:	40021000 	.word	0x40021000
 80032b4:	08006180 	.word	0x08006180
 80032b8:	20000030 	.word	0x20000030

080032bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80032c0:	461f      	mov	r7, r3
 80032c2:	4689      	mov	r9, r1
 80032c4:	4690      	mov	r8, r2
 80032c6:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032c8:	f7fe ff06 	bl	80020d8 <HAL_GetTick>
 80032cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032ce:	443b      	add	r3, r7
 80032d0:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 80032d2:	f7fe ff01 	bl	80020d8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 80032d8:	681e      	ldr	r6, [r3, #0]
 80032da:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 80032de:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 80032e0:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032e2:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e4:	6822      	ldr	r2, [r4, #0]
 80032e6:	6893      	ldr	r3, [r2, #8]
 80032e8:	ea39 0303 	bics.w	r3, r9, r3
 80032ec:	bf0c      	ite	eq
 80032ee:	2301      	moveq	r3, #1
 80032f0:	2300      	movne	r3, #0
 80032f2:	4543      	cmp	r3, r8
 80032f4:	d101      	bne.n	80032fa <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 80032f6:	2000      	movs	r0, #0
 80032f8:	e02e      	b.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 80032fa:	1c7b      	adds	r3, r7, #1
 80032fc:	d0f3      	beq.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032fe:	f7fe feeb 	bl	80020d8 <HAL_GetTick>
 8003302:	eba0 000a 	sub.w	r0, r0, sl
 8003306:	42a8      	cmp	r0, r5
 8003308:	d329      	bcc.n	800335e <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003312:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003314:	6862      	ldr	r2, [r4, #4]
 8003316:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800331a:	d10a      	bne.n	8003332 <SPI_WaitFlagStateUntilTimeout+0x76>
 800331c:	68a2      	ldr	r2, [r4, #8]
 800331e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003322:	d002      	beq.n	800332a <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003324:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003328:	d103      	bne.n	8003332 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003330:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003332:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003334:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003338:	d107      	bne.n	800334a <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003348:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800334a:	2301      	movs	r3, #1
 800334c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003350:	2300      	movs	r3, #0
 8003352:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003356:	2003      	movs	r0, #3
}
 8003358:	b002      	add	sp, #8
 800335a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 800335e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003360:	2b00      	cmp	r3, #0
      count--;
 8003362:	9b01      	ldr	r3, [sp, #4]
 8003364:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8003368:	bf08      	it	eq
 800336a:	2500      	moveq	r5, #0
      count--;
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	e7b9      	b.n	80032e4 <SPI_WaitFlagStateUntilTimeout+0x28>
 8003370:	20000030 	.word	0x20000030

08003374 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003378:	4699      	mov	r9, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800337a:	2300      	movs	r3, #0
{
 800337c:	4604      	mov	r4, r0
 800337e:	4688      	mov	r8, r1
 8003380:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8003382:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003386:	f7fe fea7 	bl	80020d8 <HAL_GetTick>
 800338a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800338c:	444b      	add	r3, r9
 800338e:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003390:	f7fe fea2 	bl	80020d8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003394:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <SPI_WaitFifoStateUntilTimeout+0xd4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003396:	f8d4 b000 	ldr.w	fp, [r4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800339a:	681e      	ldr	r6, [r3, #0]
 800339c:	2323      	movs	r3, #35	; 0x23
 800339e:	435e      	muls	r6, r3
 80033a0:	0d36      	lsrs	r6, r6, #20
 80033a2:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 80033a4:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033a6:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80033a8:	6822      	ldr	r2, [r4, #0]
 80033aa:	6893      	ldr	r3, [r2, #8]
 80033ac:	ea03 0308 	and.w	r3, r3, r8
 80033b0:	42bb      	cmp	r3, r7
 80033b2:	d101      	bne.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 80033b4:	2000      	movs	r0, #0
 80033b6:	e03a      	b.n	800342e <SPI_WaitFifoStateUntilTimeout+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033b8:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 80033bc:	d107      	bne.n	80033ce <SPI_WaitFifoStateUntilTimeout+0x5a>
 80033be:	b937      	cbnz	r7, 80033ce <SPI_WaitFifoStateUntilTimeout+0x5a>
      tmpreg8 = *ptmpreg8;
 80033c0:	f89b 300c 	ldrb.w	r3, [fp, #12]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80033ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	f1b9 3fff 	cmp.w	r9, #4294967295
 80033d2:	d0ea      	beq.n	80033aa <SPI_WaitFifoStateUntilTimeout+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033d4:	f7fe fe80 	bl	80020d8 <HAL_GetTick>
 80033d8:	eba0 000a 	sub.w	r0, r0, sl
 80033dc:	42a8      	cmp	r0, r5
 80033de:	d329      	bcc.n	8003434 <SPI_WaitFifoStateUntilTimeout+0xc0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033e8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ea:	6862      	ldr	r2, [r4, #4]
 80033ec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80033f0:	d10a      	bne.n	8003408 <SPI_WaitFifoStateUntilTimeout+0x94>
 80033f2:	68a2      	ldr	r2, [r4, #8]
 80033f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80033f8:	d002      	beq.n	8003400 <SPI_WaitFifoStateUntilTimeout+0x8c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033fa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80033fe:	d103      	bne.n	8003408 <SPI_WaitFifoStateUntilTimeout+0x94>
          __HAL_SPI_DISABLE(hspi);
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003406:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003408:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800340a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800340e:	d107      	bne.n	8003420 <SPI_WaitFifoStateUntilTimeout+0xac>
          SPI_RESET_CRC(hspi);
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800341e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003420:	2301      	movs	r3, #1
 8003422:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003426:	2300      	movs	r3, #0
 8003428:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 800342c:	2003      	movs	r0, #3
}
 800342e:	b003      	add	sp, #12
 8003430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (count == 0U)
 8003434:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003436:	2b00      	cmp	r3, #0
      count--;
 8003438:	9b01      	ldr	r3, [sp, #4]
 800343a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800343e:	bf08      	it	eq
 8003440:	2500      	moveq	r5, #0
      count--;
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	e7b0      	b.n	80033a8 <SPI_WaitFifoStateUntilTimeout+0x34>
 8003446:	bf00      	nop
 8003448:	20000030 	.word	0x20000030

0800344c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800344e:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003450:	6842      	ldr	r2, [r0, #4]
 8003452:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8003456:	4604      	mov	r4, r0
 8003458:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345a:	d10b      	bne.n	8003474 <SPI_EndRxTransaction+0x28>
 800345c:	6882      	ldr	r2, [r0, #8]
 800345e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003462:	d002      	beq.n	800346a <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003464:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003468:	d104      	bne.n	8003474 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800346a:	6821      	ldr	r1, [r4, #0]
 800346c:	680a      	ldr	r2, [r1, #0]
 800346e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003472:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003474:	9600      	str	r6, [sp, #0]
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	4620      	mov	r0, r4
 800347c:	9303      	str	r3, [sp, #12]
 800347e:	f7ff ff1d 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 8003482:	9b03      	ldr	r3, [sp, #12]
 8003484:	4605      	mov	r5, r0
 8003486:	b128      	cbz	r0, 8003494 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003488:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800348a:	f043 0320 	orr.w	r3, r3, #32
 800348e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003490:	2503      	movs	r5, #3
 8003492:	e013      	b.n	80034bc <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003494:	6862      	ldr	r2, [r4, #4]
 8003496:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800349a:	d10f      	bne.n	80034bc <SPI_EndRxTransaction+0x70>
 800349c:	68a2      	ldr	r2, [r4, #8]
 800349e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80034a2:	d002      	beq.n	80034aa <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80034a8:	d108      	bne.n	80034bc <SPI_EndRxTransaction+0x70>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034aa:	9600      	str	r6, [sp, #0]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7ff ff5e 	bl	8003374 <SPI_WaitFifoStateUntilTimeout>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1e5      	bne.n	8003488 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 80034bc:	4628      	mov	r0, r5
 80034be:	b004      	add	sp, #16
 80034c0:	bd70      	pop	{r4, r5, r6, pc}

080034c2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034c2:	b530      	push	{r4, r5, lr}
 80034c4:	b085      	sub	sp, #20
 80034c6:	460b      	mov	r3, r1
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034c8:	9200      	str	r2, [sp, #0]
 80034ca:	9103      	str	r1, [sp, #12]
{
 80034cc:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034ce:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034d2:	2200      	movs	r2, #0
{
 80034d4:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034d6:	f7ff ff4d 	bl	8003374 <SPI_WaitFifoStateUntilTimeout>
 80034da:	9b03      	ldr	r3, [sp, #12]
 80034dc:	4602      	mov	r2, r0
 80034de:	b128      	cbz	r0, 80034ec <SPI_EndRxTxTransaction+0x2a>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80034e2:	f043 0320 	orr.w	r3, r3, #32
 80034e6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80034e8:	2003      	movs	r0, #3
 80034ea:	e011      	b.n	8003510 <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034ec:	9500      	str	r5, [sp, #0]
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	4620      	mov	r0, r4
 80034f2:	9303      	str	r3, [sp, #12]
 80034f4:	f7ff fee2 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 80034f8:	9b03      	ldr	r3, [sp, #12]
 80034fa:	4602      	mov	r2, r0
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d1ef      	bne.n	80034e0 <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003500:	9500      	str	r5, [sp, #0]
 8003502:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003506:	4620      	mov	r0, r4
 8003508:	f7ff ff34 	bl	8003374 <SPI_WaitFifoStateUntilTimeout>
 800350c:	2800      	cmp	r0, #0
 800350e:	d1e7      	bne.n	80034e0 <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 8003510:	b005      	add	sp, #20
 8003512:	bd30      	pop	{r4, r5, pc}

08003514 <HAL_SPI_MspInit>:
}
 8003514:	4770      	bx	lr

08003516 <HAL_SPI_Init>:
{
 8003516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 8003518:	4604      	mov	r4, r0
 800351a:	2800      	cmp	r0, #0
 800351c:	d079      	beq.n	8003612 <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800351e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003520:	2b00      	cmp	r3, #0
 8003522:	d14f      	bne.n	80035c4 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003524:	6842      	ldr	r2, [r0, #4]
 8003526:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800352a:	d000      	beq.n	800352e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800352c:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800352e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003532:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003536:	b923      	cbnz	r3, 8003542 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8003538:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800353c:	4620      	mov	r0, r4
 800353e:	f7ff ffe9 	bl	8003514 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8003542:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003544:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003546:	2302      	movs	r3, #2
 8003548:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800354c:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800354e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003556:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	d85b      	bhi.n	8003616 <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800355e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003562:	d000      	beq.n	8003566 <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003564:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003566:	6863      	ldr	r3, [r4, #4]
 8003568:	68a7      	ldr	r7, [r4, #8]
 800356a:	69a0      	ldr	r0, [r4, #24]
 800356c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800356e:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 8003572:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003576:	433b      	orrs	r3, r7
 8003578:	6927      	ldr	r7, [r4, #16]
 800357a:	f007 0702 	and.w	r7, r7, #2
 800357e:	433b      	orrs	r3, r7
 8003580:	6967      	ldr	r7, [r4, #20]
 8003582:	f007 0701 	and.w	r7, r7, #1
 8003586:	433b      	orrs	r3, r7
 8003588:	f400 7700 	and.w	r7, r0, #512	; 0x200
 800358c:	433b      	orrs	r3, r7
 800358e:	69e7      	ldr	r7, [r4, #28]
 8003590:	f007 0738 	and.w	r7, r7, #56	; 0x38
 8003594:	433b      	orrs	r3, r7
 8003596:	6a27      	ldr	r7, [r4, #32]
 8003598:	f007 0780 	and.w	r7, r7, #128	; 0x80
 800359c:	433b      	orrs	r3, r7
 800359e:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 80035a2:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a4:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035a8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035aa:	d111      	bne.n	80035d0 <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80035ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035ae:	bb6b      	cbnz	r3, 800360c <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80035b4:	d90a      	bls.n	80035cc <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80035b6:	2302      	movs	r3, #2
 80035b8:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80035ba:	6813      	ldr	r3, [r2, #0]
 80035bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e005      	b.n	80035d0 <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035c4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035ca:	e7b0      	b.n	800352e <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80035cc:	2301      	movs	r3, #1
 80035ce:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035d2:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	f007 0708 	and.w	r7, r7, #8
 80035dc:	433b      	orrs	r3, r7
 80035de:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80035e2:	0c00      	lsrs	r0, r0, #16
 80035e4:	4319      	orrs	r1, r3
 80035e6:	f000 0004 	and.w	r0, r0, #4
 80035ea:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035ec:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80035f0:	bf08      	it	eq
 80035f2:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035f4:	ea45 0501 	orr.w	r5, r5, r1
 80035f8:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fa:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80035fe:	bf08      	it	eq
 8003600:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 8003602:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003604:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003606:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800360c:	2b02      	cmp	r3, #2
 800360e:	d1df      	bne.n	80035d0 <HAL_SPI_Init+0xba>
 8003610:	e7d3      	b.n	80035ba <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 8003612:	2001      	movs	r0, #1
 8003614:	e7f9      	b.n	800360a <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003616:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003618:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 800361c:	e7a1      	b.n	8003562 <HAL_SPI_Init+0x4c>

0800361e <HAL_SPI_MspDeInit>:
 800361e:	4770      	bx	lr

08003620 <HAL_SPI_DeInit>:
{
 8003620:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003622:	4604      	mov	r4, r0
 8003624:	b180      	cbz	r0, 8003648 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8003626:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003628:	2302      	movs	r3, #2
 800362a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003634:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003636:	f7ff fff2 	bl	800361e <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800363a:	2000      	movs	r0, #0
 800363c:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 800363e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 8003642:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 8003646:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003648:	2001      	movs	r0, #1
 800364a:	e7fc      	b.n	8003646 <HAL_SPI_DeInit+0x26>

0800364c <HAL_SPI_TransmitReceive>:
{
 800364c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003650:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8003656:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 800365a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800365e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8003660:	2b01      	cmp	r3, #1
{
 8003662:	4604      	mov	r4, r0
 8003664:	460e      	mov	r6, r1
 8003666:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 8003668:	f000 81b4 	beq.w	80039d4 <HAL_SPI_TransmitReceive+0x388>
 800366c:	2301      	movs	r3, #1
 800366e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003672:	f7fe fd31 	bl	80020d8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003676:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800367a:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800367e:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8003680:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 8003682:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8003684:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8003688:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800368a:	d00b      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0x58>
 800368c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003690:	f040 819e 	bne.w	80039d0 <HAL_SPI_TransmitReceive+0x384>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003694:	68a3      	ldr	r3, [r4, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f040 819a 	bne.w	80039d0 <HAL_SPI_TransmitReceive+0x384>
 800369c:	f1bc 0f04 	cmp.w	ip, #4
 80036a0:	f040 8196 	bne.w	80039d0 <HAL_SPI_TransmitReceive+0x384>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036a4:	2e00      	cmp	r6, #0
 80036a6:	f000 8176 	beq.w	8003996 <HAL_SPI_TransmitReceive+0x34a>
 80036aa:	f1ba 0f00 	cmp.w	sl, #0
 80036ae:	f000 8172 	beq.w	8003996 <HAL_SPI_TransmitReceive+0x34a>
 80036b2:	f1b9 0f00 	cmp.w	r9, #0
 80036b6:	f000 816e 	beq.w	8003996 <HAL_SPI_TransmitReceive+0x34a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036ba:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036be:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036c2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036c4:	bf1c      	itt	ne
 80036c6:	2305      	movne	r3, #5
 80036c8:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80036d0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 80036d6:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 80036de:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036e2:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80036e4:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80036e8:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036ec:	d107      	bne.n	80036fe <HAL_SPI_TransmitReceive+0xb2>
    SPI_RESET_CRC(hspi);
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036f4:	602b      	str	r3, [r5, #0]
 80036f6:	682b      	ldr	r3, [r5, #0]
 80036f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036fc:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80036fe:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003702:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003704:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8003708:	d802      	bhi.n	8003710 <HAL_SPI_TransmitReceive+0xc4>
 800370a:	f1b9 0f01 	cmp.w	r9, #1
 800370e:	d03a      	beq.n	8003786 <HAL_SPI_TransmitReceive+0x13a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003714:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003716:	682b      	ldr	r3, [r5, #0]
 8003718:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800371a:	bf5e      	ittt	pl
 800371c:	682b      	ldrpl	r3, [r5, #0]
 800371e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003722:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003724:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8003728:	d97f      	bls.n	800382a <HAL_SPI_TransmitReceive+0x1de>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800372a:	b112      	cbz	r2, 8003732 <HAL_SPI_TransmitReceive+0xe6>
 800372c:	f1b9 0f01 	cmp.w	r9, #1
 8003730:	d107      	bne.n	8003742 <HAL_SPI_TransmitReceive+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003732:	f836 3b02 	ldrh.w	r3, [r6], #2
 8003736:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 8003738:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800373a:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800373c:	3b01      	subs	r3, #1
 800373e:	b29b      	uxth	r3, r3
 8003740:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003742:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003746:	f001 0604 	and.w	r6, r1, #4
 800374a:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800374e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003750:	b29b      	uxth	r3, r3
 8003752:	b9db      	cbnz	r3, 800378c <HAL_SPI_TransmitReceive+0x140>
 8003754:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003758:	b29b      	uxth	r3, r3
 800375a:	b9bb      	cbnz	r3, 800378c <HAL_SPI_TransmitReceive+0x140>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800375c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003762:	f040 8101 	bne.w	8003968 <HAL_SPI_TransmitReceive+0x31c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003766:	2201      	movs	r2, #1
 8003768:	f8cd 8000 	str.w	r8, [sp]
 800376c:	463b      	mov	r3, r7
 800376e:	4611      	mov	r1, r2
 8003770:	4620      	mov	r0, r4
 8003772:	f7ff fda3 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 8003776:	2800      	cmp	r0, #0
 8003778:	f000 80ee 	beq.w	8003958 <HAL_SPI_TransmitReceive+0x30c>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800377c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800377e:	f043 0302 	orr.w	r3, r3, #2
 8003782:	6623      	str	r3, [r4, #96]	; 0x60
 8003784:	e02a      	b.n	80037dc <HAL_SPI_TransmitReceive+0x190>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800378a:	e7c3      	b.n	8003714 <HAL_SPI_TransmitReceive+0xc8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	0790      	lsls	r0, r2, #30
 8003792:	d507      	bpl.n	80037a4 <HAL_SPI_TransmitReceive+0x158>
 8003794:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003796:	b292      	uxth	r2, r2
 8003798:	b122      	cbz	r2, 80037a4 <HAL_SPI_TransmitReceive+0x158>
 800379a:	f1b9 0f00 	cmp.w	r9, #0
 800379e:	d128      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 80037a0:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037a4:	6899      	ldr	r1, [r3, #8]
 80037a6:	f011 0101 	ands.w	r1, r1, #1
 80037aa:	d00f      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x180>
 80037ac:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80037b0:	b292      	uxth	r2, r2
 80037b2:	b15a      	cbz	r2, 80037cc <HAL_SPI_TransmitReceive+0x180>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037b8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037bc:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80037be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80037ca:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037cc:	f7fe fc84 	bl	80020d8 <HAL_GetTick>
 80037d0:	eba0 0008 	sub.w	r0, r0, r8
 80037d4:	42b8      	cmp	r0, r7
 80037d6:	d3ba      	bcc.n	800374e <HAL_SPI_TransmitReceive+0x102>
 80037d8:	1c79      	adds	r1, r7, #1
 80037da:	d0b8      	beq.n	800374e <HAL_SPI_TransmitReceive+0x102>
          errorcode = HAL_TIMEOUT;
 80037dc:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80037de:	2301      	movs	r3, #1
 80037e0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80037e4:	2300      	movs	r3, #0
 80037e6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80037ea:	4628      	mov	r0, r5
 80037ec:	b004      	add	sp, #16
 80037ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80037f4:	f832 1b02 	ldrh.w	r1, [r2], #2
 80037f8:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fa:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80037fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80037fe:	3a01      	subs	r2, #1
 8003800:	b292      	uxth	r2, r2
 8003802:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003804:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003806:	b292      	uxth	r2, r2
 8003808:	2a00      	cmp	r2, #0
 800380a:	d1c9      	bne.n	80037a0 <HAL_SPI_TransmitReceive+0x154>
 800380c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800380e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003812:	d1c5      	bne.n	80037a0 <HAL_SPI_TransmitReceive+0x154>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003814:	b926      	cbnz	r6, 8003820 <HAL_SPI_TransmitReceive+0x1d4>
 8003816:	b11d      	cbz	r5, 8003820 <HAL_SPI_TransmitReceive+0x1d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e7ba      	b.n	80037a0 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382a:	b112      	cbz	r2, 8003832 <HAL_SPI_TransmitReceive+0x1e6>
 800382c:	f1b9 0f01 	cmp.w	r9, #1
 8003830:	d10b      	bne.n	800384a <HAL_SPI_TransmitReceive+0x1fe>
      if (hspi->TxXferCount > 1U)
 8003832:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d90d      	bls.n	8003856 <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800383a:	f836 3b02 	ldrh.w	r3, [r6], #2
 800383e:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 8003840:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003842:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003844:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8003846:	b29b      	uxth	r3, r3
 8003848:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800384a:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800384c:	f001 0604 	and.w	r6, r1, #4
 8003850:	f000 0908 	and.w	r9, r0, #8
 8003854:	e03c      	b.n	80038d0 <HAL_SPI_TransmitReceive+0x284>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003856:	7833      	ldrb	r3, [r6, #0]
 8003858:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 800385a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800385c:	3301      	adds	r3, #1
 800385e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003860:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003862:	3b01      	subs	r3, #1
 8003864:	e7ef      	b.n	8003846 <HAL_SPI_TransmitReceive+0x1fa>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003866:	6821      	ldr	r1, [r4, #0]
 8003868:	688b      	ldr	r3, [r1, #8]
 800386a:	079a      	lsls	r2, r3, #30
 800386c:	d505      	bpl.n	800387a <HAL_SPI_TransmitReceive+0x22e>
 800386e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003870:	b29b      	uxth	r3, r3
 8003872:	b113      	cbz	r3, 800387a <HAL_SPI_TransmitReceive+0x22e>
 8003874:	2d00      	cmp	r5, #0
 8003876:	d135      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x298>
        txallowed = 0U;
 8003878:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800387a:	6821      	ldr	r1, [r4, #0]
 800387c:	688b      	ldr	r3, [r1, #8]
 800387e:	f013 0301 	ands.w	r3, r3, #1
 8003882:	d01d      	beq.n	80038c0 <HAL_SPI_TransmitReceive+0x274>
 8003884:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003888:	b292      	uxth	r2, r2
 800388a:	b1ca      	cbz	r2, 80038c0 <HAL_SPI_TransmitReceive+0x274>
        if (hspi->RxXferCount > 1U)
 800388c:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003890:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 8003892:	b280      	uxth	r0, r0
 8003894:	2801      	cmp	r0, #1
 8003896:	d950      	bls.n	800393a <HAL_SPI_TransmitReceive+0x2ee>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003898:	68c8      	ldr	r0, [r1, #12]
 800389a:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800389e:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80038a0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80038a4:	3a02      	subs	r2, #2
 80038a6:	b292      	uxth	r2, r2
 80038a8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80038ac:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80038b0:	b292      	uxth	r2, r2
 80038b2:	2a01      	cmp	r2, #1
 80038b4:	d803      	bhi.n	80038be <HAL_SPI_TransmitReceive+0x272>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038b6:	684a      	ldr	r2, [r1, #4]
 80038b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038bc:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 80038be:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038c0:	f7fe fc0a 	bl	80020d8 <HAL_GetTick>
 80038c4:	eba0 0008 	sub.w	r0, r0, r8
 80038c8:	42b8      	cmp	r0, r7
 80038ca:	d342      	bcc.n	8003952 <HAL_SPI_TransmitReceive+0x306>
 80038cc:	1c7b      	adds	r3, r7, #1
 80038ce:	d185      	bne.n	80037dc <HAL_SPI_TransmitReceive+0x190>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1c6      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x21a>
 80038d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1c1      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x21a>
 80038e2:	e73b      	b.n	800375c <HAL_SPI_TransmitReceive+0x110>
        if (hspi->TxXferCount > 1U)
 80038e4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80038e8:	b292      	uxth	r2, r2
 80038ea:	2a01      	cmp	r2, #1
 80038ec:	d91d      	bls.n	800392a <HAL_SPI_TransmitReceive+0x2de>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ee:	f833 2b02 	ldrh.w	r2, [r3], #2
 80038f2:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80038f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038f8:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80038fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1b8      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x22c>
 8003906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390c:	d1b4      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x22c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800390e:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003910:	b936      	cbnz	r6, 8003920 <HAL_SPI_TransmitReceive+0x2d4>
 8003912:	f1b9 0f00 	cmp.w	r9, #0
 8003916:	d003      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x2d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391e:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e7a6      	b.n	8003878 <HAL_SPI_TransmitReceive+0x22c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 800392e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003930:	3301      	adds	r3, #1
 8003932:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003934:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003936:	3b01      	subs	r3, #1
 8003938:	e7df      	b.n	80038fa <HAL_SPI_TransmitReceive+0x2ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800393a:	7b09      	ldrb	r1, [r1, #12]
 800393c:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 800393e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003940:	3201      	adds	r2, #1
 8003942:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003944:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003948:	3a01      	subs	r2, #1
 800394a:	b292      	uxth	r2, r2
 800394c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8003950:	e7b5      	b.n	80038be <HAL_SPI_TransmitReceive+0x272>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003952:	2f00      	cmp	r7, #0
 8003954:	d1bc      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x284>
 8003956:	e741      	b.n	80037dc <HAL_SPI_TransmitReceive+0x190>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003958:	68e3      	ldr	r3, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 800395a:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800395c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003960:	d11b      	bne.n	800399a <HAL_SPI_TransmitReceive+0x34e>
      tmpreg = READ_REG(hspi->Instance->DR);
 8003962:	68eb      	ldr	r3, [r5, #12]
 8003964:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8003966:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003968:	6822      	ldr	r2, [r4, #0]
 800396a:	6895      	ldr	r5, [r2, #8]
 800396c:	f015 0510 	ands.w	r5, r5, #16
 8003970:	d007      	beq.n	8003982 <HAL_SPI_TransmitReceive+0x336>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003972:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800397a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800397e:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8003980:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003982:	4642      	mov	r2, r8
 8003984:	4639      	mov	r1, r7
 8003986:	4620      	mov	r0, r4
 8003988:	f7ff fd9b 	bl	80034c2 <SPI_EndRxTxTransaction>
 800398c:	2800      	cmp	r0, #0
 800398e:	f43f af26 	beq.w	80037de <HAL_SPI_TransmitReceive+0x192>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003992:	2320      	movs	r3, #32
 8003994:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003996:	2501      	movs	r5, #1
 8003998:	e721      	b.n	80037de <HAL_SPI_TransmitReceive+0x192>
      tmpreg8 = *ptmpreg8;
 800399a:	7b2b      	ldrb	r3, [r5, #12]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 80039a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80039a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d1dd      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x31c>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80039ac:	2201      	movs	r2, #1
 80039ae:	f8cd 8000 	str.w	r8, [sp]
 80039b2:	463b      	mov	r3, r7
 80039b4:	4611      	mov	r1, r2
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7ff fc80 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 80039bc:	2800      	cmp	r0, #0
 80039be:	f47f aedd 	bne.w	800377c <HAL_SPI_TransmitReceive+0x130>
        tmpreg8 = *ptmpreg8;
 80039c2:	7b2b      	ldrb	r3, [r5, #12]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 80039ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80039ce:	e7cb      	b.n	8003968 <HAL_SPI_TransmitReceive+0x31c>
    errorcode = HAL_BUSY;
 80039d0:	2502      	movs	r5, #2
 80039d2:	e704      	b.n	80037de <HAL_SPI_TransmitReceive+0x192>
  __HAL_LOCK(hspi);
 80039d4:	2502      	movs	r5, #2
 80039d6:	e708      	b.n	80037ea <HAL_SPI_TransmitReceive+0x19e>

080039d8 <HAL_SPI_Receive>:
{
 80039d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80039dc:	461e      	mov	r6, r3
  __IO uint32_t tmpreg = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 80039e2:	f88d 300b 	strb.w	r3, [sp, #11]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039e6:	6843      	ldr	r3, [r0, #4]
 80039e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80039ec:	4604      	mov	r4, r0
 80039ee:	4688      	mov	r8, r1
 80039f0:	4615      	mov	r5, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039f2:	d10c      	bne.n	8003a0e <HAL_SPI_Receive+0x36>
 80039f4:	6883      	ldr	r3, [r0, #8]
 80039f6:	b953      	cbnz	r3, 8003a0e <HAL_SPI_Receive+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039f8:	2304      	movs	r3, #4
 80039fa:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039fe:	4613      	mov	r3, r2
 8003a00:	9600      	str	r6, [sp, #0]
 8003a02:	460a      	mov	r2, r1
 8003a04:	f7ff fe22 	bl	800364c <HAL_SPI_TransmitReceive>
}
 8003a08:	b004      	add	sp, #16
 8003a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8003a0e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	f000 8102 	beq.w	8003c1c <HAL_SPI_Receive+0x244>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003a1e:	f7fe fb5b 	bl	80020d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003a22:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003a26:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003a28:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003a2a:	b2d8      	uxtb	r0, r3
 8003a2c:	f040 80f4 	bne.w	8003c18 <HAL_SPI_Receive+0x240>
  if ((pData == NULL) || (Size == 0U))
 8003a30:	f1b8 0f00 	cmp.w	r8, #0
 8003a34:	f000 809f 	beq.w	8003b76 <HAL_SPI_Receive+0x19e>
 8003a38:	2d00      	cmp	r5, #0
 8003a3a:	f000 809c 	beq.w	8003b76 <HAL_SPI_Receive+0x19e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a3e:	2304      	movs	r3, #4
 8003a40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferSize  = Size;
 8003a46:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a4a:	2000      	movs	r0, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a50:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8003a52:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8003a56:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a5a:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    SPI_RESET_CRC(hspi);
 8003a5e:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a60:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003a62:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003a64:	87e0      	strh	r0, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a66:	d10d      	bne.n	8003a84 <HAL_SPI_Receive+0xac>
    SPI_RESET_CRC(hspi);
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a6e:	602b      	str	r3, [r5, #0]
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a76:	602b      	str	r3, [r5, #0]
    hspi->RxXferCount--;
 8003a78:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a84:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a86:	686b      	ldr	r3, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a88:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a8c:	bf8c      	ite	hi
 8003a8e:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a92:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8003a96:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a98:	68a3      	ldr	r3, [r4, #8]
 8003a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a9e:	d107      	bne.n	8003ab0 <HAL_SPI_Receive+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8003aa0:	682b      	ldr	r3, [r5, #0]
 8003aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa6:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aae:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003ab4:	bf5e      	ittt	pl
 8003ab6:	682b      	ldrpl	r3, [r5, #0]
 8003ab8:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003abc:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003abe:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8003ac2:	d923      	bls.n	8003b0c <HAL_SPI_Receive+0x134>
    while (hspi->RxXferCount > 0U)
 8003ac4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	b323      	cbz	r3, 8003b16 <HAL_SPI_Receive+0x13e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	07d1      	lsls	r1, r2, #31
 8003ad2:	d55a      	bpl.n	8003b8a <HAL_SPI_Receive+0x1b2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ad8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003adc:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003ade:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003aea:	e7eb      	b.n	8003ac4 <HAL_SPI_Receive+0xec>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	07d5      	lsls	r5, r2, #31
 8003af2:	d538      	bpl.n	8003b66 <HAL_SPI_Receive+0x18e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003af4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003af6:	7b1b      	ldrb	r3, [r3, #12]
 8003af8:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003afc:	3301      	adds	r3, #1
 8003afe:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003b00:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8003b0c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ea      	bne.n	8003aec <HAL_SPI_Receive+0x114>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1c:	d148      	bne.n	8003bb0 <HAL_SPI_Receive+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003b1e:	6822      	ldr	r2, [r4, #0]
 8003b20:	6813      	ldr	r3, [r2, #0]
 8003b22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b26:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	9700      	str	r7, [sp, #0]
 8003b2c:	4633      	mov	r3, r6
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4620      	mov	r0, r4
 8003b32:	f7ff fbc3 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 8003b36:	b9e8      	cbnz	r0, 8003b74 <HAL_SPI_Receive+0x19c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b38:	68e1      	ldr	r1, [r4, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b3e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b42:	bf8b      	itete	hi
 8003b44:	68d2      	ldrhi	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b46:	7b12      	ldrbls	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b48:	801a      	strhhi	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b4a:	701a      	strbls	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	9700      	str	r7, [sp, #0]
 8003b50:	4633      	mov	r3, r6
 8003b52:	4611      	mov	r1, r2
 8003b54:	4620      	mov	r0, r4
 8003b56:	f7ff fbb1 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 8003b5a:	b308      	cbz	r0, 8003ba0 <HAL_SPI_Receive+0x1c8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003b5c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b5e:	f043 0302 	orr.w	r3, r3, #2
 8003b62:	6623      	str	r3, [r4, #96]	; 0x60
 8003b64:	e006      	b.n	8003b74 <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b66:	f7fe fab7 	bl	80020d8 <HAL_GetTick>
 8003b6a:	1bc0      	subs	r0, r0, r7
 8003b6c:	42b0      	cmp	r0, r6
 8003b6e:	d309      	bcc.n	8003b84 <HAL_SPI_Receive+0x1ac>
 8003b70:	1c70      	adds	r0, r6, #1
 8003b72:	d0cb      	beq.n	8003b0c <HAL_SPI_Receive+0x134>
          errorcode = HAL_TIMEOUT;
 8003b74:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8003b82:	e741      	b.n	8003a08 <HAL_SPI_Receive+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b84:	2e00      	cmp	r6, #0
 8003b86:	d1c1      	bne.n	8003b0c <HAL_SPI_Receive+0x134>
 8003b88:	e7f4      	b.n	8003b74 <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b8a:	f7fe faa5 	bl	80020d8 <HAL_GetTick>
 8003b8e:	1bc0      	subs	r0, r0, r7
 8003b90:	42b0      	cmp	r0, r6
 8003b92:	d302      	bcc.n	8003b9a <HAL_SPI_Receive+0x1c2>
 8003b94:	1c72      	adds	r2, r6, #1
 8003b96:	d095      	beq.n	8003ac4 <HAL_SPI_Receive+0xec>
 8003b98:	e7ec      	b.n	8003b74 <HAL_SPI_Receive+0x19c>
 8003b9a:	2e00      	cmp	r6, #0
 8003b9c:	d192      	bne.n	8003ac4 <HAL_SPI_Receive+0xec>
 8003b9e:	e7e9      	b.n	8003b74 <HAL_SPI_Receive+0x19c>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ba0:	68e2      	ldr	r2, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 8003ba2:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ba4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8003ba8:	d11a      	bne.n	8003be0 <HAL_SPI_Receive+0x208>
      tmpreg = READ_REG(hspi->Instance->DR);
 8003baa:	68eb      	ldr	r3, [r5, #12]
 8003bac:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8003bae:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb0:	463a      	mov	r2, r7
 8003bb2:	4631      	mov	r1, r6
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7ff fc49 	bl	800344c <SPI_EndRxTransaction>
 8003bba:	b108      	cbz	r0, 8003bc0 <HAL_SPI_Receive+0x1e8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003bc0:	6822      	ldr	r2, [r4, #0]
 8003bc2:	6893      	ldr	r3, [r2, #8]
 8003bc4:	06db      	lsls	r3, r3, #27
 8003bc6:	d506      	bpl.n	8003bd6 <HAL_SPI_Receive+0x1fe>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003bc8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003bd0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003bd4:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8003bd8:	3800      	subs	r0, #0
 8003bda:	bf18      	it	ne
 8003bdc:	2001      	movne	r0, #1
error :
 8003bde:	e7ca      	b.n	8003b76 <HAL_SPI_Receive+0x19e>
      tmpreg8 = *ptmpreg8;
 8003be0:	7b2b      	ldrb	r3, [r5, #12]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f88d 300b 	strb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003be8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg8);
 8003bec:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003bf0:	d1de      	bne.n	8003bb0 <HAL_SPI_Receive+0x1d8>
 8003bf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d1db      	bne.n	8003bb0 <HAL_SPI_Receive+0x1d8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	9700      	str	r7, [sp, #0]
 8003bfc:	4633      	mov	r3, r6
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7ff fb5b 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d1a8      	bne.n	8003b5c <HAL_SPI_Receive+0x184>
        tmpreg8 = *ptmpreg8;
 8003c0a:	7b2b      	ldrb	r3, [r5, #12]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8003c12:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003c16:	e7cb      	b.n	8003bb0 <HAL_SPI_Receive+0x1d8>
    errorcode = HAL_BUSY;
 8003c18:	2002      	movs	r0, #2
 8003c1a:	e7ac      	b.n	8003b76 <HAL_SPI_Receive+0x19e>
  __HAL_LOCK(hspi);
 8003c1c:	2002      	movs	r0, #2
 8003c1e:	e6f3      	b.n	8003a08 <HAL_SPI_Receive+0x30>

08003c20 <HAL_SPI_Transmit_IT>:
{
 8003c20:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8003c22:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8003c26:	2801      	cmp	r0, #1
 8003c28:	d04d      	beq.n	8003cc6 <HAL_SPI_Transmit_IT+0xa6>
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 8003c30:	2900      	cmp	r1, #0
 8003c32:	d040      	beq.n	8003cb6 <HAL_SPI_Transmit_IT+0x96>
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d03e      	beq.n	8003cb6 <HAL_SPI_Transmit_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003c38:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8003c3c:	2801      	cmp	r0, #1
 8003c3e:	d13e      	bne.n	8003cbe <HAL_SPI_Transmit_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c40:	2003      	movs	r0, #3
 8003c42:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c46:	2000      	movs	r0, #0
 8003c48:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c4a:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 8003c4e:	491f      	ldr	r1, [pc, #124]	; (8003ccc <HAL_SPI_Transmit_IT+0xac>)
  hspi->TxXferSize  = Size;
 8003c50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c52:	6418      	str	r0, [r3, #64]	; 0x40
    hspi->TxISR = SPI_TxISR_8BIT;
 8003c54:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <HAL_SPI_Transmit_IT+0xb0>)
  hspi->RxXferSize  = 0U;
 8003c56:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c5a:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8003c5e:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c60:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 8003c62:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003c66:	bf98      	it	ls
 8003c68:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6a:	6899      	ldr	r1, [r3, #8]
 8003c6c:	651a      	str	r2, [r3, #80]	; 0x50
 8003c6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 8003c72:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c74:	d107      	bne.n	8003c86 <HAL_SPI_Transmit_IT+0x66>
    __HAL_SPI_DISABLE(hspi);
 8003c76:	6811      	ldr	r1, [r2, #0]
 8003c78:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003c7c:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003c7e:	6811      	ldr	r1, [r2, #0]
 8003c80:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003c84:	6011      	str	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c86:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003c88:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003c8c:	d107      	bne.n	8003c9e <HAL_SPI_Transmit_IT+0x7e>
    SPI_RESET_CRC(hspi);
 8003c8e:	6811      	ldr	r1, [r2, #0]
 8003c90:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003c94:	6011      	str	r1, [r2, #0]
 8003c96:	6811      	ldr	r1, [r2, #0]
 8003c98:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8003c9c:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003c9e:	6851      	ldr	r1, [r2, #4]
 8003ca0:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8003ca4:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca6:	6810      	ldr	r0, [r2, #0]
 8003ca8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003cac:	d109      	bne.n	8003cc2 <HAL_SPI_Transmit_IT+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8003cae:	6811      	ldr	r1, [r2, #0]
 8003cb0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003cb4:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cbc:	4770      	bx	lr
    errorcode = HAL_BUSY;
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	e7f9      	b.n	8003cb6 <HAL_SPI_Transmit_IT+0x96>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	e7f7      	b.n	8003cb6 <HAL_SPI_Transmit_IT+0x96>
  __HAL_LOCK(hspi);
 8003cc6:	2002      	movs	r0, #2
}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	08003f27 	.word	0x08003f27
 8003cd0:	08003f5b 	.word	0x08003f5b

08003cd4 <HAL_SPI_TransmitReceive_IT>:
{
 8003cd4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 8003cd6:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8003cda:	2c01      	cmp	r4, #1
 8003cdc:	d070      	beq.n	8003dc0 <HAL_SPI_TransmitReceive_IT+0xec>
 8003cde:	2401      	movs	r4, #1
 8003ce0:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 8003ce4:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ce8:	2c01      	cmp	r4, #1
  tmp_state           = hspi->State;
 8003cea:	b2e5      	uxtb	r5, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cec:	d008      	beq.n	8003d00 <HAL_SPI_TransmitReceive_IT+0x2c>
 8003cee:	6844      	ldr	r4, [r0, #4]
 8003cf0:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8003cf4:	d15e      	bne.n	8003db4 <HAL_SPI_TransmitReceive_IT+0xe0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cf6:	6884      	ldr	r4, [r0, #8]
 8003cf8:	2c00      	cmp	r4, #0
 8003cfa:	d15b      	bne.n	8003db4 <HAL_SPI_TransmitReceive_IT+0xe0>
 8003cfc:	2d04      	cmp	r5, #4
 8003cfe:	d159      	bne.n	8003db4 <HAL_SPI_TransmitReceive_IT+0xe0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d00:	2900      	cmp	r1, #0
 8003d02:	d059      	beq.n	8003db8 <HAL_SPI_TransmitReceive_IT+0xe4>
 8003d04:	2a00      	cmp	r2, #0
 8003d06:	d057      	beq.n	8003db8 <HAL_SPI_TransmitReceive_IT+0xe4>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d055      	beq.n	8003db8 <HAL_SPI_TransmitReceive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d0c:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d10:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d12:	2c04      	cmp	r4, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d14:	68c1      	ldr	r1, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d16:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d18:	bf1c      	itt	ne
 8003d1a:	2405      	movne	r4, #5
 8003d1c:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d20:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003d24:	bf8b      	itete	hi
 8003d26:	4a27      	ldrhi	r2, [pc, #156]	; (8003dc4 <HAL_SPI_TransmitReceive_IT+0xf0>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003d28:	4a27      	ldrls	r2, [pc, #156]	; (8003dc8 <HAL_SPI_TransmitReceive_IT+0xf4>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003d2a:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003d2c:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003d2e:	bf8c      	ite	hi
 8003d30:	4a26      	ldrhi	r2, [pc, #152]	; (8003dcc <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003d32:	4a27      	ldrls	r2, [pc, #156]	; (8003dd0 <HAL_SPI_TransmitReceive_IT+0xfc>)
 8003d34:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d36:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->TxXferSize  = Size;
 8003d38:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d3a:	2400      	movs	r4, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d3c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d40:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 8003d42:	6802      	ldr	r2, [r0, #0]
 8003d44:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d46:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003d4a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d4e:	d12a      	bne.n	8003da6 <HAL_SPI_TransmitReceive_IT+0xd2>
    hspi->CRCSize = 1U;
 8003d50:	2401      	movs	r4, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003d52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8003d56:	6484      	str	r4, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003d58:	d803      	bhi.n	8003d62 <HAL_SPI_TransmitReceive_IT+0x8e>
 8003d5a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003d5c:	2c02      	cmp	r4, #2
      hspi->CRCSize = 2U;
 8003d5e:	bf08      	it	eq
 8003d60:	6484      	streq	r4, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8003d62:	6814      	ldr	r4, [r2, #0]
 8003d64:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8003d68:	6014      	str	r4, [r2, #0]
 8003d6a:	6814      	ldr	r4, [r2, #0]
 8003d6c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8003d70:	6014      	str	r4, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003d72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003d76:	d801      	bhi.n	8003d7c <HAL_SPI_TransmitReceive_IT+0xa8>
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d017      	beq.n	8003dac <HAL_SPI_TransmitReceive_IT+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d7c:	6853      	ldr	r3, [r2, #4]
 8003d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d82:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d84:	6853      	ldr	r3, [r2, #4]
 8003d86:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003d8a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003d92:	d113      	bne.n	8003dbc <HAL_SPI_TransmitReceive_IT+0xe8>
    __HAL_SPI_ENABLE(hspi);
 8003d94:	6811      	ldr	r1, [r2, #0]
 8003d96:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003d9a:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 8003da6:	2400      	movs	r4, #0
 8003da8:	6484      	str	r4, [r0, #72]	; 0x48
 8003daa:	e7e2      	b.n	8003d72 <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dac:	6853      	ldr	r3, [r2, #4]
 8003dae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003db2:	e7e6      	b.n	8003d82 <HAL_SPI_TransmitReceive_IT+0xae>
    errorcode = HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
 8003db6:	e7f1      	b.n	8003d9c <HAL_SPI_TransmitReceive_IT+0xc8>
    errorcode = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e7ef      	b.n	8003d9c <HAL_SPI_TransmitReceive_IT+0xc8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e7ed      	b.n	8003d9c <HAL_SPI_TransmitReceive_IT+0xc8>
  __HAL_LOCK(hspi);
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e7ee      	b.n	8003da2 <HAL_SPI_TransmitReceive_IT+0xce>
 8003dc4:	080042bd 	.word	0x080042bd
 8003dc8:	080041ad 	.word	0x080041ad
 8003dcc:	08004267 	.word	0x08004267
 8003dd0:	08004147 	.word	0x08004147

08003dd4 <HAL_SPI_Receive_IT>:
{
 8003dd4:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003dd6:	6886      	ldr	r6, [r0, #8]
{
 8003dd8:	4604      	mov	r4, r0
 8003dda:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003ddc:	b95e      	cbnz	r6, 8003df6 <HAL_SPI_Receive_IT+0x22>
 8003dde:	6843      	ldr	r3, [r0, #4]
 8003de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de4:	d107      	bne.n	8003df6 <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003de6:	2304      	movs	r3, #4
 8003de8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 8003dec:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003dee:	4613      	mov	r3, r2
 8003df0:	460a      	mov	r2, r1
 8003df2:	f7ff bf6f 	b.w	8003cd4 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 8003df6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d061      	beq.n	8003ec2 <HAL_SPI_Receive_IT+0xee>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8003e04:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	b2d8      	uxtb	r0, r3
 8003e0c:	d155      	bne.n	8003eba <HAL_SPI_Receive_IT+0xe6>
  if ((pData == NULL) || (Size == 0U))
 8003e0e:	2d00      	cmp	r5, #0
 8003e10:	d04b      	beq.n	8003eaa <HAL_SPI_Receive_IT+0xd6>
 8003e12:	2a00      	cmp	r2, #0
 8003e14:	d049      	beq.n	8003eaa <HAL_SPI_Receive_IT+0xd6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e16:	2304      	movs	r3, #4
 8003e18:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e20:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e22:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 8003e26:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e28:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e2a:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e2c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e2e:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 8003e30:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e34:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e36:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e3c:	bf8b      	itete	hi
 8003e3e:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e42:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e46:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e48:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003e4a:	bf8c      	ite	hi
 8003e4c:	4a1e      	ldrhi	r2, [pc, #120]	; (8003ec8 <HAL_SPI_Receive_IT+0xf4>)
    hspi->RxISR = SPI_RxISR_8BIT;
 8003e4e:	4a1f      	ldrls	r2, [pc, #124]	; (8003ecc <HAL_SPI_Receive_IT+0xf8>)
 8003e50:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e52:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8003e56:	d107      	bne.n	8003e68 <HAL_SPI_Receive_IT+0x94>
    __HAL_SPI_DISABLE(hspi);
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e66:	601a      	str	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003e6a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e6e:	d121      	bne.n	8003eb4 <HAL_SPI_Receive_IT+0xe0>
    hspi->CRCSize = 1U;
 8003e70:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003e72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8003e76:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003e78:	d803      	bhi.n	8003e82 <HAL_SPI_Receive_IT+0xae>
 8003e7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003e7c:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 8003e7e:	bf08      	it	eq
 8003e80:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e90:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003e98:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003ea0:	d10d      	bne.n	8003ebe <HAL_SPI_Receive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea8:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003eb0:	bc70      	pop	{r4, r5, r6}
 8003eb2:	4770      	bx	lr
    hspi->CRCSize = 0U;
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	64a2      	str	r2, [r4, #72]	; 0x48
 8003eb8:	e7eb      	b.n	8003e92 <HAL_SPI_Receive_IT+0xbe>
    errorcode = HAL_BUSY;
 8003eba:	2002      	movs	r0, #2
 8003ebc:	e7f5      	b.n	8003eaa <HAL_SPI_Receive_IT+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	e7f3      	b.n	8003eaa <HAL_SPI_Receive_IT+0xd6>
  __HAL_LOCK(hspi);
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	e7f4      	b.n	8003eb0 <HAL_SPI_Receive_IT+0xdc>
 8003ec6:	bf00      	nop
 8003ec8:	08004065 	.word	0x08004065
 8003ecc:	08003fe5 	.word	0x08003fe5

08003ed0 <HAL_SPI_TxRxCpltCallback>:
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_SPI_ErrorCallback>:
 8003ed2:	4770      	bx	lr

08003ed4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003ed4:	b513      	push	{r0, r1, r4, lr}
 8003ed6:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed8:	f7fe f8fe 	bl	80020d8 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003edc:	6821      	ldr	r1, [r4, #0]
 8003ede:	684b      	ldr	r3, [r1, #4]
 8003ee0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 8003ee4:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003ee6:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ee8:	4620      	mov	r0, r4
 8003eea:	2164      	movs	r1, #100	; 0x64
 8003eec:	f7ff fae9 	bl	80034c2 <SPI_EndRxTxTransaction>
 8003ef0:	b118      	cbz	r0, 8003efa <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ef4:	f043 0320 	orr.w	r3, r3, #32
 8003ef8:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003efa:	68a3      	ldr	r3, [r4, #8]
 8003efc:	b933      	cbnz	r3, 8003f0c <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	9201      	str	r2, [sp, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f12:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003f14:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f16:	b11b      	cbz	r3, 8003f20 <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 8003f18:	f7ff ffdb 	bl	8003ed2 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 8003f20:	f7fd fd56 	bl	80019d0 <HAL_SPI_TxCpltCallback>
}
 8003f24:	e7fa      	b.n	8003f1c <SPI_CloseTx_ISR+0x48>

08003f26 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f26:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003f28:	6803      	ldr	r3, [r0, #0]
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8003f2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f30:	3301      	adds	r3, #1
 8003f32:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8003f34:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003f3c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	b953      	cbnz	r3, 8003f58 <SPI_TxISR_8BIT+0x32>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003f48:	bf01      	itttt	eq
 8003f4a:	6802      	ldreq	r2, [r0, #0]
 8003f4c:	6813      	ldreq	r3, [r2, #0]
 8003f4e:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003f52:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8003f54:	f7ff bfbe 	b.w	8003ed4 <SPI_CloseTx_ISR>
}
 8003f58:	4770      	bx	lr

08003f5a <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f5c:	6802      	ldr	r2, [r0, #0]
 8003f5e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003f62:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f64:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8003f66:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003f6e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	b94b      	cbnz	r3, 8003f88 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f74:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003f7a:	bf02      	ittt	eq
 8003f7c:	6813      	ldreq	r3, [r2, #0]
 8003f7e:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003f82:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8003f84:	f7ff bfa6 	b.w	8003ed4 <SPI_CloseTx_ISR>
}
 8003f88:	4770      	bx	lr

08003f8a <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003f8a:	6802      	ldr	r2, [r0, #0]
 8003f8c:	6853      	ldr	r3, [r2, #4]
 8003f8e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 8003f92:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003f94:	6053      	str	r3, [r2, #4]
{
 8003f96:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003f98:	f7fe f89e 	bl	80020d8 <HAL_GetTick>
 8003f9c:	2164      	movs	r1, #100	; 0x64
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f7ff fa53 	bl	800344c <SPI_EndRxTransaction>
 8003fa6:	b118      	cbz	r0, 8003fb0 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003faa:	f043 0320 	orr.w	r3, r3, #32
 8003fae:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003fb0:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003fb2:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 8003fb4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003fb8:	6893      	ldr	r3, [r2, #8]
 8003fba:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003fbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003fc0:	d009      	beq.n	8003fd6 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003fc8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003fcc:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 8003fce:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 8003fd0:	f7ff ff7f 	bl	8003ed2 <HAL_SPI_ErrorCallback>
}
 8003fd4:	e004      	b.n	8003fe0 <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 8003fd6:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f9      	bne.n	8003fd0 <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 8003fdc:	f7fd fcf0 	bl	80019c0 <HAL_SPI_RxCpltCallback>
}
 8003fe0:	bd10      	pop	{r4, pc}
	...

08003fe4 <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003fe4:	6802      	ldr	r2, [r0, #0]
 8003fe6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003fe8:	7b12      	ldrb	r2, [r2, #12]
 8003fea:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003fec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003fee:	3301      	adds	r3, #1
 8003ff0:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003ff2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003ffe:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d108      	bne.n	800401a <SPI_RxISR_8BIT+0x36>
 8004008:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800400e:	bf01      	itttt	eq
 8004010:	6802      	ldreq	r2, [r0, #0]
 8004012:	6813      	ldreq	r3, [r2, #0]
 8004014:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004018:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 800401a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800401e:	b29b      	uxth	r3, r3
 8004020:	b943      	cbnz	r3, 8004034 <SPI_RxISR_8BIT+0x50>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004022:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004028:	d102      	bne.n	8004030 <SPI_RxISR_8BIT+0x4c>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 800402a:	4b03      	ldr	r3, [pc, #12]	; (8004038 <SPI_RxISR_8BIT+0x54>)
 800402c:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800402e:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8004030:	f7ff bfab 	b.w	8003f8a <SPI_CloseRx_ISR>
}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	0800403d 	.word	0x0800403d

0800403c <SPI_RxISR_8BITCRC>:
{
 800403c:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 800403e:	2200      	movs	r2, #0
 8004040:	f88d 2007 	strb.w	r2, [sp, #7]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004044:	6802      	ldr	r2, [r0, #0]
  tmpreg8 = *ptmpreg8;
 8004046:	7b12      	ldrb	r2, [r2, #12]
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg8);
 800404e:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 8004052:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004054:	3a01      	subs	r2, #1
 8004056:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8004058:	b912      	cbnz	r2, 8004060 <SPI_RxISR_8BITCRC+0x24>
}
 800405a:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 800405c:	f7ff bf95 	b.w	8003f8a <SPI_CloseRx_ISR>
}
 8004060:	b002      	add	sp, #8
 8004062:	4770      	bx	lr

08004064 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004064:	6802      	ldr	r2, [r0, #0]
 8004066:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004068:	68d1      	ldr	r1, [r2, #12]
 800406a:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800406e:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8004070:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004074:	3b01      	subs	r3, #1
 8004076:	b29b      	uxth	r3, r3
 8004078:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800407c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d107      	bne.n	8004096 <SPI_RxISR_16BIT+0x32>
 8004086:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800408c:	bf02      	ittt	eq
 800408e:	6813      	ldreq	r3, [r2, #0]
 8004090:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004094:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8004096:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800409a:	b29b      	uxth	r3, r3
 800409c:	b943      	cbnz	r3, 80040b0 <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800409e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80040a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a4:	d102      	bne.n	80040ac <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 80040a6:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <SPI_RxISR_16BIT+0x50>)
 80040a8:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 80040aa:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 80040ac:	f7ff bf6d 	b.w	8003f8a <SPI_CloseRx_ISR>
}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	080040b9 	.word	0x080040b9

080040b8 <SPI_RxISR_16BITCRC>:
{
 80040b8:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 80040be:	6803      	ldr	r3, [r0, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 80040c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040cc:	605a      	str	r2, [r3, #4]
}
 80040ce:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 80040d0:	f7ff bf5b 	b.w	8003f8a <SPI_CloseRx_ISR>

080040d4 <SPI_CloseRxTx_ISR>:
{
 80040d4:	b510      	push	{r4, lr}
 80040d6:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80040d8:	f7fd fffe 	bl	80020d8 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040dc:	6821      	ldr	r1, [r4, #0]
 80040de:	684b      	ldr	r3, [r1, #4]
 80040e0:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 80040e4:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040e6:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80040e8:	4620      	mov	r0, r4
 80040ea:	2164      	movs	r1, #100	; 0x64
 80040ec:	f7ff f9e9 	bl	80034c2 <SPI_EndRxTxTransaction>
 80040f0:	b118      	cbz	r0, 80040fa <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80040f4:	f043 0320 	orr.w	r3, r3, #32
 80040f8:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	6893      	ldr	r3, [r2, #8]
 80040fe:	f013 0f10 	tst.w	r3, #16
 8004102:	f04f 0301 	mov.w	r3, #1
 8004106:	d00c      	beq.n	8004122 <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 8004108:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800410c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800410e:	f043 0302 	orr.w	r3, r3, #2
 8004112:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004114:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004118:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 800411a:	4620      	mov	r0, r4
 800411c:	f7ff fed9 	bl	8003ed2 <HAL_SPI_ErrorCallback>
}
 8004120:	e00a      	b.n	8004138 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004122:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004124:	b962      	cbnz	r2, 8004140 <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004126:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 800412a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800412e:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 8004130:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004132:	d102      	bne.n	800413a <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 8004134:	f7fd fc44 	bl	80019c0 <HAL_SPI_RxCpltCallback>
}
 8004138:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 800413a:	f7ff fec9 	bl	8003ed0 <HAL_SPI_TxRxCpltCallback>
 800413e:	e7fb      	b.n	8004138 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 8004140:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8004144:	e7e9      	b.n	800411a <SPI_CloseRxTx_ISR+0x46>

08004146 <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 8004146:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004148:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800414a:	6801      	ldr	r1, [r0, #0]
  if (hspi->TxXferCount >= 2U)
 800414c:	b292      	uxth	r2, r2
 800414e:	2a01      	cmp	r2, #1
 8004150:	d918      	bls.n	8004184 <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004152:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004156:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004158:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800415a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800415c:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 800415e:	b29b      	uxth	r3, r3
 8004160:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8004162:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004164:	b29b      	uxth	r3, r3
 8004166:	b9fb      	cbnz	r3, 80041a8 <SPI_2linesTxISR_8BIT+0x62>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004168:	6a82      	ldr	r2, [r0, #40]	; 0x28
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800416a:	6803      	ldr	r3, [r0, #0]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800416c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004170:	d110      	bne.n	8004194 <SPI_2linesTxISR_8BIT+0x4e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004178:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004180:	605a      	str	r2, [r3, #4]
      return;
 8004182:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	730b      	strb	r3, [r1, #12]
    hspi->pTxBuffPtr++;
 8004188:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800418a:	3301      	adds	r3, #1
 800418c:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 800418e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004190:	3b01      	subs	r3, #1
 8004192:	e7e4      	b.n	800415e <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800419a:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 800419c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	b90b      	cbnz	r3, 80041a8 <SPI_2linesTxISR_8BIT+0x62>
      SPI_CloseRxTx_ISR(hspi);
 80041a4:	f7ff bf96 	b.w	80040d4 <SPI_CloseRxTx_ISR>
}
 80041a8:	4770      	bx	lr
	...

080041ac <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 80041ac:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80041b0:	6802      	ldr	r2, [r0, #0]
 80041b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
  if (hspi->RxXferCount > 1U)
 80041b4:	b289      	uxth	r1, r1
 80041b6:	2901      	cmp	r1, #1
 80041b8:	d922      	bls.n	8004200 <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80041ba:	68d1      	ldr	r1, [r2, #12]
 80041bc:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80041c0:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80041c2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80041c6:	3b02      	subs	r3, #2
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80041ce:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d103      	bne.n	80041e0 <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041d8:	6853      	ldr	r3, [r2, #4]
 80041da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041de:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 80041e0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	b9fb      	cbnz	r3, 8004228 <SPI_2linesRxISR_8BIT+0x7c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041ea:	6803      	ldr	r3, [r0, #0]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041ec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f0:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f2:	d111      	bne.n	8004218 <SPI_2linesRxISR_8BIT+0x6c>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041f8:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <SPI_2linesRxISR_8BIT+0x80>)
 80041fc:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 80041fe:	4770      	bx	lr
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004200:	7b12      	ldrb	r2, [r2, #12]
 8004202:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004204:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004206:	3301      	adds	r3, #1
 8004208:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 800420a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800420e:	3b01      	subs	r3, #1
 8004210:	b29b      	uxth	r3, r3
 8004212:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8004216:	e7e3      	b.n	80041e0 <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004218:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800421c:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 800421e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004220:	b29b      	uxth	r3, r3
 8004222:	b90b      	cbnz	r3, 8004228 <SPI_2linesRxISR_8BIT+0x7c>
      SPI_CloseRxTx_ISR(hspi);
 8004224:	f7ff bf56 	b.w	80040d4 <SPI_CloseRxTx_ISR>
}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	08004231 	.word	0x08004231

08004230 <SPI_2linesRxISR_8BITCRC>:
{
 8004230:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 8004232:	2200      	movs	r2, #0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004234:	6801      	ldr	r1, [r0, #0]
  __IO uint8_t  tmpreg8 = 0;
 8004236:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg8 = *ptmpreg8;
 800423a:	7b0a      	ldrb	r2, [r1, #12]
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg8);
 8004242:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 8004246:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004248:	3a01      	subs	r2, #1
 800424a:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 800424c:	b94a      	cbnz	r2, 8004262 <SPI_2linesRxISR_8BITCRC+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800424e:	684a      	ldr	r2, [r1, #4]
 8004250:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004254:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8004256:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004258:	b29b      	uxth	r3, r3
 800425a:	b913      	cbnz	r3, 8004262 <SPI_2linesRxISR_8BITCRC+0x32>
}
 800425c:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 800425e:	f7ff bf39 	b.w	80040d4 <SPI_CloseRxTx_ISR>
}
 8004262:	b002      	add	sp, #8
 8004264:	4770      	bx	lr

08004266 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004266:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004268:	6802      	ldr	r2, [r0, #0]
{
 800426a:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800426c:	f831 4b02 	ldrh.w	r4, [r1], #2
 8004270:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004272:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8004274:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8004276:	3901      	subs	r1, #1
 8004278:	b289      	uxth	r1, r1
 800427a:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800427c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800427e:	b289      	uxth	r1, r1
 8004280:	b959      	cbnz	r1, 800429a <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004282:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004284:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004288:	d10a      	bne.n	80042a0 <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800428a:	6813      	ldr	r3, [r2, #0]
 800428c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004290:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004292:	6853      	ldr	r3, [r2, #4]
 8004294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004298:	6053      	str	r3, [r2, #4]
}
 800429a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800429e:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80042a0:	6851      	ldr	r1, [r2, #4]
 80042a2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80042a6:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80042a8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f3      	bne.n	800429a <SPI_2linesTxISR_16BIT+0x34>
}
 80042b2:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 80042b6:	f7ff bf0d 	b.w	80040d4 <SPI_CloseRxTx_ISR>
	...

080042bc <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80042bc:	6801      	ldr	r1, [r0, #0]
 80042be:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80042c0:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80042c2:	68cc      	ldr	r4, [r1, #12]
 80042c4:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80042c8:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 80042ca:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 80042ce:	3a01      	subs	r2, #1
 80042d0:	b292      	uxth	r2, r2
 80042d2:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80042d6:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 80042da:	b292      	uxth	r2, r2
 80042dc:	b92a      	cbnz	r2, 80042ea <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042de:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80042e0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80042e4:	d104      	bne.n	80042f0 <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <SPI_2linesRxISR_16BIT+0x4c>)
 80042e8:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 80042ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ee:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80042f0:	684a      	ldr	r2, [r1, #4]
 80042f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f6:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 80042f8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f4      	bne.n	80042ea <SPI_2linesRxISR_16BIT+0x2e>
}
 8004300:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8004304:	f7ff bee6 	b.w	80040d4 <SPI_CloseRxTx_ISR>
 8004308:	0800430d 	.word	0x0800430d

0800430c <SPI_2linesRxISR_16BITCRC>:
{
 800430c:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8004312:	6803      	ldr	r3, [r0, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8004318:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004320:	605a      	str	r2, [r3, #4]
}
 8004322:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 8004324:	f7ff bed6 	b.w	80040d4 <SPI_CloseRxTx_ISR>

08004328 <HAL_SPI_IRQHandler>:
{
 8004328:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800432a:	6803      	ldr	r3, [r0, #0]
 800432c:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800432e:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004330:	0656      	lsls	r6, r2, #25
{
 8004332:	b085      	sub	sp, #20
 8004334:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004336:	ea4f 1192 	mov.w	r1, r2, lsr #6
 800433a:	f3c2 1780 	ubfx	r7, r2, #6, #1
 800433e:	d408      	bmi.n	8004352 <HAL_SPI_IRQHandler+0x2a>
 8004340:	07d6      	lsls	r6, r2, #31
 8004342:	d506      	bpl.n	8004352 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004344:	066e      	lsls	r6, r5, #25
 8004346:	d504      	bpl.n	8004352 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8004348:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 800434a:	b005      	add	sp, #20
 800434c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8004350:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004352:	0796      	lsls	r6, r2, #30
 8004354:	d504      	bpl.n	8004360 <HAL_SPI_IRQHandler+0x38>
 8004356:	0628      	lsls	r0, r5, #24
 8004358:	d502      	bpl.n	8004360 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 800435a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800435c:	4620      	mov	r0, r4
 800435e:	e7f4      	b.n	800434a <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004360:	ea41 1152 	orr.w	r1, r1, r2, lsr #5
 8004364:	f3c2 2000 	ubfx	r0, r2, #8, #1
 8004368:	f001 0101 	and.w	r1, r1, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800436c:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800436e:	ea51 0200 	orrs.w	r2, r1, r0
 8004372:	d057      	beq.n	8004424 <HAL_SPI_IRQHandler+0xfc>
 8004374:	06aa      	lsls	r2, r5, #26
 8004376:	d555      	bpl.n	8004424 <HAL_SPI_IRQHandler+0xfc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004378:	b17f      	cbz	r7, 800439a <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800437a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800437e:	2a03      	cmp	r2, #3
 8004380:	f04f 0100 	mov.w	r1, #0
 8004384:	d048      	beq.n	8004418 <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004386:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004388:	f042 0204 	orr.w	r2, r2, #4
 800438c:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800438e:	9100      	str	r1, [sp, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	9200      	str	r2, [sp, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	9200      	str	r2, [sp, #0]
 8004398:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800439a:	07f1      	lsls	r1, r6, #31
 800439c:	d50c      	bpl.n	80043b8 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800439e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80043a6:	2200      	movs	r2, #0
 80043a8:	9202      	str	r2, [sp, #8]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	9202      	str	r2, [sp, #8]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80043b8:	b140      	cbz	r0, 80043cc <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80043ba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80043bc:	f042 0208 	orr.w	r2, r2, #8
 80043c0:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043c2:	2200      	movs	r2, #0
 80043c4:	9203      	str	r2, [sp, #12]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	9203      	str	r2, [sp, #12]
 80043ca:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80043ce:	b34a      	cbz	r2, 8004424 <HAL_SPI_IRQHandler+0xfc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043d6:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80043d8:	2201      	movs	r2, #1
 80043da:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80043de:	07aa      	lsls	r2, r5, #30
 80043e0:	d022      	beq.n	8004428 <HAL_SPI_IRQHandler+0x100>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043e2:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80043e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043e6:	f022 0203 	bic.w	r2, r2, #3
 80043ea:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80043ec:	b140      	cbz	r0, 8004400 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_SPI_IRQHandler+0x108>)
 80043f0:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80043f2:	f7fd fef1 	bl	80021d8 <HAL_DMA_Abort_IT>
 80043f6:	b118      	cbz	r0, 8004400 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043fe:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004400:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004402:	b178      	cbz	r0, 8004424 <HAL_SPI_IRQHandler+0xfc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_SPI_IRQHandler+0x108>)
 8004406:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004408:	f7fd fee6 	bl	80021d8 <HAL_DMA_Abort_IT>
 800440c:	b150      	cbz	r0, 8004424 <HAL_SPI_IRQHandler+0xfc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800440e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004414:	6623      	str	r3, [r4, #96]	; 0x60
 8004416:	e005      	b.n	8004424 <HAL_SPI_IRQHandler+0xfc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004418:	9101      	str	r1, [sp, #4]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	9201      	str	r2, [sp, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	9b01      	ldr	r3, [sp, #4]
}
 8004424:	b005      	add	sp, #20
 8004426:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8004428:	4620      	mov	r0, r4
 800442a:	f7ff fd52 	bl	8003ed2 <HAL_SPI_ErrorCallback>
 800442e:	e7f9      	b.n	8004424 <HAL_SPI_IRQHandler+0xfc>
 8004430:	08004435 	.word	0x08004435

08004434 <SPI_DMAAbortOnError>:
{
 8004434:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004436:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800443e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8004440:	f7ff fd47 	bl	8003ed2 <HAL_SPI_ErrorCallback>
}
 8004444:	bd08      	pop	{r3, pc}

08004446 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004446:	4770      	bx	lr

08004448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800444c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800444e:	6921      	ldr	r1, [r4, #16]
 8004450:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004452:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004454:	69c0      	ldr	r0, [r0, #28]
 8004456:	430a      	orrs	r2, r1
 8004458:	6961      	ldr	r1, [r4, #20]
 800445a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800445c:	4992      	ldr	r1, [pc, #584]	; (80046a8 <UART_SetConfig+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800445e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004460:	4029      	ands	r1, r5
 8004462:	430a      	orrs	r2, r1
 8004464:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	68e1      	ldr	r1, [r4, #12]
 800446a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004472:	4a8e      	ldr	r2, [pc, #568]	; (80046ac <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004474:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004476:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004478:	bf1c      	itt	ne
 800447a:	6a22      	ldrne	r2, [r4, #32]
 800447c:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004484:	430a      	orrs	r2, r1
 8004486:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004488:	4a89      	ldr	r2, [pc, #548]	; (80046b0 <UART_SetConfig+0x268>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d11b      	bne.n	80044c6 <UART_SetConfig+0x7e>
 800448e:	4b89      	ldr	r3, [pc, #548]	; (80046b4 <UART_SetConfig+0x26c>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	3b01      	subs	r3, #1
 800449a:	2b02      	cmp	r3, #2
 800449c:	f200 80d5 	bhi.w	800464a <UART_SetConfig+0x202>
 80044a0:	4a85      	ldr	r2, [pc, #532]	; (80046b8 <UART_SetConfig+0x270>)
 80044a2:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80044a8:	f040 809f 	bne.w	80045ea <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d828      	bhi.n	8004502 <UART_SetConfig+0xba>
 80044b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044b4:	00ce00df 	.word	0x00ce00df
 80044b8:	00270099 	.word	0x00270099
 80044bc:	002700d4 	.word	0x002700d4
 80044c0:	00270027 	.word	0x00270027
 80044c4:	00e3      	.short	0x00e3
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c6:	4a7d      	ldr	r2, [pc, #500]	; (80046bc <UART_SetConfig+0x274>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d108      	bne.n	80044de <UART_SetConfig+0x96>
 80044cc:	4b79      	ldr	r3, [pc, #484]	; (80046b4 <UART_SetConfig+0x26c>)
 80044ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044d2:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <UART_SetConfig+0x270>)
 80044d4:	f002 020c 	and.w	r2, r2, #12
 80044d8:	4413      	add	r3, r2
 80044da:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80044dc:	e7e2      	b.n	80044a4 <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044de:	4a78      	ldr	r2, [pc, #480]	; (80046c0 <UART_SetConfig+0x278>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d119      	bne.n	8004518 <UART_SetConfig+0xd0>
 80044e4:	4b73      	ldr	r3, [pc, #460]	; (80046b4 <UART_SetConfig+0x26c>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	f000 80b7 	beq.w	8004662 <UART_SetConfig+0x21a>
 80044f4:	d807      	bhi.n	8004506 <UART_SetConfig+0xbe>
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80b8 	beq.w	800466c <UART_SetConfig+0x224>
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	f000 80aa 	beq.w	8004656 <UART_SetConfig+0x20e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004502:	2001      	movs	r0, #1
 8004504:	e04e      	b.n	80045a4 <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004506:	2b30      	cmp	r3, #48	; 0x30
 8004508:	d1fb      	bne.n	8004502 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800450a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800450e:	f000 80b4 	beq.w	800467a <UART_SetConfig+0x232>
 8004512:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004516:	e083      	b.n	8004620 <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004518:	4a6a      	ldr	r2, [pc, #424]	; (80046c4 <UART_SetConfig+0x27c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10f      	bne.n	800453e <UART_SetConfig+0xf6>
 800451e:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <UART_SetConfig+0x26c>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	f000 809a 	beq.w	8004662 <UART_SetConfig+0x21a>
 800452e:	d804      	bhi.n	800453a <UART_SetConfig+0xf2>
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 809b 	beq.w	800466c <UART_SetConfig+0x224>
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	e7e1      	b.n	80044fe <UART_SetConfig+0xb6>
 800453a:	2bc0      	cmp	r3, #192	; 0xc0
 800453c:	e7e4      	b.n	8004508 <UART_SetConfig+0xc0>
 800453e:	4a62      	ldr	r2, [pc, #392]	; (80046c8 <UART_SetConfig+0x280>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d112      	bne.n	800456a <UART_SetConfig+0x122>
 8004544:	4b5b      	ldr	r3, [pc, #364]	; (80046b4 <UART_SetConfig+0x26c>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004552:	f000 8086 	beq.w	8004662 <UART_SetConfig+0x21a>
 8004556:	d805      	bhi.n	8004564 <UART_SetConfig+0x11c>
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8087 	beq.w	800466c <UART_SetConfig+0x224>
 800455e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004562:	e7cc      	b.n	80044fe <UART_SetConfig+0xb6>
 8004564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004568:	e7ce      	b.n	8004508 <UART_SetConfig+0xc0>
 800456a:	4a50      	ldr	r2, [pc, #320]	; (80046ac <UART_SetConfig+0x264>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d1c8      	bne.n	8004502 <UART_SetConfig+0xba>
 8004570:	4b50      	ldr	r3, [pc, #320]	; (80046b4 <UART_SetConfig+0x26c>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d015      	beq.n	80045ac <UART_SetConfig+0x164>
 8004580:	d806      	bhi.n	8004590 <UART_SetConfig+0x148>
 8004582:	b15b      	cbz	r3, 800459c <UART_SetConfig+0x154>
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004588:	d1bb      	bne.n	8004502 <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 800458a:	f7fe fafb 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
        break;
 800458e:	e007      	b.n	80045a0 <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004590:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004594:	d1b5      	bne.n	8004502 <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 8004596:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800459a:	e008      	b.n	80045ae <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 800459c:	f7fe fe6a 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80045a0:	b928      	cbnz	r0, 80045ae <UART_SetConfig+0x166>
 80045a2:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045a4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80045a6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 80045ac:	4847      	ldr	r0, [pc, #284]	; (80046cc <UART_SetConfig+0x284>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80045b4:	4283      	cmp	r3, r0
 80045b6:	d8a4      	bhi.n	8004502 <UART_SetConfig+0xba>
 80045b8:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80045bc:	d8a1      	bhi.n	8004502 <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045be:	0851      	lsrs	r1, r2, #1
 80045c0:	2500      	movs	r5, #0
 80045c2:	468c      	mov	ip, r1
 80045c4:	f44f 7680 	mov.w	r6, #256	; 0x100
 80045c8:	4629      	mov	r1, r5
 80045ca:	fbe0 c106 	umlal	ip, r1, r0, r6
 80045ce:	462b      	mov	r3, r5
 80045d0:	4660      	mov	r0, ip
 80045d2:	f7fb fe55 	bl	8000280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045d6:	4b3e      	ldr	r3, [pc, #248]	; (80046d0 <UART_SetConfig+0x288>)
 80045d8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80045dc:	429a      	cmp	r2, r3
 80045de:	d890      	bhi.n	8004502 <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	60d8      	str	r0, [r3, #12]
 80045e4:	e7dd      	b.n	80045a2 <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 80045e6:	4839      	ldr	r0, [pc, #228]	; (80046cc <UART_SetConfig+0x284>)
 80045e8:	e047      	b.n	800467a <UART_SetConfig+0x232>
    switch (clocksource)
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d889      	bhi.n	8004502 <UART_SetConfig+0xba>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <UART_SetConfig+0x1ac>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004619 	.word	0x08004619
 80045f8:	0800463f 	.word	0x0800463f
 80045fc:	08004669 	.word	0x08004669
 8004600:	08004503 	.word	0x08004503
 8004604:	08004645 	.word	0x08004645
 8004608:	08004503 	.word	0x08004503
 800460c:	08004503 	.word	0x08004503
 8004610:	08004503 	.word	0x08004503
 8004614:	08004513 	.word	0x08004513
        pclk = HAL_RCC_GetPCLK1Freq();
 8004618:	f7fe fe2c 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800461c:	2800      	cmp	r0, #0
 800461e:	d0c0      	beq.n	80045a2 <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004620:	6862      	ldr	r2, [r4, #4]
 8004622:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004626:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800462a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800462e:	f1a3 0110 	sub.w	r1, r3, #16
 8004632:	4291      	cmp	r1, r2
 8004634:	f63f af65 	bhi.w	8004502 <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	60d3      	str	r3, [r2, #12]
 800463c:	e7b1      	b.n	80045a2 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800463e:	f7fe fe2b 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
        break;
 8004642:	e7eb      	b.n	800461c <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8004644:	f7fe fa9e 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
        break;
 8004648:	e7e8      	b.n	800461c <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800464e:	d1f6      	bne.n	800463e <UART_SetConfig+0x1f6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004650:	f7fe fe22 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
        break;
 8004654:	e00f      	b.n	8004676 <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004656:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800465a:	d1f3      	bne.n	8004644 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 800465c:	f7fe fa92 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
        break;
 8004660:	e009      	b.n	8004676 <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004662:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004666:	d0be      	beq.n	80045e6 <UART_SetConfig+0x19e>
        pclk = (uint32_t) HSI_VALUE;
 8004668:	4818      	ldr	r0, [pc, #96]	; (80046cc <UART_SetConfig+0x284>)
 800466a:	e7d9      	b.n	8004620 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800466c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004670:	d1d2      	bne.n	8004618 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004672:	f7fe fdff 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004676:	2800      	cmp	r0, #0
 8004678:	d093      	beq.n	80045a2 <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800467a:	6862      	ldr	r2, [r4, #4]
 800467c:	0853      	lsrs	r3, r2, #1
 800467e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004682:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004686:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468a:	f1a0 0210 	sub.w	r2, r0, #16
 800468e:	429a      	cmp	r2, r3
 8004690:	f63f af37 	bhi.w	8004502 <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004694:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8004698:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800469a:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800469c:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80046a0:	4318      	orrs	r0, r3
 80046a2:	60d0      	str	r0, [r2, #12]
 80046a4:	e77d      	b.n	80045a2 <UART_SetConfig+0x15a>
 80046a6:	bf00      	nop
 80046a8:	efff69f3 	.word	0xefff69f3
 80046ac:	40008000 	.word	0x40008000
 80046b0:	40013800 	.word	0x40013800
 80046b4:	40021000 	.word	0x40021000
 80046b8:	08006188 	.word	0x08006188
 80046bc:	40004400 	.word	0x40004400
 80046c0:	40004800 	.word	0x40004800
 80046c4:	40004c00 	.word	0x40004c00
 80046c8:	40005000 	.word	0x40005000
 80046cc:	00f42400 	.word	0x00f42400
 80046d0:	000ffcff 	.word	0x000ffcff

080046d4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046d6:	07da      	lsls	r2, r3, #31
{
 80046d8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046da:	d506      	bpl.n	80046ea <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046dc:	6801      	ldr	r1, [r0, #0]
 80046de:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80046e0:	684a      	ldr	r2, [r1, #4]
 80046e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80046e6:	4322      	orrs	r2, r4
 80046e8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ea:	079c      	lsls	r4, r3, #30
 80046ec:	d506      	bpl.n	80046fc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ee:	6801      	ldr	r1, [r0, #0]
 80046f0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80046f2:	684a      	ldr	r2, [r1, #4]
 80046f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046f8:	4322      	orrs	r2, r4
 80046fa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046fc:	0759      	lsls	r1, r3, #29
 80046fe:	d506      	bpl.n	800470e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004700:	6801      	ldr	r1, [r0, #0]
 8004702:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004704:	684a      	ldr	r2, [r1, #4]
 8004706:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800470a:	4322      	orrs	r2, r4
 800470c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800470e:	071a      	lsls	r2, r3, #28
 8004710:	d506      	bpl.n	8004720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004712:	6801      	ldr	r1, [r0, #0]
 8004714:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004716:	684a      	ldr	r2, [r1, #4]
 8004718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800471c:	4322      	orrs	r2, r4
 800471e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004720:	06dc      	lsls	r4, r3, #27
 8004722:	d506      	bpl.n	8004732 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004724:	6801      	ldr	r1, [r0, #0]
 8004726:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004728:	688a      	ldr	r2, [r1, #8]
 800472a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800472e:	4322      	orrs	r2, r4
 8004730:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004732:	0699      	lsls	r1, r3, #26
 8004734:	d506      	bpl.n	8004744 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004736:	6801      	ldr	r1, [r0, #0]
 8004738:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800473a:	688a      	ldr	r2, [r1, #8]
 800473c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004740:	4322      	orrs	r2, r4
 8004742:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004744:	065a      	lsls	r2, r3, #25
 8004746:	d50f      	bpl.n	8004768 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004748:	6801      	ldr	r1, [r0, #0]
 800474a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800474c:	684a      	ldr	r2, [r1, #4]
 800474e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004752:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004754:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004758:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800475a:	d105      	bne.n	8004768 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800475c:	684a      	ldr	r2, [r1, #4]
 800475e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004760:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004764:	4322      	orrs	r2, r4
 8004766:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	d506      	bpl.n	800477a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800476c:	6802      	ldr	r2, [r0, #0]
 800476e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004770:	6853      	ldr	r3, [r2, #4]
 8004772:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004776:	430b      	orrs	r3, r1
 8004778:	6053      	str	r3, [r2, #4]
  }
}
 800477a:	bd10      	pop	{r4, pc}

0800477c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800477c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004780:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004784:	4604      	mov	r4, r0
 8004786:	460e      	mov	r6, r1
 8004788:	4615      	mov	r5, r2
 800478a:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478c:	6822      	ldr	r2, [r4, #0]
 800478e:	69d3      	ldr	r3, [r2, #28]
 8004790:	ea36 0303 	bics.w	r3, r6, r3
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	42ab      	cmp	r3, r5
 800479c:	d001      	beq.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800479e:	2000      	movs	r0, #0
 80047a0:	e025      	b.n	80047ee <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 80047a2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80047a6:	d0f2      	beq.n	800478e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a8:	f7fd fc96 	bl	80020d8 <HAL_GetTick>
 80047ac:	1bc0      	subs	r0, r0, r7
 80047ae:	4540      	cmp	r0, r8
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	d802      	bhi.n	80047ba <UART_WaitOnFlagUntilTimeout+0x3e>
 80047b4:	f1b8 0f00 	cmp.w	r8, #0
 80047b8:	d11b      	bne.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	e840 3200 	strex	r2, r3, [r0]
 80047c6:	2a00      	cmp	r2, #0
 80047c8:	d1f7      	bne.n	80047ba <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	f100 0308 	add.w	r3, r0, #8
 80047ce:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	f100 0108 	add.w	r1, r0, #8
 80047da:	e841 3200 	strex	r2, r3, [r1]
 80047de:	2a00      	cmp	r2, #0
 80047e0:	d1f3      	bne.n	80047ca <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80047e2:	2320      	movs	r3, #32
 80047e4:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047e6:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80047e8:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 80047ec:	2003      	movs	r0, #3
}
 80047ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047f2:	6803      	ldr	r3, [r0, #0]
 80047f4:	075a      	lsls	r2, r3, #29
 80047f6:	d5c9      	bpl.n	800478c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047f8:	69c3      	ldr	r3, [r0, #28]
 80047fa:	051b      	lsls	r3, r3, #20
 80047fc:	d5c6      	bpl.n	800478c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004802:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	e840 3200 	strex	r2, r3, [r0]
 8004810:	2a00      	cmp	r2, #0
 8004812:	d1f7      	bne.n	8004804 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	f100 0308 	add.w	r3, r0, #8
 8004818:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	f100 0108 	add.w	r1, r0, #8
 8004824:	e841 3200 	strex	r2, r3, [r1]
 8004828:	2a00      	cmp	r2, #0
 800482a:	d1f3      	bne.n	8004814 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 800482c:	2320      	movs	r3, #32
 800482e:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004830:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004832:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004836:	e7d7      	b.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x6c>

08004838 <HAL_UART_Transmit>:
{
 8004838:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800483c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800483e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004840:	2b20      	cmp	r3, #32
{
 8004842:	4604      	mov	r4, r0
 8004844:	460e      	mov	r6, r1
 8004846:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004848:	d14e      	bne.n	80048e8 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 800484a:	2900      	cmp	r1, #0
 800484c:	d04a      	beq.n	80048e4 <HAL_UART_Transmit+0xac>
 800484e:	2a00      	cmp	r2, #0
 8004850:	d048      	beq.n	80048e4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8004852:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004856:	2b01      	cmp	r3, #1
 8004858:	d046      	beq.n	80048e8 <HAL_UART_Transmit+0xb0>
 800485a:	2301      	movs	r3, #1
 800485c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004862:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004868:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800486a:	f7fd fc35 	bl	80020d8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800486e:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8004870:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004874:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004878:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 800487a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487e:	d103      	bne.n	8004888 <HAL_UART_Transmit+0x50>
 8004880:	6922      	ldr	r2, [r4, #16]
 8004882:	b90a      	cbnz	r2, 8004888 <HAL_UART_Transmit+0x50>
 8004884:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004886:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8004888:	2200      	movs	r2, #0
 800488a:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800488e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004892:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8004896:	b292      	uxth	r2, r2
 8004898:	b93a      	cbnz	r2, 80048aa <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800489a:	2140      	movs	r1, #64	; 0x40
 800489c:	4620      	mov	r0, r4
 800489e:	f7ff ff6d 	bl	800477c <UART_WaitOnFlagUntilTimeout>
 80048a2:	b950      	cbnz	r0, 80048ba <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80048a4:	2320      	movs	r3, #32
 80048a6:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80048a8:	e008      	b.n	80048bc <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048aa:	2200      	movs	r2, #0
 80048ac:	2180      	movs	r1, #128	; 0x80
 80048ae:	4620      	mov	r0, r4
 80048b0:	9303      	str	r3, [sp, #12]
 80048b2:	f7ff ff63 	bl	800477c <UART_WaitOnFlagUntilTimeout>
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	b118      	cbz	r0, 80048c2 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80048ba:	2003      	movs	r0, #3
}
 80048bc:	b004      	add	sp, #16
 80048be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c2:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80048c4:	b95e      	cbnz	r6, 80048de <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80048ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ce:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80048d0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80048d4:	3a01      	subs	r2, #1
 80048d6:	b292      	uxth	r2, r2
 80048d8:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80048dc:	e7d7      	b.n	800488e <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048de:	f816 2b01 	ldrb.w	r2, [r6], #1
 80048e2:	e7f4      	b.n	80048ce <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80048e4:	2001      	movs	r0, #1
 80048e6:	e7e9      	b.n	80048bc <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80048e8:	2002      	movs	r0, #2
 80048ea:	e7e7      	b.n	80048bc <HAL_UART_Transmit+0x84>

080048ec <UART_CheckIdleState>:
{
 80048ec:	b530      	push	{r4, r5, lr}
 80048ee:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	2500      	movs	r5, #0
{
 80048f2:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f4:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80048f8:	f7fd fbee 	bl	80020d8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8004902:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004904:	d415      	bmi.n	8004932 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	0752      	lsls	r2, r2, #29
 800490c:	d509      	bpl.n	8004922 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004912:	9200      	str	r2, [sp, #0]
 8004914:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004918:	2200      	movs	r2, #0
 800491a:	4620      	mov	r0, r4
 800491c:	f7ff ff2e 	bl	800477c <UART_WaitOnFlagUntilTimeout>
 8004920:	b9a0      	cbnz	r0, 800494c <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004922:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004924:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004926:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004928:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800492c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492e:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8004930:	e00d      	b.n	800494e <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004932:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004936:	9200      	str	r2, [sp, #0]
 8004938:	9003      	str	r0, [sp, #12]
 800493a:	462a      	mov	r2, r5
 800493c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004940:	4620      	mov	r0, r4
 8004942:	f7ff ff1b 	bl	800477c <UART_WaitOnFlagUntilTimeout>
 8004946:	9b03      	ldr	r3, [sp, #12]
 8004948:	2800      	cmp	r0, #0
 800494a:	d0dc      	beq.n	8004906 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800494c:	2003      	movs	r0, #3
}
 800494e:	b005      	add	sp, #20
 8004950:	bd30      	pop	{r4, r5, pc}

08004952 <HAL_UART_Init>:
{
 8004952:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004954:	4604      	mov	r4, r0
 8004956:	b340      	cbz	r0, 80049aa <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004958:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800495a:	b91b      	cbnz	r3, 8004964 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800495c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004960:	f7ff fd71 	bl	8004446 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004964:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004966:	2324      	movs	r3, #36	; 0x24
 8004968:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800496a:	6813      	ldr	r3, [r2, #0]
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004972:	4620      	mov	r0, r4
 8004974:	f7ff fd68 	bl	8004448 <UART_SetConfig>
 8004978:	2801      	cmp	r0, #1
 800497a:	d016      	beq.n	80049aa <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800497c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800497e:	b113      	cbz	r3, 8004986 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004980:	4620      	mov	r0, r4
 8004982:	f7ff fea7 	bl	80046d4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800498e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004996:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800499e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80049a0:	601a      	str	r2, [r3, #0]
}
 80049a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80049a6:	f7ff bfa1 	b.w	80048ec <UART_CheckIdleState>
}
 80049aa:	2001      	movs	r0, #1
 80049ac:	bd10      	pop	{r4, pc}
	...

080049b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80049b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80049b4:	f7fd fb2a 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80049b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80049ba:	e003      	b.n	80049c4 <LoopCopyDataInit>

080049bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80049be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80049c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80049c2:	3104      	adds	r1, #4

080049c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80049c4:	480a      	ldr	r0, [pc, #40]	; (80049f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80049c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80049ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80049cc:	d3f6      	bcc.n	80049bc <CopyDataInit>
	ldr	r2, =_sbss
 80049ce:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80049d0:	e002      	b.n	80049d8 <LoopFillZerobss>

080049d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80049d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80049d4:	f842 3b04 	str.w	r3, [r2], #4

080049d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80049d8:	4b08      	ldr	r3, [pc, #32]	; (80049fc <LoopForever+0x16>)
	cmp	r2, r3
 80049da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80049dc:	d3f9      	bcc.n	80049d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049de:	f000 f861 	bl	8004aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049e2:	f7fb fe51 	bl	8000688 <main>

080049e6 <LoopForever>:

LoopForever:
    b LoopForever
 80049e6:	e7fe      	b.n	80049e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80049e8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80049ec:	08006ff8 	.word	0x08006ff8
	ldr	r0, =_sdata
 80049f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80049f4:	200000a0 	.word	0x200000a0
	ldr	r2, =_sbss
 80049f8:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 80049fc:	20001334 	.word	0x20001334

08004a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a00:	e7fe      	b.n	8004a00 <ADC1_2_IRQHandler>

08004a02 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004a02:	2001      	movs	r0, #1
 8004a04:	4770      	bx	lr

08004a06 <_kill>:

int _kill(int pid, int sig)
{
 8004a06:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004a08:	f000 f846 	bl	8004a98 <__errno>
 8004a0c:	2316      	movs	r3, #22
 8004a0e:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295
 8004a14:	bd08      	pop	{r3, pc}

08004a16 <_exit>:

void _exit (int status)
{
 8004a16:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004a18:	f000 f83e 	bl	8004a98 <__errno>
 8004a1c:	2316      	movs	r3, #22
 8004a1e:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004a20:	e7fe      	b.n	8004a20 <_exit+0xa>

08004a22 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8004a22:	b510      	push	{r4, lr}
 8004a24:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8004a26:	f3af 8000 	nop.w
 8004a2a:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	bd10      	pop	{r4, pc}

08004a30 <_write>:

int _write(int file, char *ptr, int len)
{
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	460d      	mov	r5, r1
 8004a34:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a36:	460e      	mov	r6, r1
 8004a38:	1b73      	subs	r3, r6, r5
 8004a3a:	429c      	cmp	r4, r3
 8004a3c:	dc01      	bgt.n	8004a42 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8004a3e:	4620      	mov	r0, r4
 8004a40:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8004a42:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004a46:	f7fb fff9 	bl	8000a3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a4a:	e7f5      	b.n	8004a38 <_write+0x8>

08004a4c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a4c:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <_sbrk+0x2c>)
 8004a4e:	6811      	ldr	r1, [r2, #0]
{
 8004a50:	b508      	push	{r3, lr}
 8004a52:	4603      	mov	r3, r0
	if (heap_end == 0)
 8004a54:	b909      	cbnz	r1, 8004a5a <_sbrk+0xe>
		heap_end = &end;
 8004a56:	4909      	ldr	r1, [pc, #36]	; (8004a7c <_sbrk+0x30>)
 8004a58:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8004a5a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004a5c:	4669      	mov	r1, sp
 8004a5e:	4403      	add	r3, r0
 8004a60:	428b      	cmp	r3, r1
 8004a62:	d906      	bls.n	8004a72 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004a64:	f000 f818 	bl	8004a98 <__errno>
 8004a68:	230c      	movs	r3, #12
 8004a6a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004a70:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8004a72:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8004a74:	e7fc      	b.n	8004a70 <_sbrk+0x24>
 8004a76:	bf00      	nop
 8004a78:	2000131c 	.word	0x2000131c
 8004a7c:	20001338 	.word	0x20001338

08004a80 <_close>:

int _close(int file)
{
	return -1;
}
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	4770      	bx	lr

08004a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a8a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	4770      	bx	lr

08004a90 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004a90:	2001      	movs	r0, #1
 8004a92:	4770      	bx	lr

08004a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004a94:	2000      	movs	r0, #0
 8004a96:	4770      	bx	lr

08004a98 <__errno>:
 8004a98:	4b01      	ldr	r3, [pc, #4]	; (8004aa0 <__errno+0x8>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	2000003c 	.word	0x2000003c

08004aa4 <__libc_init_array>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4d0d      	ldr	r5, [pc, #52]	; (8004adc <__libc_init_array+0x38>)
 8004aa8:	4c0d      	ldr	r4, [pc, #52]	; (8004ae0 <__libc_init_array+0x3c>)
 8004aaa:	1b64      	subs	r4, r4, r5
 8004aac:	10a4      	asrs	r4, r4, #2
 8004aae:	2600      	movs	r6, #0
 8004ab0:	42a6      	cmp	r6, r4
 8004ab2:	d109      	bne.n	8004ac8 <__libc_init_array+0x24>
 8004ab4:	4d0b      	ldr	r5, [pc, #44]	; (8004ae4 <__libc_init_array+0x40>)
 8004ab6:	4c0c      	ldr	r4, [pc, #48]	; (8004ae8 <__libc_init_array+0x44>)
 8004ab8:	f001 fb34 	bl	8006124 <_init>
 8004abc:	1b64      	subs	r4, r4, r5
 8004abe:	10a4      	asrs	r4, r4, #2
 8004ac0:	2600      	movs	r6, #0
 8004ac2:	42a6      	cmp	r6, r4
 8004ac4:	d105      	bne.n	8004ad2 <__libc_init_array+0x2e>
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004acc:	4798      	blx	r3
 8004ace:	3601      	adds	r6, #1
 8004ad0:	e7ee      	b.n	8004ab0 <__libc_init_array+0xc>
 8004ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad6:	4798      	blx	r3
 8004ad8:	3601      	adds	r6, #1
 8004ada:	e7f2      	b.n	8004ac2 <__libc_init_array+0x1e>
 8004adc:	08006fe8 	.word	0x08006fe8
 8004ae0:	08006fe8 	.word	0x08006fe8
 8004ae4:	08006fe8 	.word	0x08006fe8
 8004ae8:	08006fec 	.word	0x08006fec

08004aec <memcpy>:
 8004aec:	440a      	add	r2, r1
 8004aee:	4291      	cmp	r1, r2
 8004af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004af4:	d100      	bne.n	8004af8 <memcpy+0xc>
 8004af6:	4770      	bx	lr
 8004af8:	b510      	push	{r4, lr}
 8004afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b02:	4291      	cmp	r1, r2
 8004b04:	d1f9      	bne.n	8004afa <memcpy+0xe>
 8004b06:	bd10      	pop	{r4, pc}

08004b08 <memset>:
 8004b08:	4402      	add	r2, r0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d100      	bne.n	8004b12 <memset+0xa>
 8004b10:	4770      	bx	lr
 8004b12:	f803 1b01 	strb.w	r1, [r3], #1
 8004b16:	e7f9      	b.n	8004b0c <memset+0x4>

08004b18 <iprintf>:
 8004b18:	b40f      	push	{r0, r1, r2, r3}
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <iprintf+0x2c>)
 8004b1c:	b513      	push	{r0, r1, r4, lr}
 8004b1e:	681c      	ldr	r4, [r3, #0]
 8004b20:	b124      	cbz	r4, 8004b2c <iprintf+0x14>
 8004b22:	69a3      	ldr	r3, [r4, #24]
 8004b24:	b913      	cbnz	r3, 8004b2c <iprintf+0x14>
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 fb4c 	bl	80051c4 <__sinit>
 8004b2c:	ab05      	add	r3, sp, #20
 8004b2e:	9a04      	ldr	r2, [sp, #16]
 8004b30:	68a1      	ldr	r1, [r4, #8]
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 fecb 	bl	80058d0 <_vfiprintf_r>
 8004b3a:	b002      	add	sp, #8
 8004b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b40:	b004      	add	sp, #16
 8004b42:	4770      	bx	lr
 8004b44:	2000003c 	.word	0x2000003c

08004b48 <_puts_r>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	460e      	mov	r6, r1
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	b118      	cbz	r0, 8004b58 <_puts_r+0x10>
 8004b50:	6983      	ldr	r3, [r0, #24]
 8004b52:	b90b      	cbnz	r3, 8004b58 <_puts_r+0x10>
 8004b54:	f000 fb36 	bl	80051c4 <__sinit>
 8004b58:	69ab      	ldr	r3, [r5, #24]
 8004b5a:	68ac      	ldr	r4, [r5, #8]
 8004b5c:	b913      	cbnz	r3, 8004b64 <_puts_r+0x1c>
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 fb30 	bl	80051c4 <__sinit>
 8004b64:	4b2c      	ldr	r3, [pc, #176]	; (8004c18 <_puts_r+0xd0>)
 8004b66:	429c      	cmp	r4, r3
 8004b68:	d120      	bne.n	8004bac <_puts_r+0x64>
 8004b6a:	686c      	ldr	r4, [r5, #4]
 8004b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b6e:	07db      	lsls	r3, r3, #31
 8004b70:	d405      	bmi.n	8004b7e <_puts_r+0x36>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	0598      	lsls	r0, r3, #22
 8004b76:	d402      	bmi.n	8004b7e <_puts_r+0x36>
 8004b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b7a:	f000 fbd3 	bl	8005324 <__retarget_lock_acquire_recursive>
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	0719      	lsls	r1, r3, #28
 8004b82:	d51d      	bpl.n	8004bc0 <_puts_r+0x78>
 8004b84:	6923      	ldr	r3, [r4, #16]
 8004b86:	b1db      	cbz	r3, 8004bc0 <_puts_r+0x78>
 8004b88:	3e01      	subs	r6, #1
 8004b8a:	68a3      	ldr	r3, [r4, #8]
 8004b8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b90:	3b01      	subs	r3, #1
 8004b92:	60a3      	str	r3, [r4, #8]
 8004b94:	bb39      	cbnz	r1, 8004be6 <_puts_r+0x9e>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da38      	bge.n	8004c0c <_puts_r+0xc4>
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	210a      	movs	r1, #10
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f000 f918 	bl	8004dd4 <__swbuf_r>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d011      	beq.n	8004bcc <_puts_r+0x84>
 8004ba8:	250a      	movs	r5, #10
 8004baa:	e011      	b.n	8004bd0 <_puts_r+0x88>
 8004bac:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <_puts_r+0xd4>)
 8004bae:	429c      	cmp	r4, r3
 8004bb0:	d101      	bne.n	8004bb6 <_puts_r+0x6e>
 8004bb2:	68ac      	ldr	r4, [r5, #8]
 8004bb4:	e7da      	b.n	8004b6c <_puts_r+0x24>
 8004bb6:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <_puts_r+0xd8>)
 8004bb8:	429c      	cmp	r4, r3
 8004bba:	bf08      	it	eq
 8004bbc:	68ec      	ldreq	r4, [r5, #12]
 8004bbe:	e7d5      	b.n	8004b6c <_puts_r+0x24>
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	f000 f958 	bl	8004e78 <__swsetup_r>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d0dd      	beq.n	8004b88 <_puts_r+0x40>
 8004bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8004bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bd2:	07da      	lsls	r2, r3, #31
 8004bd4:	d405      	bmi.n	8004be2 <_puts_r+0x9a>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	059b      	lsls	r3, r3, #22
 8004bda:	d402      	bmi.n	8004be2 <_puts_r+0x9a>
 8004bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bde:	f000 fba2 	bl	8005326 <__retarget_lock_release_recursive>
 8004be2:	4628      	mov	r0, r5
 8004be4:	bd70      	pop	{r4, r5, r6, pc}
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da04      	bge.n	8004bf4 <_puts_r+0xac>
 8004bea:	69a2      	ldr	r2, [r4, #24]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	dc06      	bgt.n	8004bfe <_puts_r+0xb6>
 8004bf0:	290a      	cmp	r1, #10
 8004bf2:	d004      	beq.n	8004bfe <_puts_r+0xb6>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	6022      	str	r2, [r4, #0]
 8004bfa:	7019      	strb	r1, [r3, #0]
 8004bfc:	e7c5      	b.n	8004b8a <_puts_r+0x42>
 8004bfe:	4622      	mov	r2, r4
 8004c00:	4628      	mov	r0, r5
 8004c02:	f000 f8e7 	bl	8004dd4 <__swbuf_r>
 8004c06:	3001      	adds	r0, #1
 8004c08:	d1bf      	bne.n	8004b8a <_puts_r+0x42>
 8004c0a:	e7df      	b.n	8004bcc <_puts_r+0x84>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	250a      	movs	r5, #10
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	6022      	str	r2, [r4, #0]
 8004c14:	701d      	strb	r5, [r3, #0]
 8004c16:	e7db      	b.n	8004bd0 <_puts_r+0x88>
 8004c18:	08006f6c 	.word	0x08006f6c
 8004c1c:	08006f8c 	.word	0x08006f8c
 8004c20:	08006f4c 	.word	0x08006f4c

08004c24 <puts>:
 8004c24:	4b02      	ldr	r3, [pc, #8]	; (8004c30 <puts+0xc>)
 8004c26:	4601      	mov	r1, r0
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	f7ff bf8d 	b.w	8004b48 <_puts_r>
 8004c2e:	bf00      	nop
 8004c30:	2000003c 	.word	0x2000003c

08004c34 <siprintf>:
 8004c34:	b40e      	push	{r1, r2, r3}
 8004c36:	b500      	push	{lr}
 8004c38:	b09c      	sub	sp, #112	; 0x70
 8004c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c3c:	9002      	str	r0, [sp, #8]
 8004c3e:	9006      	str	r0, [sp, #24]
 8004c40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c44:	4809      	ldr	r0, [pc, #36]	; (8004c6c <siprintf+0x38>)
 8004c46:	9107      	str	r1, [sp, #28]
 8004c48:	9104      	str	r1, [sp, #16]
 8004c4a:	4909      	ldr	r1, [pc, #36]	; (8004c70 <siprintf+0x3c>)
 8004c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c50:	9105      	str	r1, [sp, #20]
 8004c52:	6800      	ldr	r0, [r0, #0]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	a902      	add	r1, sp, #8
 8004c58:	f000 fd10 	bl	800567c <_svfiprintf_r>
 8004c5c:	9b02      	ldr	r3, [sp, #8]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	b01c      	add	sp, #112	; 0x70
 8004c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c68:	b003      	add	sp, #12
 8004c6a:	4770      	bx	lr
 8004c6c:	2000003c 	.word	0x2000003c
 8004c70:	ffff0208 	.word	0xffff0208

08004c74 <strcat>:
 8004c74:	b510      	push	{r4, lr}
 8004c76:	4602      	mov	r2, r0
 8004c78:	7814      	ldrb	r4, [r2, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	3201      	adds	r2, #1
 8004c7e:	2c00      	cmp	r4, #0
 8004c80:	d1fa      	bne.n	8004c78 <strcat+0x4>
 8004c82:	3b01      	subs	r3, #1
 8004c84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	d1f9      	bne.n	8004c84 <strcat+0x10>
 8004c90:	bd10      	pop	{r4, pc}

08004c92 <strcpy>:
 8004c92:	4603      	mov	r3, r0
 8004c94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c98:	f803 2b01 	strb.w	r2, [r3], #1
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	d1f9      	bne.n	8004c94 <strcpy+0x2>
 8004ca0:	4770      	bx	lr

08004ca2 <strncmp>:
 8004ca2:	b510      	push	{r4, lr}
 8004ca4:	b17a      	cbz	r2, 8004cc6 <strncmp+0x24>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	3901      	subs	r1, #1
 8004caa:	1884      	adds	r4, r0, r2
 8004cac:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004cb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004cb4:	4290      	cmp	r0, r2
 8004cb6:	d101      	bne.n	8004cbc <strncmp+0x1a>
 8004cb8:	42a3      	cmp	r3, r4
 8004cba:	d101      	bne.n	8004cc0 <strncmp+0x1e>
 8004cbc:	1a80      	subs	r0, r0, r2
 8004cbe:	bd10      	pop	{r4, pc}
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d1f3      	bne.n	8004cac <strncmp+0xa>
 8004cc4:	e7fa      	b.n	8004cbc <strncmp+0x1a>
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	e7f9      	b.n	8004cbe <strncmp+0x1c>

08004cca <strncpy>:
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	3901      	subs	r1, #1
 8004cce:	4603      	mov	r3, r0
 8004cd0:	b132      	cbz	r2, 8004ce0 <strncpy+0x16>
 8004cd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004cd6:	f803 4b01 	strb.w	r4, [r3], #1
 8004cda:	3a01      	subs	r2, #1
 8004cdc:	2c00      	cmp	r4, #0
 8004cde:	d1f7      	bne.n	8004cd0 <strncpy+0x6>
 8004ce0:	441a      	add	r2, r3
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d100      	bne.n	8004cea <strncpy+0x20>
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	f803 1b01 	strb.w	r1, [r3], #1
 8004cee:	e7f9      	b.n	8004ce4 <strncpy+0x1a>

08004cf0 <strstr>:
 8004cf0:	780a      	ldrb	r2, [r1, #0]
 8004cf2:	b570      	push	{r4, r5, r6, lr}
 8004cf4:	b96a      	cbnz	r2, 8004d12 <strstr+0x22>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d109      	bne.n	8004d10 <strstr+0x20>
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	4605      	mov	r5, r0
 8004d00:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f6      	beq.n	8004cf6 <strstr+0x6>
 8004d08:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004d0c:	429e      	cmp	r6, r3
 8004d0e:	d0f7      	beq.n	8004d00 <strstr+0x10>
 8004d10:	3001      	adds	r0, #1
 8004d12:	7803      	ldrb	r3, [r0, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1ef      	bne.n	8004cf8 <strstr+0x8>
 8004d18:	4618      	mov	r0, r3
 8004d1a:	e7ec      	b.n	8004cf6 <strstr+0x6>

08004d1c <strtok>:
 8004d1c:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <strtok+0x5c>)
 8004d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d20:	681e      	ldr	r6, [r3, #0]
 8004d22:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004d24:	4605      	mov	r5, r0
 8004d26:	b9fc      	cbnz	r4, 8004d68 <strtok+0x4c>
 8004d28:	2050      	movs	r0, #80	; 0x50
 8004d2a:	9101      	str	r1, [sp, #4]
 8004d2c:	f000 fb62 	bl	80053f4 <malloc>
 8004d30:	9901      	ldr	r1, [sp, #4]
 8004d32:	65b0      	str	r0, [r6, #88]	; 0x58
 8004d34:	4602      	mov	r2, r0
 8004d36:	b920      	cbnz	r0, 8004d42 <strtok+0x26>
 8004d38:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <strtok+0x60>)
 8004d3a:	4811      	ldr	r0, [pc, #68]	; (8004d80 <strtok+0x64>)
 8004d3c:	2157      	movs	r1, #87	; 0x57
 8004d3e:	f000 f909 	bl	8004f54 <__assert_func>
 8004d42:	e9c0 4400 	strd	r4, r4, [r0]
 8004d46:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004d4a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004d4e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004d52:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004d56:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004d5a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004d5e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004d62:	6184      	str	r4, [r0, #24]
 8004d64:	7704      	strb	r4, [r0, #28]
 8004d66:	6244      	str	r4, [r0, #36]	; 0x24
 8004d68:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	b002      	add	sp, #8
 8004d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d74:	f000 b806 	b.w	8004d84 <__strtok_r>
 8004d78:	2000003c 	.word	0x2000003c
 8004d7c:	08006e9c 	.word	0x08006e9c
 8004d80:	08006eb3 	.word	0x08006eb3

08004d84 <__strtok_r>:
 8004d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d86:	b908      	cbnz	r0, 8004d8c <__strtok_r+0x8>
 8004d88:	6810      	ldr	r0, [r2, #0]
 8004d8a:	b188      	cbz	r0, 8004db0 <__strtok_r+0x2c>
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004d94:	460f      	mov	r7, r1
 8004d96:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004d9a:	b91e      	cbnz	r6, 8004da4 <__strtok_r+0x20>
 8004d9c:	b965      	cbnz	r5, 8004db8 <__strtok_r+0x34>
 8004d9e:	6015      	str	r5, [r2, #0]
 8004da0:	4628      	mov	r0, r5
 8004da2:	e005      	b.n	8004db0 <__strtok_r+0x2c>
 8004da4:	42b5      	cmp	r5, r6
 8004da6:	d1f6      	bne.n	8004d96 <__strtok_r+0x12>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f0      	bne.n	8004d8e <__strtok_r+0xa>
 8004dac:	6014      	str	r4, [r2, #0]
 8004dae:	7003      	strb	r3, [r0, #0]
 8004db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db2:	461c      	mov	r4, r3
 8004db4:	e00c      	b.n	8004dd0 <__strtok_r+0x4c>
 8004db6:	b915      	cbnz	r5, 8004dbe <__strtok_r+0x3a>
 8004db8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004dbc:	460e      	mov	r6, r1
 8004dbe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004dc2:	42ab      	cmp	r3, r5
 8004dc4:	d1f7      	bne.n	8004db6 <__strtok_r+0x32>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f3      	beq.n	8004db2 <__strtok_r+0x2e>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004dd0:	6014      	str	r4, [r2, #0]
 8004dd2:	e7ed      	b.n	8004db0 <__strtok_r+0x2c>

08004dd4 <__swbuf_r>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	460e      	mov	r6, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	4605      	mov	r5, r0
 8004ddc:	b118      	cbz	r0, 8004de6 <__swbuf_r+0x12>
 8004dde:	6983      	ldr	r3, [r0, #24]
 8004de0:	b90b      	cbnz	r3, 8004de6 <__swbuf_r+0x12>
 8004de2:	f000 f9ef 	bl	80051c4 <__sinit>
 8004de6:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <__swbuf_r+0x98>)
 8004de8:	429c      	cmp	r4, r3
 8004dea:	d12b      	bne.n	8004e44 <__swbuf_r+0x70>
 8004dec:	686c      	ldr	r4, [r5, #4]
 8004dee:	69a3      	ldr	r3, [r4, #24]
 8004df0:	60a3      	str	r3, [r4, #8]
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	071a      	lsls	r2, r3, #28
 8004df6:	d52f      	bpl.n	8004e58 <__swbuf_r+0x84>
 8004df8:	6923      	ldr	r3, [r4, #16]
 8004dfa:	b36b      	cbz	r3, 8004e58 <__swbuf_r+0x84>
 8004dfc:	6923      	ldr	r3, [r4, #16]
 8004dfe:	6820      	ldr	r0, [r4, #0]
 8004e00:	1ac0      	subs	r0, r0, r3
 8004e02:	6963      	ldr	r3, [r4, #20]
 8004e04:	b2f6      	uxtb	r6, r6
 8004e06:	4283      	cmp	r3, r0
 8004e08:	4637      	mov	r7, r6
 8004e0a:	dc04      	bgt.n	8004e16 <__swbuf_r+0x42>
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	4628      	mov	r0, r5
 8004e10:	f000 f944 	bl	800509c <_fflush_r>
 8004e14:	bb30      	cbnz	r0, 8004e64 <__swbuf_r+0x90>
 8004e16:	68a3      	ldr	r3, [r4, #8]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	60a3      	str	r3, [r4, #8]
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	6022      	str	r2, [r4, #0]
 8004e22:	701e      	strb	r6, [r3, #0]
 8004e24:	6963      	ldr	r3, [r4, #20]
 8004e26:	3001      	adds	r0, #1
 8004e28:	4283      	cmp	r3, r0
 8004e2a:	d004      	beq.n	8004e36 <__swbuf_r+0x62>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	07db      	lsls	r3, r3, #31
 8004e30:	d506      	bpl.n	8004e40 <__swbuf_r+0x6c>
 8004e32:	2e0a      	cmp	r6, #10
 8004e34:	d104      	bne.n	8004e40 <__swbuf_r+0x6c>
 8004e36:	4621      	mov	r1, r4
 8004e38:	4628      	mov	r0, r5
 8004e3a:	f000 f92f 	bl	800509c <_fflush_r>
 8004e3e:	b988      	cbnz	r0, 8004e64 <__swbuf_r+0x90>
 8004e40:	4638      	mov	r0, r7
 8004e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <__swbuf_r+0x9c>)
 8004e46:	429c      	cmp	r4, r3
 8004e48:	d101      	bne.n	8004e4e <__swbuf_r+0x7a>
 8004e4a:	68ac      	ldr	r4, [r5, #8]
 8004e4c:	e7cf      	b.n	8004dee <__swbuf_r+0x1a>
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <__swbuf_r+0xa0>)
 8004e50:	429c      	cmp	r4, r3
 8004e52:	bf08      	it	eq
 8004e54:	68ec      	ldreq	r4, [r5, #12]
 8004e56:	e7ca      	b.n	8004dee <__swbuf_r+0x1a>
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f000 f80c 	bl	8004e78 <__swsetup_r>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d0cb      	beq.n	8004dfc <__swbuf_r+0x28>
 8004e64:	f04f 37ff 	mov.w	r7, #4294967295
 8004e68:	e7ea      	b.n	8004e40 <__swbuf_r+0x6c>
 8004e6a:	bf00      	nop
 8004e6c:	08006f6c 	.word	0x08006f6c
 8004e70:	08006f8c 	.word	0x08006f8c
 8004e74:	08006f4c 	.word	0x08006f4c

08004e78 <__swsetup_r>:
 8004e78:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <__swsetup_r+0xcc>)
 8004e7a:	b570      	push	{r4, r5, r6, lr}
 8004e7c:	681d      	ldr	r5, [r3, #0]
 8004e7e:	4606      	mov	r6, r0
 8004e80:	460c      	mov	r4, r1
 8004e82:	b125      	cbz	r5, 8004e8e <__swsetup_r+0x16>
 8004e84:	69ab      	ldr	r3, [r5, #24]
 8004e86:	b913      	cbnz	r3, 8004e8e <__swsetup_r+0x16>
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f000 f99b 	bl	80051c4 <__sinit>
 8004e8e:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <__swsetup_r+0xd0>)
 8004e90:	429c      	cmp	r4, r3
 8004e92:	d10f      	bne.n	8004eb4 <__swsetup_r+0x3c>
 8004e94:	686c      	ldr	r4, [r5, #4]
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e9c:	0719      	lsls	r1, r3, #28
 8004e9e:	d42c      	bmi.n	8004efa <__swsetup_r+0x82>
 8004ea0:	06dd      	lsls	r5, r3, #27
 8004ea2:	d411      	bmi.n	8004ec8 <__swsetup_r+0x50>
 8004ea4:	2309      	movs	r3, #9
 8004ea6:	6033      	str	r3, [r6, #0]
 8004ea8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb2:	e03e      	b.n	8004f32 <__swsetup_r+0xba>
 8004eb4:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <__swsetup_r+0xd4>)
 8004eb6:	429c      	cmp	r4, r3
 8004eb8:	d101      	bne.n	8004ebe <__swsetup_r+0x46>
 8004eba:	68ac      	ldr	r4, [r5, #8]
 8004ebc:	e7eb      	b.n	8004e96 <__swsetup_r+0x1e>
 8004ebe:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <__swsetup_r+0xd8>)
 8004ec0:	429c      	cmp	r4, r3
 8004ec2:	bf08      	it	eq
 8004ec4:	68ec      	ldreq	r4, [r5, #12]
 8004ec6:	e7e6      	b.n	8004e96 <__swsetup_r+0x1e>
 8004ec8:	0758      	lsls	r0, r3, #29
 8004eca:	d512      	bpl.n	8004ef2 <__swsetup_r+0x7a>
 8004ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ece:	b141      	cbz	r1, 8004ee2 <__swsetup_r+0x6a>
 8004ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ed4:	4299      	cmp	r1, r3
 8004ed6:	d002      	beq.n	8004ede <__swsetup_r+0x66>
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f000 fa93 	bl	8005404 <_free_r>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ee8:	81a3      	strh	r3, [r4, #12]
 8004eea:	2300      	movs	r3, #0
 8004eec:	6063      	str	r3, [r4, #4]
 8004eee:	6923      	ldr	r3, [r4, #16]
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	f043 0308 	orr.w	r3, r3, #8
 8004ef8:	81a3      	strh	r3, [r4, #12]
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	b94b      	cbnz	r3, 8004f12 <__swsetup_r+0x9a>
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f08:	d003      	beq.n	8004f12 <__swsetup_r+0x9a>
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f000 fa31 	bl	8005374 <__smakebuf_r>
 8004f12:	89a0      	ldrh	r0, [r4, #12]
 8004f14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f18:	f010 0301 	ands.w	r3, r0, #1
 8004f1c:	d00a      	beq.n	8004f34 <__swsetup_r+0xbc>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60a3      	str	r3, [r4, #8]
 8004f22:	6963      	ldr	r3, [r4, #20]
 8004f24:	425b      	negs	r3, r3
 8004f26:	61a3      	str	r3, [r4, #24]
 8004f28:	6923      	ldr	r3, [r4, #16]
 8004f2a:	b943      	cbnz	r3, 8004f3e <__swsetup_r+0xc6>
 8004f2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f30:	d1ba      	bne.n	8004ea8 <__swsetup_r+0x30>
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	0781      	lsls	r1, r0, #30
 8004f36:	bf58      	it	pl
 8004f38:	6963      	ldrpl	r3, [r4, #20]
 8004f3a:	60a3      	str	r3, [r4, #8]
 8004f3c:	e7f4      	b.n	8004f28 <__swsetup_r+0xb0>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e7f7      	b.n	8004f32 <__swsetup_r+0xba>
 8004f42:	bf00      	nop
 8004f44:	2000003c 	.word	0x2000003c
 8004f48:	08006f6c 	.word	0x08006f6c
 8004f4c:	08006f8c 	.word	0x08006f8c
 8004f50:	08006f4c 	.word	0x08006f4c

08004f54 <__assert_func>:
 8004f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f56:	4614      	mov	r4, r2
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <__assert_func+0x2c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4605      	mov	r5, r0
 8004f60:	68d8      	ldr	r0, [r3, #12]
 8004f62:	b14c      	cbz	r4, 8004f78 <__assert_func+0x24>
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <__assert_func+0x30>)
 8004f66:	9100      	str	r1, [sp, #0]
 8004f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f6c:	4906      	ldr	r1, [pc, #24]	; (8004f88 <__assert_func+0x34>)
 8004f6e:	462b      	mov	r3, r5
 8004f70:	f000 f9a6 	bl	80052c0 <fiprintf>
 8004f74:	f000 ffd6 	bl	8005f24 <abort>
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <__assert_func+0x38>)
 8004f7a:	461c      	mov	r4, r3
 8004f7c:	e7f3      	b.n	8004f66 <__assert_func+0x12>
 8004f7e:	bf00      	nop
 8004f80:	2000003c 	.word	0x2000003c
 8004f84:	08006f10 	.word	0x08006f10
 8004f88:	08006f1d 	.word	0x08006f1d
 8004f8c:	080061d6 	.word	0x080061d6

08004f90 <__sflush_r>:
 8004f90:	898a      	ldrh	r2, [r1, #12]
 8004f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f96:	4605      	mov	r5, r0
 8004f98:	0710      	lsls	r0, r2, #28
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	d458      	bmi.n	8005050 <__sflush_r+0xc0>
 8004f9e:	684b      	ldr	r3, [r1, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	dc05      	bgt.n	8004fb0 <__sflush_r+0x20>
 8004fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	dc02      	bgt.n	8004fb0 <__sflush_r+0x20>
 8004faa:	2000      	movs	r0, #0
 8004fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fb2:	2e00      	cmp	r6, #0
 8004fb4:	d0f9      	beq.n	8004faa <__sflush_r+0x1a>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fbc:	682f      	ldr	r7, [r5, #0]
 8004fbe:	602b      	str	r3, [r5, #0]
 8004fc0:	d032      	beq.n	8005028 <__sflush_r+0x98>
 8004fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	075a      	lsls	r2, r3, #29
 8004fc8:	d505      	bpl.n	8004fd6 <__sflush_r+0x46>
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	1ac0      	subs	r0, r0, r3
 8004fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fd0:	b10b      	cbz	r3, 8004fd6 <__sflush_r+0x46>
 8004fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fd4:	1ac0      	subs	r0, r0, r3
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	4602      	mov	r2, r0
 8004fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fdc:	6a21      	ldr	r1, [r4, #32]
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b0      	blx	r6
 8004fe2:	1c43      	adds	r3, r0, #1
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	d106      	bne.n	8004ff6 <__sflush_r+0x66>
 8004fe8:	6829      	ldr	r1, [r5, #0]
 8004fea:	291d      	cmp	r1, #29
 8004fec:	d82c      	bhi.n	8005048 <__sflush_r+0xb8>
 8004fee:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <__sflush_r+0x108>)
 8004ff0:	40ca      	lsrs	r2, r1
 8004ff2:	07d6      	lsls	r6, r2, #31
 8004ff4:	d528      	bpl.n	8005048 <__sflush_r+0xb8>
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	6062      	str	r2, [r4, #4]
 8004ffa:	04d9      	lsls	r1, r3, #19
 8004ffc:	6922      	ldr	r2, [r4, #16]
 8004ffe:	6022      	str	r2, [r4, #0]
 8005000:	d504      	bpl.n	800500c <__sflush_r+0x7c>
 8005002:	1c42      	adds	r2, r0, #1
 8005004:	d101      	bne.n	800500a <__sflush_r+0x7a>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	b903      	cbnz	r3, 800500c <__sflush_r+0x7c>
 800500a:	6560      	str	r0, [r4, #84]	; 0x54
 800500c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800500e:	602f      	str	r7, [r5, #0]
 8005010:	2900      	cmp	r1, #0
 8005012:	d0ca      	beq.n	8004faa <__sflush_r+0x1a>
 8005014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005018:	4299      	cmp	r1, r3
 800501a:	d002      	beq.n	8005022 <__sflush_r+0x92>
 800501c:	4628      	mov	r0, r5
 800501e:	f000 f9f1 	bl	8005404 <_free_r>
 8005022:	2000      	movs	r0, #0
 8005024:	6360      	str	r0, [r4, #52]	; 0x34
 8005026:	e7c1      	b.n	8004fac <__sflush_r+0x1c>
 8005028:	6a21      	ldr	r1, [r4, #32]
 800502a:	2301      	movs	r3, #1
 800502c:	4628      	mov	r0, r5
 800502e:	47b0      	blx	r6
 8005030:	1c41      	adds	r1, r0, #1
 8005032:	d1c7      	bne.n	8004fc4 <__sflush_r+0x34>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0c4      	beq.n	8004fc4 <__sflush_r+0x34>
 800503a:	2b1d      	cmp	r3, #29
 800503c:	d001      	beq.n	8005042 <__sflush_r+0xb2>
 800503e:	2b16      	cmp	r3, #22
 8005040:	d101      	bne.n	8005046 <__sflush_r+0xb6>
 8005042:	602f      	str	r7, [r5, #0]
 8005044:	e7b1      	b.n	8004faa <__sflush_r+0x1a>
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800504c:	81a3      	strh	r3, [r4, #12]
 800504e:	e7ad      	b.n	8004fac <__sflush_r+0x1c>
 8005050:	690f      	ldr	r7, [r1, #16]
 8005052:	2f00      	cmp	r7, #0
 8005054:	d0a9      	beq.n	8004faa <__sflush_r+0x1a>
 8005056:	0793      	lsls	r3, r2, #30
 8005058:	680e      	ldr	r6, [r1, #0]
 800505a:	bf08      	it	eq
 800505c:	694b      	ldreq	r3, [r1, #20]
 800505e:	600f      	str	r7, [r1, #0]
 8005060:	bf18      	it	ne
 8005062:	2300      	movne	r3, #0
 8005064:	eba6 0807 	sub.w	r8, r6, r7
 8005068:	608b      	str	r3, [r1, #8]
 800506a:	f1b8 0f00 	cmp.w	r8, #0
 800506e:	dd9c      	ble.n	8004faa <__sflush_r+0x1a>
 8005070:	6a21      	ldr	r1, [r4, #32]
 8005072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005074:	4643      	mov	r3, r8
 8005076:	463a      	mov	r2, r7
 8005078:	4628      	mov	r0, r5
 800507a:	47b0      	blx	r6
 800507c:	2800      	cmp	r0, #0
 800507e:	dc06      	bgt.n	800508e <__sflush_r+0xfe>
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
 800508c:	e78e      	b.n	8004fac <__sflush_r+0x1c>
 800508e:	4407      	add	r7, r0
 8005090:	eba8 0800 	sub.w	r8, r8, r0
 8005094:	e7e9      	b.n	800506a <__sflush_r+0xda>
 8005096:	bf00      	nop
 8005098:	20400001 	.word	0x20400001

0800509c <_fflush_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	690b      	ldr	r3, [r1, #16]
 80050a0:	4605      	mov	r5, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	b913      	cbnz	r3, 80050ac <_fflush_r+0x10>
 80050a6:	2500      	movs	r5, #0
 80050a8:	4628      	mov	r0, r5
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	b118      	cbz	r0, 80050b6 <_fflush_r+0x1a>
 80050ae:	6983      	ldr	r3, [r0, #24]
 80050b0:	b90b      	cbnz	r3, 80050b6 <_fflush_r+0x1a>
 80050b2:	f000 f887 	bl	80051c4 <__sinit>
 80050b6:	4b14      	ldr	r3, [pc, #80]	; (8005108 <_fflush_r+0x6c>)
 80050b8:	429c      	cmp	r4, r3
 80050ba:	d11b      	bne.n	80050f4 <_fflush_r+0x58>
 80050bc:	686c      	ldr	r4, [r5, #4]
 80050be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0ef      	beq.n	80050a6 <_fflush_r+0xa>
 80050c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050c8:	07d0      	lsls	r0, r2, #31
 80050ca:	d404      	bmi.n	80050d6 <_fflush_r+0x3a>
 80050cc:	0599      	lsls	r1, r3, #22
 80050ce:	d402      	bmi.n	80050d6 <_fflush_r+0x3a>
 80050d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050d2:	f000 f927 	bl	8005324 <__retarget_lock_acquire_recursive>
 80050d6:	4628      	mov	r0, r5
 80050d8:	4621      	mov	r1, r4
 80050da:	f7ff ff59 	bl	8004f90 <__sflush_r>
 80050de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050e0:	07da      	lsls	r2, r3, #31
 80050e2:	4605      	mov	r5, r0
 80050e4:	d4e0      	bmi.n	80050a8 <_fflush_r+0xc>
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	059b      	lsls	r3, r3, #22
 80050ea:	d4dd      	bmi.n	80050a8 <_fflush_r+0xc>
 80050ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ee:	f000 f91a 	bl	8005326 <__retarget_lock_release_recursive>
 80050f2:	e7d9      	b.n	80050a8 <_fflush_r+0xc>
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <_fflush_r+0x70>)
 80050f6:	429c      	cmp	r4, r3
 80050f8:	d101      	bne.n	80050fe <_fflush_r+0x62>
 80050fa:	68ac      	ldr	r4, [r5, #8]
 80050fc:	e7df      	b.n	80050be <_fflush_r+0x22>
 80050fe:	4b04      	ldr	r3, [pc, #16]	; (8005110 <_fflush_r+0x74>)
 8005100:	429c      	cmp	r4, r3
 8005102:	bf08      	it	eq
 8005104:	68ec      	ldreq	r4, [r5, #12]
 8005106:	e7da      	b.n	80050be <_fflush_r+0x22>
 8005108:	08006f6c 	.word	0x08006f6c
 800510c:	08006f8c 	.word	0x08006f8c
 8005110:	08006f4c 	.word	0x08006f4c

08005114 <std>:
 8005114:	2300      	movs	r3, #0
 8005116:	b510      	push	{r4, lr}
 8005118:	4604      	mov	r4, r0
 800511a:	e9c0 3300 	strd	r3, r3, [r0]
 800511e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005122:	6083      	str	r3, [r0, #8]
 8005124:	8181      	strh	r1, [r0, #12]
 8005126:	6643      	str	r3, [r0, #100]	; 0x64
 8005128:	81c2      	strh	r2, [r0, #14]
 800512a:	6183      	str	r3, [r0, #24]
 800512c:	4619      	mov	r1, r3
 800512e:	2208      	movs	r2, #8
 8005130:	305c      	adds	r0, #92	; 0x5c
 8005132:	f7ff fce9 	bl	8004b08 <memset>
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <std+0x38>)
 8005138:	6263      	str	r3, [r4, #36]	; 0x24
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <std+0x3c>)
 800513c:	62a3      	str	r3, [r4, #40]	; 0x28
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <std+0x40>)
 8005140:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <std+0x44>)
 8005144:	6224      	str	r4, [r4, #32]
 8005146:	6323      	str	r3, [r4, #48]	; 0x30
 8005148:	bd10      	pop	{r4, pc}
 800514a:	bf00      	nop
 800514c:	08005e79 	.word	0x08005e79
 8005150:	08005e9b 	.word	0x08005e9b
 8005154:	08005ed3 	.word	0x08005ed3
 8005158:	08005ef7 	.word	0x08005ef7

0800515c <_cleanup_r>:
 800515c:	4901      	ldr	r1, [pc, #4]	; (8005164 <_cleanup_r+0x8>)
 800515e:	f000 b8c1 	b.w	80052e4 <_fwalk_reent>
 8005162:	bf00      	nop
 8005164:	0800509d 	.word	0x0800509d

08005168 <__sfmoreglue>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	2268      	movs	r2, #104	; 0x68
 800516c:	1e4d      	subs	r5, r1, #1
 800516e:	4355      	muls	r5, r2
 8005170:	460e      	mov	r6, r1
 8005172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005176:	f000 f9b1 	bl	80054dc <_malloc_r>
 800517a:	4604      	mov	r4, r0
 800517c:	b140      	cbz	r0, 8005190 <__sfmoreglue+0x28>
 800517e:	2100      	movs	r1, #0
 8005180:	e9c0 1600 	strd	r1, r6, [r0]
 8005184:	300c      	adds	r0, #12
 8005186:	60a0      	str	r0, [r4, #8]
 8005188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800518c:	f7ff fcbc 	bl	8004b08 <memset>
 8005190:	4620      	mov	r0, r4
 8005192:	bd70      	pop	{r4, r5, r6, pc}

08005194 <__sfp_lock_acquire>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__sfp_lock_acquire+0x8>)
 8005196:	f000 b8c5 	b.w	8005324 <__retarget_lock_acquire_recursive>
 800519a:	bf00      	nop
 800519c:	20001325 	.word	0x20001325

080051a0 <__sfp_lock_release>:
 80051a0:	4801      	ldr	r0, [pc, #4]	; (80051a8 <__sfp_lock_release+0x8>)
 80051a2:	f000 b8c0 	b.w	8005326 <__retarget_lock_release_recursive>
 80051a6:	bf00      	nop
 80051a8:	20001325 	.word	0x20001325

080051ac <__sinit_lock_acquire>:
 80051ac:	4801      	ldr	r0, [pc, #4]	; (80051b4 <__sinit_lock_acquire+0x8>)
 80051ae:	f000 b8b9 	b.w	8005324 <__retarget_lock_acquire_recursive>
 80051b2:	bf00      	nop
 80051b4:	20001326 	.word	0x20001326

080051b8 <__sinit_lock_release>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__sinit_lock_release+0x8>)
 80051ba:	f000 b8b4 	b.w	8005326 <__retarget_lock_release_recursive>
 80051be:	bf00      	nop
 80051c0:	20001326 	.word	0x20001326

080051c4 <__sinit>:
 80051c4:	b510      	push	{r4, lr}
 80051c6:	4604      	mov	r4, r0
 80051c8:	f7ff fff0 	bl	80051ac <__sinit_lock_acquire>
 80051cc:	69a3      	ldr	r3, [r4, #24]
 80051ce:	b11b      	cbz	r3, 80051d8 <__sinit+0x14>
 80051d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d4:	f7ff bff0 	b.w	80051b8 <__sinit_lock_release>
 80051d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051dc:	6523      	str	r3, [r4, #80]	; 0x50
 80051de:	4b13      	ldr	r3, [pc, #76]	; (800522c <__sinit+0x68>)
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <__sinit+0x6c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	bf04      	itt	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	61a3      	streq	r3, [r4, #24]
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 f820 	bl	8005234 <__sfp>
 80051f4:	6060      	str	r0, [r4, #4]
 80051f6:	4620      	mov	r0, r4
 80051f8:	f000 f81c 	bl	8005234 <__sfp>
 80051fc:	60a0      	str	r0, [r4, #8]
 80051fe:	4620      	mov	r0, r4
 8005200:	f000 f818 	bl	8005234 <__sfp>
 8005204:	2200      	movs	r2, #0
 8005206:	60e0      	str	r0, [r4, #12]
 8005208:	2104      	movs	r1, #4
 800520a:	6860      	ldr	r0, [r4, #4]
 800520c:	f7ff ff82 	bl	8005114 <std>
 8005210:	68a0      	ldr	r0, [r4, #8]
 8005212:	2201      	movs	r2, #1
 8005214:	2109      	movs	r1, #9
 8005216:	f7ff ff7d 	bl	8005114 <std>
 800521a:	68e0      	ldr	r0, [r4, #12]
 800521c:	2202      	movs	r2, #2
 800521e:	2112      	movs	r1, #18
 8005220:	f7ff ff78 	bl	8005114 <std>
 8005224:	2301      	movs	r3, #1
 8005226:	61a3      	str	r3, [r4, #24]
 8005228:	e7d2      	b.n	80051d0 <__sinit+0xc>
 800522a:	bf00      	nop
 800522c:	08006e98 	.word	0x08006e98
 8005230:	0800515d 	.word	0x0800515d

08005234 <__sfp>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	4607      	mov	r7, r0
 8005238:	f7ff ffac 	bl	8005194 <__sfp_lock_acquire>
 800523c:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <__sfp+0x84>)
 800523e:	681e      	ldr	r6, [r3, #0]
 8005240:	69b3      	ldr	r3, [r6, #24]
 8005242:	b913      	cbnz	r3, 800524a <__sfp+0x16>
 8005244:	4630      	mov	r0, r6
 8005246:	f7ff ffbd 	bl	80051c4 <__sinit>
 800524a:	3648      	adds	r6, #72	; 0x48
 800524c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005250:	3b01      	subs	r3, #1
 8005252:	d503      	bpl.n	800525c <__sfp+0x28>
 8005254:	6833      	ldr	r3, [r6, #0]
 8005256:	b30b      	cbz	r3, 800529c <__sfp+0x68>
 8005258:	6836      	ldr	r6, [r6, #0]
 800525a:	e7f7      	b.n	800524c <__sfp+0x18>
 800525c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005260:	b9d5      	cbnz	r5, 8005298 <__sfp+0x64>
 8005262:	4b16      	ldr	r3, [pc, #88]	; (80052bc <__sfp+0x88>)
 8005264:	60e3      	str	r3, [r4, #12]
 8005266:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800526a:	6665      	str	r5, [r4, #100]	; 0x64
 800526c:	f000 f859 	bl	8005322 <__retarget_lock_init_recursive>
 8005270:	f7ff ff96 	bl	80051a0 <__sfp_lock_release>
 8005274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800527c:	6025      	str	r5, [r4, #0]
 800527e:	61a5      	str	r5, [r4, #24]
 8005280:	2208      	movs	r2, #8
 8005282:	4629      	mov	r1, r5
 8005284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005288:	f7ff fc3e 	bl	8004b08 <memset>
 800528c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005294:	4620      	mov	r0, r4
 8005296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005298:	3468      	adds	r4, #104	; 0x68
 800529a:	e7d9      	b.n	8005250 <__sfp+0x1c>
 800529c:	2104      	movs	r1, #4
 800529e:	4638      	mov	r0, r7
 80052a0:	f7ff ff62 	bl	8005168 <__sfmoreglue>
 80052a4:	4604      	mov	r4, r0
 80052a6:	6030      	str	r0, [r6, #0]
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d1d5      	bne.n	8005258 <__sfp+0x24>
 80052ac:	f7ff ff78 	bl	80051a0 <__sfp_lock_release>
 80052b0:	230c      	movs	r3, #12
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	e7ee      	b.n	8005294 <__sfp+0x60>
 80052b6:	bf00      	nop
 80052b8:	08006e98 	.word	0x08006e98
 80052bc:	ffff0001 	.word	0xffff0001

080052c0 <fiprintf>:
 80052c0:	b40e      	push	{r1, r2, r3}
 80052c2:	b503      	push	{r0, r1, lr}
 80052c4:	4601      	mov	r1, r0
 80052c6:	ab03      	add	r3, sp, #12
 80052c8:	4805      	ldr	r0, [pc, #20]	; (80052e0 <fiprintf+0x20>)
 80052ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ce:	6800      	ldr	r0, [r0, #0]
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	f000 fafd 	bl	80058d0 <_vfiprintf_r>
 80052d6:	b002      	add	sp, #8
 80052d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052dc:	b003      	add	sp, #12
 80052de:	4770      	bx	lr
 80052e0:	2000003c 	.word	0x2000003c

080052e4 <_fwalk_reent>:
 80052e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e8:	4606      	mov	r6, r0
 80052ea:	4688      	mov	r8, r1
 80052ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052f0:	2700      	movs	r7, #0
 80052f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052f6:	f1b9 0901 	subs.w	r9, r9, #1
 80052fa:	d505      	bpl.n	8005308 <_fwalk_reent+0x24>
 80052fc:	6824      	ldr	r4, [r4, #0]
 80052fe:	2c00      	cmp	r4, #0
 8005300:	d1f7      	bne.n	80052f2 <_fwalk_reent+0xe>
 8005302:	4638      	mov	r0, r7
 8005304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005308:	89ab      	ldrh	r3, [r5, #12]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d907      	bls.n	800531e <_fwalk_reent+0x3a>
 800530e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005312:	3301      	adds	r3, #1
 8005314:	d003      	beq.n	800531e <_fwalk_reent+0x3a>
 8005316:	4629      	mov	r1, r5
 8005318:	4630      	mov	r0, r6
 800531a:	47c0      	blx	r8
 800531c:	4307      	orrs	r7, r0
 800531e:	3568      	adds	r5, #104	; 0x68
 8005320:	e7e9      	b.n	80052f6 <_fwalk_reent+0x12>

08005322 <__retarget_lock_init_recursive>:
 8005322:	4770      	bx	lr

08005324 <__retarget_lock_acquire_recursive>:
 8005324:	4770      	bx	lr

08005326 <__retarget_lock_release_recursive>:
 8005326:	4770      	bx	lr

08005328 <__swhatbuf_r>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	460e      	mov	r6, r1
 800532c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005330:	2900      	cmp	r1, #0
 8005332:	b096      	sub	sp, #88	; 0x58
 8005334:	4614      	mov	r4, r2
 8005336:	461d      	mov	r5, r3
 8005338:	da08      	bge.n	800534c <__swhatbuf_r+0x24>
 800533a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	602a      	str	r2, [r5, #0]
 8005342:	061a      	lsls	r2, r3, #24
 8005344:	d410      	bmi.n	8005368 <__swhatbuf_r+0x40>
 8005346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800534a:	e00e      	b.n	800536a <__swhatbuf_r+0x42>
 800534c:	466a      	mov	r2, sp
 800534e:	f000 fe01 	bl	8005f54 <_fstat_r>
 8005352:	2800      	cmp	r0, #0
 8005354:	dbf1      	blt.n	800533a <__swhatbuf_r+0x12>
 8005356:	9a01      	ldr	r2, [sp, #4]
 8005358:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800535c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005360:	425a      	negs	r2, r3
 8005362:	415a      	adcs	r2, r3
 8005364:	602a      	str	r2, [r5, #0]
 8005366:	e7ee      	b.n	8005346 <__swhatbuf_r+0x1e>
 8005368:	2340      	movs	r3, #64	; 0x40
 800536a:	2000      	movs	r0, #0
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	b016      	add	sp, #88	; 0x58
 8005370:	bd70      	pop	{r4, r5, r6, pc}
	...

08005374 <__smakebuf_r>:
 8005374:	898b      	ldrh	r3, [r1, #12]
 8005376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005378:	079d      	lsls	r5, r3, #30
 800537a:	4606      	mov	r6, r0
 800537c:	460c      	mov	r4, r1
 800537e:	d507      	bpl.n	8005390 <__smakebuf_r+0x1c>
 8005380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	6123      	str	r3, [r4, #16]
 8005388:	2301      	movs	r3, #1
 800538a:	6163      	str	r3, [r4, #20]
 800538c:	b002      	add	sp, #8
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	ab01      	add	r3, sp, #4
 8005392:	466a      	mov	r2, sp
 8005394:	f7ff ffc8 	bl	8005328 <__swhatbuf_r>
 8005398:	9900      	ldr	r1, [sp, #0]
 800539a:	4605      	mov	r5, r0
 800539c:	4630      	mov	r0, r6
 800539e:	f000 f89d 	bl	80054dc <_malloc_r>
 80053a2:	b948      	cbnz	r0, 80053b8 <__smakebuf_r+0x44>
 80053a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053a8:	059a      	lsls	r2, r3, #22
 80053aa:	d4ef      	bmi.n	800538c <__smakebuf_r+0x18>
 80053ac:	f023 0303 	bic.w	r3, r3, #3
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	81a3      	strh	r3, [r4, #12]
 80053b6:	e7e3      	b.n	8005380 <__smakebuf_r+0xc>
 80053b8:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <__smakebuf_r+0x7c>)
 80053ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	6020      	str	r0, [r4, #0]
 80053c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c4:	81a3      	strh	r3, [r4, #12]
 80053c6:	9b00      	ldr	r3, [sp, #0]
 80053c8:	6163      	str	r3, [r4, #20]
 80053ca:	9b01      	ldr	r3, [sp, #4]
 80053cc:	6120      	str	r0, [r4, #16]
 80053ce:	b15b      	cbz	r3, 80053e8 <__smakebuf_r+0x74>
 80053d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053d4:	4630      	mov	r0, r6
 80053d6:	f000 fdcf 	bl	8005f78 <_isatty_r>
 80053da:	b128      	cbz	r0, 80053e8 <__smakebuf_r+0x74>
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	f023 0303 	bic.w	r3, r3, #3
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	81a3      	strh	r3, [r4, #12]
 80053e8:	89a0      	ldrh	r0, [r4, #12]
 80053ea:	4305      	orrs	r5, r0
 80053ec:	81a5      	strh	r5, [r4, #12]
 80053ee:	e7cd      	b.n	800538c <__smakebuf_r+0x18>
 80053f0:	0800515d 	.word	0x0800515d

080053f4 <malloc>:
 80053f4:	4b02      	ldr	r3, [pc, #8]	; (8005400 <malloc+0xc>)
 80053f6:	4601      	mov	r1, r0
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	f000 b86f 	b.w	80054dc <_malloc_r>
 80053fe:	bf00      	nop
 8005400:	2000003c 	.word	0x2000003c

08005404 <_free_r>:
 8005404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005406:	2900      	cmp	r1, #0
 8005408:	d044      	beq.n	8005494 <_free_r+0x90>
 800540a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800540e:	9001      	str	r0, [sp, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f1a1 0404 	sub.w	r4, r1, #4
 8005416:	bfb8      	it	lt
 8005418:	18e4      	addlt	r4, r4, r3
 800541a:	f000 fde9 	bl	8005ff0 <__malloc_lock>
 800541e:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <_free_r+0x94>)
 8005420:	9801      	ldr	r0, [sp, #4]
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	b933      	cbnz	r3, 8005434 <_free_r+0x30>
 8005426:	6063      	str	r3, [r4, #4]
 8005428:	6014      	str	r4, [r2, #0]
 800542a:	b003      	add	sp, #12
 800542c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005430:	f000 bde4 	b.w	8005ffc <__malloc_unlock>
 8005434:	42a3      	cmp	r3, r4
 8005436:	d908      	bls.n	800544a <_free_r+0x46>
 8005438:	6825      	ldr	r5, [r4, #0]
 800543a:	1961      	adds	r1, r4, r5
 800543c:	428b      	cmp	r3, r1
 800543e:	bf01      	itttt	eq
 8005440:	6819      	ldreq	r1, [r3, #0]
 8005442:	685b      	ldreq	r3, [r3, #4]
 8005444:	1949      	addeq	r1, r1, r5
 8005446:	6021      	streq	r1, [r4, #0]
 8005448:	e7ed      	b.n	8005426 <_free_r+0x22>
 800544a:	461a      	mov	r2, r3
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	b10b      	cbz	r3, 8005454 <_free_r+0x50>
 8005450:	42a3      	cmp	r3, r4
 8005452:	d9fa      	bls.n	800544a <_free_r+0x46>
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	1855      	adds	r5, r2, r1
 8005458:	42a5      	cmp	r5, r4
 800545a:	d10b      	bne.n	8005474 <_free_r+0x70>
 800545c:	6824      	ldr	r4, [r4, #0]
 800545e:	4421      	add	r1, r4
 8005460:	1854      	adds	r4, r2, r1
 8005462:	42a3      	cmp	r3, r4
 8005464:	6011      	str	r1, [r2, #0]
 8005466:	d1e0      	bne.n	800542a <_free_r+0x26>
 8005468:	681c      	ldr	r4, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	6053      	str	r3, [r2, #4]
 800546e:	4421      	add	r1, r4
 8005470:	6011      	str	r1, [r2, #0]
 8005472:	e7da      	b.n	800542a <_free_r+0x26>
 8005474:	d902      	bls.n	800547c <_free_r+0x78>
 8005476:	230c      	movs	r3, #12
 8005478:	6003      	str	r3, [r0, #0]
 800547a:	e7d6      	b.n	800542a <_free_r+0x26>
 800547c:	6825      	ldr	r5, [r4, #0]
 800547e:	1961      	adds	r1, r4, r5
 8005480:	428b      	cmp	r3, r1
 8005482:	bf04      	itt	eq
 8005484:	6819      	ldreq	r1, [r3, #0]
 8005486:	685b      	ldreq	r3, [r3, #4]
 8005488:	6063      	str	r3, [r4, #4]
 800548a:	bf04      	itt	eq
 800548c:	1949      	addeq	r1, r1, r5
 800548e:	6021      	streq	r1, [r4, #0]
 8005490:	6054      	str	r4, [r2, #4]
 8005492:	e7ca      	b.n	800542a <_free_r+0x26>
 8005494:	b003      	add	sp, #12
 8005496:	bd30      	pop	{r4, r5, pc}
 8005498:	20001328 	.word	0x20001328

0800549c <sbrk_aligned>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	4e0e      	ldr	r6, [pc, #56]	; (80054d8 <sbrk_aligned+0x3c>)
 80054a0:	460c      	mov	r4, r1
 80054a2:	6831      	ldr	r1, [r6, #0]
 80054a4:	4605      	mov	r5, r0
 80054a6:	b911      	cbnz	r1, 80054ae <sbrk_aligned+0x12>
 80054a8:	f000 fcd6 	bl	8005e58 <_sbrk_r>
 80054ac:	6030      	str	r0, [r6, #0]
 80054ae:	4621      	mov	r1, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 fcd1 	bl	8005e58 <_sbrk_r>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	d00a      	beq.n	80054d0 <sbrk_aligned+0x34>
 80054ba:	1cc4      	adds	r4, r0, #3
 80054bc:	f024 0403 	bic.w	r4, r4, #3
 80054c0:	42a0      	cmp	r0, r4
 80054c2:	d007      	beq.n	80054d4 <sbrk_aligned+0x38>
 80054c4:	1a21      	subs	r1, r4, r0
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 fcc6 	bl	8005e58 <_sbrk_r>
 80054cc:	3001      	adds	r0, #1
 80054ce:	d101      	bne.n	80054d4 <sbrk_aligned+0x38>
 80054d0:	f04f 34ff 	mov.w	r4, #4294967295
 80054d4:	4620      	mov	r0, r4
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	2000132c 	.word	0x2000132c

080054dc <_malloc_r>:
 80054dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e0:	1ccd      	adds	r5, r1, #3
 80054e2:	f025 0503 	bic.w	r5, r5, #3
 80054e6:	3508      	adds	r5, #8
 80054e8:	2d0c      	cmp	r5, #12
 80054ea:	bf38      	it	cc
 80054ec:	250c      	movcc	r5, #12
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	4607      	mov	r7, r0
 80054f2:	db01      	blt.n	80054f8 <_malloc_r+0x1c>
 80054f4:	42a9      	cmp	r1, r5
 80054f6:	d905      	bls.n	8005504 <_malloc_r+0x28>
 80054f8:	230c      	movs	r3, #12
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	2600      	movs	r6, #0
 80054fe:	4630      	mov	r0, r6
 8005500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005504:	4e2e      	ldr	r6, [pc, #184]	; (80055c0 <_malloc_r+0xe4>)
 8005506:	f000 fd73 	bl	8005ff0 <__malloc_lock>
 800550a:	6833      	ldr	r3, [r6, #0]
 800550c:	461c      	mov	r4, r3
 800550e:	bb34      	cbnz	r4, 800555e <_malloc_r+0x82>
 8005510:	4629      	mov	r1, r5
 8005512:	4638      	mov	r0, r7
 8005514:	f7ff ffc2 	bl	800549c <sbrk_aligned>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	4604      	mov	r4, r0
 800551c:	d14d      	bne.n	80055ba <_malloc_r+0xde>
 800551e:	6834      	ldr	r4, [r6, #0]
 8005520:	4626      	mov	r6, r4
 8005522:	2e00      	cmp	r6, #0
 8005524:	d140      	bne.n	80055a8 <_malloc_r+0xcc>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	4631      	mov	r1, r6
 800552a:	4638      	mov	r0, r7
 800552c:	eb04 0803 	add.w	r8, r4, r3
 8005530:	f000 fc92 	bl	8005e58 <_sbrk_r>
 8005534:	4580      	cmp	r8, r0
 8005536:	d13a      	bne.n	80055ae <_malloc_r+0xd2>
 8005538:	6821      	ldr	r1, [r4, #0]
 800553a:	3503      	adds	r5, #3
 800553c:	1a6d      	subs	r5, r5, r1
 800553e:	f025 0503 	bic.w	r5, r5, #3
 8005542:	3508      	adds	r5, #8
 8005544:	2d0c      	cmp	r5, #12
 8005546:	bf38      	it	cc
 8005548:	250c      	movcc	r5, #12
 800554a:	4629      	mov	r1, r5
 800554c:	4638      	mov	r0, r7
 800554e:	f7ff ffa5 	bl	800549c <sbrk_aligned>
 8005552:	3001      	adds	r0, #1
 8005554:	d02b      	beq.n	80055ae <_malloc_r+0xd2>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	442b      	add	r3, r5
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	e00e      	b.n	800557c <_malloc_r+0xa0>
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	1b52      	subs	r2, r2, r5
 8005562:	d41e      	bmi.n	80055a2 <_malloc_r+0xc6>
 8005564:	2a0b      	cmp	r2, #11
 8005566:	d916      	bls.n	8005596 <_malloc_r+0xba>
 8005568:	1961      	adds	r1, r4, r5
 800556a:	42a3      	cmp	r3, r4
 800556c:	6025      	str	r5, [r4, #0]
 800556e:	bf18      	it	ne
 8005570:	6059      	strne	r1, [r3, #4]
 8005572:	6863      	ldr	r3, [r4, #4]
 8005574:	bf08      	it	eq
 8005576:	6031      	streq	r1, [r6, #0]
 8005578:	5162      	str	r2, [r4, r5]
 800557a:	604b      	str	r3, [r1, #4]
 800557c:	4638      	mov	r0, r7
 800557e:	f104 060b 	add.w	r6, r4, #11
 8005582:	f000 fd3b 	bl	8005ffc <__malloc_unlock>
 8005586:	f026 0607 	bic.w	r6, r6, #7
 800558a:	1d23      	adds	r3, r4, #4
 800558c:	1af2      	subs	r2, r6, r3
 800558e:	d0b6      	beq.n	80054fe <_malloc_r+0x22>
 8005590:	1b9b      	subs	r3, r3, r6
 8005592:	50a3      	str	r3, [r4, r2]
 8005594:	e7b3      	b.n	80054fe <_malloc_r+0x22>
 8005596:	6862      	ldr	r2, [r4, #4]
 8005598:	42a3      	cmp	r3, r4
 800559a:	bf0c      	ite	eq
 800559c:	6032      	streq	r2, [r6, #0]
 800559e:	605a      	strne	r2, [r3, #4]
 80055a0:	e7ec      	b.n	800557c <_malloc_r+0xa0>
 80055a2:	4623      	mov	r3, r4
 80055a4:	6864      	ldr	r4, [r4, #4]
 80055a6:	e7b2      	b.n	800550e <_malloc_r+0x32>
 80055a8:	4634      	mov	r4, r6
 80055aa:	6876      	ldr	r6, [r6, #4]
 80055ac:	e7b9      	b.n	8005522 <_malloc_r+0x46>
 80055ae:	230c      	movs	r3, #12
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	4638      	mov	r0, r7
 80055b4:	f000 fd22 	bl	8005ffc <__malloc_unlock>
 80055b8:	e7a1      	b.n	80054fe <_malloc_r+0x22>
 80055ba:	6025      	str	r5, [r4, #0]
 80055bc:	e7de      	b.n	800557c <_malloc_r+0xa0>
 80055be:	bf00      	nop
 80055c0:	20001328 	.word	0x20001328

080055c4 <__ssputs_r>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	688e      	ldr	r6, [r1, #8]
 80055ca:	429e      	cmp	r6, r3
 80055cc:	4682      	mov	sl, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	4690      	mov	r8, r2
 80055d2:	461f      	mov	r7, r3
 80055d4:	d838      	bhi.n	8005648 <__ssputs_r+0x84>
 80055d6:	898a      	ldrh	r2, [r1, #12]
 80055d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055dc:	d032      	beq.n	8005644 <__ssputs_r+0x80>
 80055de:	6825      	ldr	r5, [r4, #0]
 80055e0:	6909      	ldr	r1, [r1, #16]
 80055e2:	eba5 0901 	sub.w	r9, r5, r1
 80055e6:	6965      	ldr	r5, [r4, #20]
 80055e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055f0:	3301      	adds	r3, #1
 80055f2:	444b      	add	r3, r9
 80055f4:	106d      	asrs	r5, r5, #1
 80055f6:	429d      	cmp	r5, r3
 80055f8:	bf38      	it	cc
 80055fa:	461d      	movcc	r5, r3
 80055fc:	0553      	lsls	r3, r2, #21
 80055fe:	d531      	bpl.n	8005664 <__ssputs_r+0xa0>
 8005600:	4629      	mov	r1, r5
 8005602:	f7ff ff6b 	bl	80054dc <_malloc_r>
 8005606:	4606      	mov	r6, r0
 8005608:	b950      	cbnz	r0, 8005620 <__ssputs_r+0x5c>
 800560a:	230c      	movs	r3, #12
 800560c:	f8ca 3000 	str.w	r3, [sl]
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	f04f 30ff 	mov.w	r0, #4294967295
 800561c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005620:	6921      	ldr	r1, [r4, #16]
 8005622:	464a      	mov	r2, r9
 8005624:	f7ff fa62 	bl	8004aec <memcpy>
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800562e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005632:	81a3      	strh	r3, [r4, #12]
 8005634:	6126      	str	r6, [r4, #16]
 8005636:	6165      	str	r5, [r4, #20]
 8005638:	444e      	add	r6, r9
 800563a:	eba5 0509 	sub.w	r5, r5, r9
 800563e:	6026      	str	r6, [r4, #0]
 8005640:	60a5      	str	r5, [r4, #8]
 8005642:	463e      	mov	r6, r7
 8005644:	42be      	cmp	r6, r7
 8005646:	d900      	bls.n	800564a <__ssputs_r+0x86>
 8005648:	463e      	mov	r6, r7
 800564a:	6820      	ldr	r0, [r4, #0]
 800564c:	4632      	mov	r2, r6
 800564e:	4641      	mov	r1, r8
 8005650:	f000 fcb4 	bl	8005fbc <memmove>
 8005654:	68a3      	ldr	r3, [r4, #8]
 8005656:	1b9b      	subs	r3, r3, r6
 8005658:	60a3      	str	r3, [r4, #8]
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	4433      	add	r3, r6
 800565e:	6023      	str	r3, [r4, #0]
 8005660:	2000      	movs	r0, #0
 8005662:	e7db      	b.n	800561c <__ssputs_r+0x58>
 8005664:	462a      	mov	r2, r5
 8005666:	f000 fccf 	bl	8006008 <_realloc_r>
 800566a:	4606      	mov	r6, r0
 800566c:	2800      	cmp	r0, #0
 800566e:	d1e1      	bne.n	8005634 <__ssputs_r+0x70>
 8005670:	6921      	ldr	r1, [r4, #16]
 8005672:	4650      	mov	r0, sl
 8005674:	f7ff fec6 	bl	8005404 <_free_r>
 8005678:	e7c7      	b.n	800560a <__ssputs_r+0x46>
	...

0800567c <_svfiprintf_r>:
 800567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005680:	4698      	mov	r8, r3
 8005682:	898b      	ldrh	r3, [r1, #12]
 8005684:	061b      	lsls	r3, r3, #24
 8005686:	b09d      	sub	sp, #116	; 0x74
 8005688:	4607      	mov	r7, r0
 800568a:	460d      	mov	r5, r1
 800568c:	4614      	mov	r4, r2
 800568e:	d50e      	bpl.n	80056ae <_svfiprintf_r+0x32>
 8005690:	690b      	ldr	r3, [r1, #16]
 8005692:	b963      	cbnz	r3, 80056ae <_svfiprintf_r+0x32>
 8005694:	2140      	movs	r1, #64	; 0x40
 8005696:	f7ff ff21 	bl	80054dc <_malloc_r>
 800569a:	6028      	str	r0, [r5, #0]
 800569c:	6128      	str	r0, [r5, #16]
 800569e:	b920      	cbnz	r0, 80056aa <_svfiprintf_r+0x2e>
 80056a0:	230c      	movs	r3, #12
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	e0d1      	b.n	800584e <_svfiprintf_r+0x1d2>
 80056aa:	2340      	movs	r3, #64	; 0x40
 80056ac:	616b      	str	r3, [r5, #20]
 80056ae:	2300      	movs	r3, #0
 80056b0:	9309      	str	r3, [sp, #36]	; 0x24
 80056b2:	2320      	movs	r3, #32
 80056b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80056bc:	2330      	movs	r3, #48	; 0x30
 80056be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005868 <_svfiprintf_r+0x1ec>
 80056c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056c6:	f04f 0901 	mov.w	r9, #1
 80056ca:	4623      	mov	r3, r4
 80056cc:	469a      	mov	sl, r3
 80056ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056d2:	b10a      	cbz	r2, 80056d8 <_svfiprintf_r+0x5c>
 80056d4:	2a25      	cmp	r2, #37	; 0x25
 80056d6:	d1f9      	bne.n	80056cc <_svfiprintf_r+0x50>
 80056d8:	ebba 0b04 	subs.w	fp, sl, r4
 80056dc:	d00b      	beq.n	80056f6 <_svfiprintf_r+0x7a>
 80056de:	465b      	mov	r3, fp
 80056e0:	4622      	mov	r2, r4
 80056e2:	4629      	mov	r1, r5
 80056e4:	4638      	mov	r0, r7
 80056e6:	f7ff ff6d 	bl	80055c4 <__ssputs_r>
 80056ea:	3001      	adds	r0, #1
 80056ec:	f000 80aa 	beq.w	8005844 <_svfiprintf_r+0x1c8>
 80056f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f2:	445a      	add	r2, fp
 80056f4:	9209      	str	r2, [sp, #36]	; 0x24
 80056f6:	f89a 3000 	ldrb.w	r3, [sl]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80a2 	beq.w	8005844 <_svfiprintf_r+0x1c8>
 8005700:	2300      	movs	r3, #0
 8005702:	f04f 32ff 	mov.w	r2, #4294967295
 8005706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800570a:	f10a 0a01 	add.w	sl, sl, #1
 800570e:	9304      	str	r3, [sp, #16]
 8005710:	9307      	str	r3, [sp, #28]
 8005712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005716:	931a      	str	r3, [sp, #104]	; 0x68
 8005718:	4654      	mov	r4, sl
 800571a:	2205      	movs	r2, #5
 800571c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005720:	4851      	ldr	r0, [pc, #324]	; (8005868 <_svfiprintf_r+0x1ec>)
 8005722:	f7fa fd5d 	bl	80001e0 <memchr>
 8005726:	9a04      	ldr	r2, [sp, #16]
 8005728:	b9d8      	cbnz	r0, 8005762 <_svfiprintf_r+0xe6>
 800572a:	06d0      	lsls	r0, r2, #27
 800572c:	bf44      	itt	mi
 800572e:	2320      	movmi	r3, #32
 8005730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005734:	0711      	lsls	r1, r2, #28
 8005736:	bf44      	itt	mi
 8005738:	232b      	movmi	r3, #43	; 0x2b
 800573a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800573e:	f89a 3000 	ldrb.w	r3, [sl]
 8005742:	2b2a      	cmp	r3, #42	; 0x2a
 8005744:	d015      	beq.n	8005772 <_svfiprintf_r+0xf6>
 8005746:	9a07      	ldr	r2, [sp, #28]
 8005748:	4654      	mov	r4, sl
 800574a:	2000      	movs	r0, #0
 800574c:	f04f 0c0a 	mov.w	ip, #10
 8005750:	4621      	mov	r1, r4
 8005752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005756:	3b30      	subs	r3, #48	; 0x30
 8005758:	2b09      	cmp	r3, #9
 800575a:	d94e      	bls.n	80057fa <_svfiprintf_r+0x17e>
 800575c:	b1b0      	cbz	r0, 800578c <_svfiprintf_r+0x110>
 800575e:	9207      	str	r2, [sp, #28]
 8005760:	e014      	b.n	800578c <_svfiprintf_r+0x110>
 8005762:	eba0 0308 	sub.w	r3, r0, r8
 8005766:	fa09 f303 	lsl.w	r3, r9, r3
 800576a:	4313      	orrs	r3, r2
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	46a2      	mov	sl, r4
 8005770:	e7d2      	b.n	8005718 <_svfiprintf_r+0x9c>
 8005772:	9b03      	ldr	r3, [sp, #12]
 8005774:	1d19      	adds	r1, r3, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	9103      	str	r1, [sp, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	bfbb      	ittet	lt
 800577e:	425b      	neglt	r3, r3
 8005780:	f042 0202 	orrlt.w	r2, r2, #2
 8005784:	9307      	strge	r3, [sp, #28]
 8005786:	9307      	strlt	r3, [sp, #28]
 8005788:	bfb8      	it	lt
 800578a:	9204      	strlt	r2, [sp, #16]
 800578c:	7823      	ldrb	r3, [r4, #0]
 800578e:	2b2e      	cmp	r3, #46	; 0x2e
 8005790:	d10c      	bne.n	80057ac <_svfiprintf_r+0x130>
 8005792:	7863      	ldrb	r3, [r4, #1]
 8005794:	2b2a      	cmp	r3, #42	; 0x2a
 8005796:	d135      	bne.n	8005804 <_svfiprintf_r+0x188>
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	9203      	str	r2, [sp, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bfb8      	it	lt
 80057a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80057a8:	3402      	adds	r4, #2
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005878 <_svfiprintf_r+0x1fc>
 80057b0:	7821      	ldrb	r1, [r4, #0]
 80057b2:	2203      	movs	r2, #3
 80057b4:	4650      	mov	r0, sl
 80057b6:	f7fa fd13 	bl	80001e0 <memchr>
 80057ba:	b140      	cbz	r0, 80057ce <_svfiprintf_r+0x152>
 80057bc:	2340      	movs	r3, #64	; 0x40
 80057be:	eba0 000a 	sub.w	r0, r0, sl
 80057c2:	fa03 f000 	lsl.w	r0, r3, r0
 80057c6:	9b04      	ldr	r3, [sp, #16]
 80057c8:	4303      	orrs	r3, r0
 80057ca:	3401      	adds	r4, #1
 80057cc:	9304      	str	r3, [sp, #16]
 80057ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d2:	4826      	ldr	r0, [pc, #152]	; (800586c <_svfiprintf_r+0x1f0>)
 80057d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057d8:	2206      	movs	r2, #6
 80057da:	f7fa fd01 	bl	80001e0 <memchr>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d038      	beq.n	8005854 <_svfiprintf_r+0x1d8>
 80057e2:	4b23      	ldr	r3, [pc, #140]	; (8005870 <_svfiprintf_r+0x1f4>)
 80057e4:	bb1b      	cbnz	r3, 800582e <_svfiprintf_r+0x1b2>
 80057e6:	9b03      	ldr	r3, [sp, #12]
 80057e8:	3307      	adds	r3, #7
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	3308      	adds	r3, #8
 80057f0:	9303      	str	r3, [sp, #12]
 80057f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f4:	4433      	add	r3, r6
 80057f6:	9309      	str	r3, [sp, #36]	; 0x24
 80057f8:	e767      	b.n	80056ca <_svfiprintf_r+0x4e>
 80057fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80057fe:	460c      	mov	r4, r1
 8005800:	2001      	movs	r0, #1
 8005802:	e7a5      	b.n	8005750 <_svfiprintf_r+0xd4>
 8005804:	2300      	movs	r3, #0
 8005806:	3401      	adds	r4, #1
 8005808:	9305      	str	r3, [sp, #20]
 800580a:	4619      	mov	r1, r3
 800580c:	f04f 0c0a 	mov.w	ip, #10
 8005810:	4620      	mov	r0, r4
 8005812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005816:	3a30      	subs	r2, #48	; 0x30
 8005818:	2a09      	cmp	r2, #9
 800581a:	d903      	bls.n	8005824 <_svfiprintf_r+0x1a8>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0c5      	beq.n	80057ac <_svfiprintf_r+0x130>
 8005820:	9105      	str	r1, [sp, #20]
 8005822:	e7c3      	b.n	80057ac <_svfiprintf_r+0x130>
 8005824:	fb0c 2101 	mla	r1, ip, r1, r2
 8005828:	4604      	mov	r4, r0
 800582a:	2301      	movs	r3, #1
 800582c:	e7f0      	b.n	8005810 <_svfiprintf_r+0x194>
 800582e:	ab03      	add	r3, sp, #12
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	462a      	mov	r2, r5
 8005834:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <_svfiprintf_r+0x1f8>)
 8005836:	a904      	add	r1, sp, #16
 8005838:	4638      	mov	r0, r7
 800583a:	f3af 8000 	nop.w
 800583e:	1c42      	adds	r2, r0, #1
 8005840:	4606      	mov	r6, r0
 8005842:	d1d6      	bne.n	80057f2 <_svfiprintf_r+0x176>
 8005844:	89ab      	ldrh	r3, [r5, #12]
 8005846:	065b      	lsls	r3, r3, #25
 8005848:	f53f af2c 	bmi.w	80056a4 <_svfiprintf_r+0x28>
 800584c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800584e:	b01d      	add	sp, #116	; 0x74
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005854:	ab03      	add	r3, sp, #12
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	462a      	mov	r2, r5
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <_svfiprintf_r+0x1f8>)
 800585c:	a904      	add	r1, sp, #16
 800585e:	4638      	mov	r0, r7
 8005860:	f000 f9d4 	bl	8005c0c <_printf_i>
 8005864:	e7eb      	b.n	800583e <_svfiprintf_r+0x1c2>
 8005866:	bf00      	nop
 8005868:	08006fac 	.word	0x08006fac
 800586c:	08006fb6 	.word	0x08006fb6
 8005870:	00000000 	.word	0x00000000
 8005874:	080055c5 	.word	0x080055c5
 8005878:	08006fb2 	.word	0x08006fb2

0800587c <__sfputc_r>:
 800587c:	6893      	ldr	r3, [r2, #8]
 800587e:	3b01      	subs	r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	b410      	push	{r4}
 8005884:	6093      	str	r3, [r2, #8]
 8005886:	da08      	bge.n	800589a <__sfputc_r+0x1e>
 8005888:	6994      	ldr	r4, [r2, #24]
 800588a:	42a3      	cmp	r3, r4
 800588c:	db01      	blt.n	8005892 <__sfputc_r+0x16>
 800588e:	290a      	cmp	r1, #10
 8005890:	d103      	bne.n	800589a <__sfputc_r+0x1e>
 8005892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005896:	f7ff ba9d 	b.w	8004dd4 <__swbuf_r>
 800589a:	6813      	ldr	r3, [r2, #0]
 800589c:	1c58      	adds	r0, r3, #1
 800589e:	6010      	str	r0, [r2, #0]
 80058a0:	7019      	strb	r1, [r3, #0]
 80058a2:	4608      	mov	r0, r1
 80058a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <__sfputs_r>:
 80058aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ac:	4606      	mov	r6, r0
 80058ae:	460f      	mov	r7, r1
 80058b0:	4614      	mov	r4, r2
 80058b2:	18d5      	adds	r5, r2, r3
 80058b4:	42ac      	cmp	r4, r5
 80058b6:	d101      	bne.n	80058bc <__sfputs_r+0x12>
 80058b8:	2000      	movs	r0, #0
 80058ba:	e007      	b.n	80058cc <__sfputs_r+0x22>
 80058bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c0:	463a      	mov	r2, r7
 80058c2:	4630      	mov	r0, r6
 80058c4:	f7ff ffda 	bl	800587c <__sfputc_r>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d1f3      	bne.n	80058b4 <__sfputs_r+0xa>
 80058cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058d0 <_vfiprintf_r>:
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	460d      	mov	r5, r1
 80058d6:	b09d      	sub	sp, #116	; 0x74
 80058d8:	4614      	mov	r4, r2
 80058da:	4698      	mov	r8, r3
 80058dc:	4606      	mov	r6, r0
 80058de:	b118      	cbz	r0, 80058e8 <_vfiprintf_r+0x18>
 80058e0:	6983      	ldr	r3, [r0, #24]
 80058e2:	b90b      	cbnz	r3, 80058e8 <_vfiprintf_r+0x18>
 80058e4:	f7ff fc6e 	bl	80051c4 <__sinit>
 80058e8:	4b89      	ldr	r3, [pc, #548]	; (8005b10 <_vfiprintf_r+0x240>)
 80058ea:	429d      	cmp	r5, r3
 80058ec:	d11b      	bne.n	8005926 <_vfiprintf_r+0x56>
 80058ee:	6875      	ldr	r5, [r6, #4]
 80058f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058f2:	07d9      	lsls	r1, r3, #31
 80058f4:	d405      	bmi.n	8005902 <_vfiprintf_r+0x32>
 80058f6:	89ab      	ldrh	r3, [r5, #12]
 80058f8:	059a      	lsls	r2, r3, #22
 80058fa:	d402      	bmi.n	8005902 <_vfiprintf_r+0x32>
 80058fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058fe:	f7ff fd11 	bl	8005324 <__retarget_lock_acquire_recursive>
 8005902:	89ab      	ldrh	r3, [r5, #12]
 8005904:	071b      	lsls	r3, r3, #28
 8005906:	d501      	bpl.n	800590c <_vfiprintf_r+0x3c>
 8005908:	692b      	ldr	r3, [r5, #16]
 800590a:	b9eb      	cbnz	r3, 8005948 <_vfiprintf_r+0x78>
 800590c:	4629      	mov	r1, r5
 800590e:	4630      	mov	r0, r6
 8005910:	f7ff fab2 	bl	8004e78 <__swsetup_r>
 8005914:	b1c0      	cbz	r0, 8005948 <_vfiprintf_r+0x78>
 8005916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005918:	07dc      	lsls	r4, r3, #31
 800591a:	d50e      	bpl.n	800593a <_vfiprintf_r+0x6a>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	b01d      	add	sp, #116	; 0x74
 8005922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005926:	4b7b      	ldr	r3, [pc, #492]	; (8005b14 <_vfiprintf_r+0x244>)
 8005928:	429d      	cmp	r5, r3
 800592a:	d101      	bne.n	8005930 <_vfiprintf_r+0x60>
 800592c:	68b5      	ldr	r5, [r6, #8]
 800592e:	e7df      	b.n	80058f0 <_vfiprintf_r+0x20>
 8005930:	4b79      	ldr	r3, [pc, #484]	; (8005b18 <_vfiprintf_r+0x248>)
 8005932:	429d      	cmp	r5, r3
 8005934:	bf08      	it	eq
 8005936:	68f5      	ldreq	r5, [r6, #12]
 8005938:	e7da      	b.n	80058f0 <_vfiprintf_r+0x20>
 800593a:	89ab      	ldrh	r3, [r5, #12]
 800593c:	0598      	lsls	r0, r3, #22
 800593e:	d4ed      	bmi.n	800591c <_vfiprintf_r+0x4c>
 8005940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005942:	f7ff fcf0 	bl	8005326 <__retarget_lock_release_recursive>
 8005946:	e7e9      	b.n	800591c <_vfiprintf_r+0x4c>
 8005948:	2300      	movs	r3, #0
 800594a:	9309      	str	r3, [sp, #36]	; 0x24
 800594c:	2320      	movs	r3, #32
 800594e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005952:	f8cd 800c 	str.w	r8, [sp, #12]
 8005956:	2330      	movs	r3, #48	; 0x30
 8005958:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b1c <_vfiprintf_r+0x24c>
 800595c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005960:	f04f 0901 	mov.w	r9, #1
 8005964:	4623      	mov	r3, r4
 8005966:	469a      	mov	sl, r3
 8005968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800596c:	b10a      	cbz	r2, 8005972 <_vfiprintf_r+0xa2>
 800596e:	2a25      	cmp	r2, #37	; 0x25
 8005970:	d1f9      	bne.n	8005966 <_vfiprintf_r+0x96>
 8005972:	ebba 0b04 	subs.w	fp, sl, r4
 8005976:	d00b      	beq.n	8005990 <_vfiprintf_r+0xc0>
 8005978:	465b      	mov	r3, fp
 800597a:	4622      	mov	r2, r4
 800597c:	4629      	mov	r1, r5
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff ff93 	bl	80058aa <__sfputs_r>
 8005984:	3001      	adds	r0, #1
 8005986:	f000 80aa 	beq.w	8005ade <_vfiprintf_r+0x20e>
 800598a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800598c:	445a      	add	r2, fp
 800598e:	9209      	str	r2, [sp, #36]	; 0x24
 8005990:	f89a 3000 	ldrb.w	r3, [sl]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80a2 	beq.w	8005ade <_vfiprintf_r+0x20e>
 800599a:	2300      	movs	r3, #0
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059a4:	f10a 0a01 	add.w	sl, sl, #1
 80059a8:	9304      	str	r3, [sp, #16]
 80059aa:	9307      	str	r3, [sp, #28]
 80059ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059b0:	931a      	str	r3, [sp, #104]	; 0x68
 80059b2:	4654      	mov	r4, sl
 80059b4:	2205      	movs	r2, #5
 80059b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ba:	4858      	ldr	r0, [pc, #352]	; (8005b1c <_vfiprintf_r+0x24c>)
 80059bc:	f7fa fc10 	bl	80001e0 <memchr>
 80059c0:	9a04      	ldr	r2, [sp, #16]
 80059c2:	b9d8      	cbnz	r0, 80059fc <_vfiprintf_r+0x12c>
 80059c4:	06d1      	lsls	r1, r2, #27
 80059c6:	bf44      	itt	mi
 80059c8:	2320      	movmi	r3, #32
 80059ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ce:	0713      	lsls	r3, r2, #28
 80059d0:	bf44      	itt	mi
 80059d2:	232b      	movmi	r3, #43	; 0x2b
 80059d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d8:	f89a 3000 	ldrb.w	r3, [sl]
 80059dc:	2b2a      	cmp	r3, #42	; 0x2a
 80059de:	d015      	beq.n	8005a0c <_vfiprintf_r+0x13c>
 80059e0:	9a07      	ldr	r2, [sp, #28]
 80059e2:	4654      	mov	r4, sl
 80059e4:	2000      	movs	r0, #0
 80059e6:	f04f 0c0a 	mov.w	ip, #10
 80059ea:	4621      	mov	r1, r4
 80059ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f0:	3b30      	subs	r3, #48	; 0x30
 80059f2:	2b09      	cmp	r3, #9
 80059f4:	d94e      	bls.n	8005a94 <_vfiprintf_r+0x1c4>
 80059f6:	b1b0      	cbz	r0, 8005a26 <_vfiprintf_r+0x156>
 80059f8:	9207      	str	r2, [sp, #28]
 80059fa:	e014      	b.n	8005a26 <_vfiprintf_r+0x156>
 80059fc:	eba0 0308 	sub.w	r3, r0, r8
 8005a00:	fa09 f303 	lsl.w	r3, r9, r3
 8005a04:	4313      	orrs	r3, r2
 8005a06:	9304      	str	r3, [sp, #16]
 8005a08:	46a2      	mov	sl, r4
 8005a0a:	e7d2      	b.n	80059b2 <_vfiprintf_r+0xe2>
 8005a0c:	9b03      	ldr	r3, [sp, #12]
 8005a0e:	1d19      	adds	r1, r3, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	9103      	str	r1, [sp, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfbb      	ittet	lt
 8005a18:	425b      	neglt	r3, r3
 8005a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8005a1e:	9307      	strge	r3, [sp, #28]
 8005a20:	9307      	strlt	r3, [sp, #28]
 8005a22:	bfb8      	it	lt
 8005a24:	9204      	strlt	r2, [sp, #16]
 8005a26:	7823      	ldrb	r3, [r4, #0]
 8005a28:	2b2e      	cmp	r3, #46	; 0x2e
 8005a2a:	d10c      	bne.n	8005a46 <_vfiprintf_r+0x176>
 8005a2c:	7863      	ldrb	r3, [r4, #1]
 8005a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a30:	d135      	bne.n	8005a9e <_vfiprintf_r+0x1ce>
 8005a32:	9b03      	ldr	r3, [sp, #12]
 8005a34:	1d1a      	adds	r2, r3, #4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	9203      	str	r2, [sp, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bfb8      	it	lt
 8005a3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a42:	3402      	adds	r4, #2
 8005a44:	9305      	str	r3, [sp, #20]
 8005a46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b2c <_vfiprintf_r+0x25c>
 8005a4a:	7821      	ldrb	r1, [r4, #0]
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	4650      	mov	r0, sl
 8005a50:	f7fa fbc6 	bl	80001e0 <memchr>
 8005a54:	b140      	cbz	r0, 8005a68 <_vfiprintf_r+0x198>
 8005a56:	2340      	movs	r3, #64	; 0x40
 8005a58:	eba0 000a 	sub.w	r0, r0, sl
 8005a5c:	fa03 f000 	lsl.w	r0, r3, r0
 8005a60:	9b04      	ldr	r3, [sp, #16]
 8005a62:	4303      	orrs	r3, r0
 8005a64:	3401      	adds	r4, #1
 8005a66:	9304      	str	r3, [sp, #16]
 8005a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a6c:	482c      	ldr	r0, [pc, #176]	; (8005b20 <_vfiprintf_r+0x250>)
 8005a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a72:	2206      	movs	r2, #6
 8005a74:	f7fa fbb4 	bl	80001e0 <memchr>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d03f      	beq.n	8005afc <_vfiprintf_r+0x22c>
 8005a7c:	4b29      	ldr	r3, [pc, #164]	; (8005b24 <_vfiprintf_r+0x254>)
 8005a7e:	bb1b      	cbnz	r3, 8005ac8 <_vfiprintf_r+0x1f8>
 8005a80:	9b03      	ldr	r3, [sp, #12]
 8005a82:	3307      	adds	r3, #7
 8005a84:	f023 0307 	bic.w	r3, r3, #7
 8005a88:	3308      	adds	r3, #8
 8005a8a:	9303      	str	r3, [sp, #12]
 8005a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a8e:	443b      	add	r3, r7
 8005a90:	9309      	str	r3, [sp, #36]	; 0x24
 8005a92:	e767      	b.n	8005964 <_vfiprintf_r+0x94>
 8005a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a98:	460c      	mov	r4, r1
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	e7a5      	b.n	80059ea <_vfiprintf_r+0x11a>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	3401      	adds	r4, #1
 8005aa2:	9305      	str	r3, [sp, #20]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f04f 0c0a 	mov.w	ip, #10
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ab0:	3a30      	subs	r2, #48	; 0x30
 8005ab2:	2a09      	cmp	r2, #9
 8005ab4:	d903      	bls.n	8005abe <_vfiprintf_r+0x1ee>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0c5      	beq.n	8005a46 <_vfiprintf_r+0x176>
 8005aba:	9105      	str	r1, [sp, #20]
 8005abc:	e7c3      	b.n	8005a46 <_vfiprintf_r+0x176>
 8005abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e7f0      	b.n	8005aaa <_vfiprintf_r+0x1da>
 8005ac8:	ab03      	add	r3, sp, #12
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	462a      	mov	r2, r5
 8005ace:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <_vfiprintf_r+0x258>)
 8005ad0:	a904      	add	r1, sp, #16
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	4607      	mov	r7, r0
 8005ada:	1c78      	adds	r0, r7, #1
 8005adc:	d1d6      	bne.n	8005a8c <_vfiprintf_r+0x1bc>
 8005ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ae0:	07d9      	lsls	r1, r3, #31
 8005ae2:	d405      	bmi.n	8005af0 <_vfiprintf_r+0x220>
 8005ae4:	89ab      	ldrh	r3, [r5, #12]
 8005ae6:	059a      	lsls	r2, r3, #22
 8005ae8:	d402      	bmi.n	8005af0 <_vfiprintf_r+0x220>
 8005aea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aec:	f7ff fc1b 	bl	8005326 <__retarget_lock_release_recursive>
 8005af0:	89ab      	ldrh	r3, [r5, #12]
 8005af2:	065b      	lsls	r3, r3, #25
 8005af4:	f53f af12 	bmi.w	800591c <_vfiprintf_r+0x4c>
 8005af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005afa:	e711      	b.n	8005920 <_vfiprintf_r+0x50>
 8005afc:	ab03      	add	r3, sp, #12
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	462a      	mov	r2, r5
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <_vfiprintf_r+0x258>)
 8005b04:	a904      	add	r1, sp, #16
 8005b06:	4630      	mov	r0, r6
 8005b08:	f000 f880 	bl	8005c0c <_printf_i>
 8005b0c:	e7e4      	b.n	8005ad8 <_vfiprintf_r+0x208>
 8005b0e:	bf00      	nop
 8005b10:	08006f6c 	.word	0x08006f6c
 8005b14:	08006f8c 	.word	0x08006f8c
 8005b18:	08006f4c 	.word	0x08006f4c
 8005b1c:	08006fac 	.word	0x08006fac
 8005b20:	08006fb6 	.word	0x08006fb6
 8005b24:	00000000 	.word	0x00000000
 8005b28:	080058ab 	.word	0x080058ab
 8005b2c:	08006fb2 	.word	0x08006fb2

08005b30 <_printf_common>:
 8005b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b34:	4616      	mov	r6, r2
 8005b36:	4699      	mov	r9, r3
 8005b38:	688a      	ldr	r2, [r1, #8]
 8005b3a:	690b      	ldr	r3, [r1, #16]
 8005b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bfb8      	it	lt
 8005b44:	4613      	movlt	r3, r2
 8005b46:	6033      	str	r3, [r6, #0]
 8005b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b4c:	4607      	mov	r7, r0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	b10a      	cbz	r2, 8005b56 <_printf_common+0x26>
 8005b52:	3301      	adds	r3, #1
 8005b54:	6033      	str	r3, [r6, #0]
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	0699      	lsls	r1, r3, #26
 8005b5a:	bf42      	ittt	mi
 8005b5c:	6833      	ldrmi	r3, [r6, #0]
 8005b5e:	3302      	addmi	r3, #2
 8005b60:	6033      	strmi	r3, [r6, #0]
 8005b62:	6825      	ldr	r5, [r4, #0]
 8005b64:	f015 0506 	ands.w	r5, r5, #6
 8005b68:	d106      	bne.n	8005b78 <_printf_common+0x48>
 8005b6a:	f104 0a19 	add.w	sl, r4, #25
 8005b6e:	68e3      	ldr	r3, [r4, #12]
 8005b70:	6832      	ldr	r2, [r6, #0]
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	42ab      	cmp	r3, r5
 8005b76:	dc26      	bgt.n	8005bc6 <_printf_common+0x96>
 8005b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b7c:	1e13      	subs	r3, r2, #0
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	bf18      	it	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	0692      	lsls	r2, r2, #26
 8005b86:	d42b      	bmi.n	8005be0 <_printf_common+0xb0>
 8005b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4638      	mov	r0, r7
 8005b90:	47c0      	blx	r8
 8005b92:	3001      	adds	r0, #1
 8005b94:	d01e      	beq.n	8005bd4 <_printf_common+0xa4>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	68e5      	ldr	r5, [r4, #12]
 8005b9a:	6832      	ldr	r2, [r6, #0]
 8005b9c:	f003 0306 	and.w	r3, r3, #6
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	bf08      	it	eq
 8005ba4:	1aad      	subeq	r5, r5, r2
 8005ba6:	68a3      	ldr	r3, [r4, #8]
 8005ba8:	6922      	ldr	r2, [r4, #16]
 8005baa:	bf0c      	ite	eq
 8005bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb0:	2500      	movne	r5, #0
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	bfc4      	itt	gt
 8005bb6:	1a9b      	subgt	r3, r3, r2
 8005bb8:	18ed      	addgt	r5, r5, r3
 8005bba:	2600      	movs	r6, #0
 8005bbc:	341a      	adds	r4, #26
 8005bbe:	42b5      	cmp	r5, r6
 8005bc0:	d11a      	bne.n	8005bf8 <_printf_common+0xc8>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e008      	b.n	8005bd8 <_printf_common+0xa8>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4652      	mov	r2, sl
 8005bca:	4649      	mov	r1, r9
 8005bcc:	4638      	mov	r0, r7
 8005bce:	47c0      	blx	r8
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d103      	bne.n	8005bdc <_printf_common+0xac>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bdc:	3501      	adds	r5, #1
 8005bde:	e7c6      	b.n	8005b6e <_printf_common+0x3e>
 8005be0:	18e1      	adds	r1, r4, r3
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	2030      	movs	r0, #48	; 0x30
 8005be6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bea:	4422      	add	r2, r4
 8005bec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	e7c7      	b.n	8005b88 <_printf_common+0x58>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4638      	mov	r0, r7
 8005c00:	47c0      	blx	r8
 8005c02:	3001      	adds	r0, #1
 8005c04:	d0e6      	beq.n	8005bd4 <_printf_common+0xa4>
 8005c06:	3601      	adds	r6, #1
 8005c08:	e7d9      	b.n	8005bbe <_printf_common+0x8e>
	...

08005c0c <_printf_i>:
 8005c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c10:	7e0f      	ldrb	r7, [r1, #24]
 8005c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c14:	2f78      	cmp	r7, #120	; 0x78
 8005c16:	4691      	mov	r9, r2
 8005c18:	4680      	mov	r8, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	469a      	mov	sl, r3
 8005c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c22:	d807      	bhi.n	8005c34 <_printf_i+0x28>
 8005c24:	2f62      	cmp	r7, #98	; 0x62
 8005c26:	d80a      	bhi.n	8005c3e <_printf_i+0x32>
 8005c28:	2f00      	cmp	r7, #0
 8005c2a:	f000 80d8 	beq.w	8005dde <_printf_i+0x1d2>
 8005c2e:	2f58      	cmp	r7, #88	; 0x58
 8005c30:	f000 80a3 	beq.w	8005d7a <_printf_i+0x16e>
 8005c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c3c:	e03a      	b.n	8005cb4 <_printf_i+0xa8>
 8005c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c42:	2b15      	cmp	r3, #21
 8005c44:	d8f6      	bhi.n	8005c34 <_printf_i+0x28>
 8005c46:	a101      	add	r1, pc, #4	; (adr r1, 8005c4c <_printf_i+0x40>)
 8005c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c4c:	08005ca5 	.word	0x08005ca5
 8005c50:	08005cb9 	.word	0x08005cb9
 8005c54:	08005c35 	.word	0x08005c35
 8005c58:	08005c35 	.word	0x08005c35
 8005c5c:	08005c35 	.word	0x08005c35
 8005c60:	08005c35 	.word	0x08005c35
 8005c64:	08005cb9 	.word	0x08005cb9
 8005c68:	08005c35 	.word	0x08005c35
 8005c6c:	08005c35 	.word	0x08005c35
 8005c70:	08005c35 	.word	0x08005c35
 8005c74:	08005c35 	.word	0x08005c35
 8005c78:	08005dc5 	.word	0x08005dc5
 8005c7c:	08005ce9 	.word	0x08005ce9
 8005c80:	08005da7 	.word	0x08005da7
 8005c84:	08005c35 	.word	0x08005c35
 8005c88:	08005c35 	.word	0x08005c35
 8005c8c:	08005de7 	.word	0x08005de7
 8005c90:	08005c35 	.word	0x08005c35
 8005c94:	08005ce9 	.word	0x08005ce9
 8005c98:	08005c35 	.word	0x08005c35
 8005c9c:	08005c35 	.word	0x08005c35
 8005ca0:	08005daf 	.word	0x08005daf
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	1d1a      	adds	r2, r3, #4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	602a      	str	r2, [r5, #0]
 8005cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e0a3      	b.n	8005e00 <_printf_i+0x1f4>
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	6829      	ldr	r1, [r5, #0]
 8005cbc:	0606      	lsls	r6, r0, #24
 8005cbe:	f101 0304 	add.w	r3, r1, #4
 8005cc2:	d50a      	bpl.n	8005cda <_printf_i+0xce>
 8005cc4:	680e      	ldr	r6, [r1, #0]
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	da03      	bge.n	8005cd4 <_printf_i+0xc8>
 8005ccc:	232d      	movs	r3, #45	; 0x2d
 8005cce:	4276      	negs	r6, r6
 8005cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd4:	485e      	ldr	r0, [pc, #376]	; (8005e50 <_printf_i+0x244>)
 8005cd6:	230a      	movs	r3, #10
 8005cd8:	e019      	b.n	8005d0e <_printf_i+0x102>
 8005cda:	680e      	ldr	r6, [r1, #0]
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ce2:	bf18      	it	ne
 8005ce4:	b236      	sxthne	r6, r6
 8005ce6:	e7ef      	b.n	8005cc8 <_printf_i+0xbc>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	6820      	ldr	r0, [r4, #0]
 8005cec:	1d19      	adds	r1, r3, #4
 8005cee:	6029      	str	r1, [r5, #0]
 8005cf0:	0601      	lsls	r1, r0, #24
 8005cf2:	d501      	bpl.n	8005cf8 <_printf_i+0xec>
 8005cf4:	681e      	ldr	r6, [r3, #0]
 8005cf6:	e002      	b.n	8005cfe <_printf_i+0xf2>
 8005cf8:	0646      	lsls	r6, r0, #25
 8005cfa:	d5fb      	bpl.n	8005cf4 <_printf_i+0xe8>
 8005cfc:	881e      	ldrh	r6, [r3, #0]
 8005cfe:	4854      	ldr	r0, [pc, #336]	; (8005e50 <_printf_i+0x244>)
 8005d00:	2f6f      	cmp	r7, #111	; 0x6f
 8005d02:	bf0c      	ite	eq
 8005d04:	2308      	moveq	r3, #8
 8005d06:	230a      	movne	r3, #10
 8005d08:	2100      	movs	r1, #0
 8005d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d0e:	6865      	ldr	r5, [r4, #4]
 8005d10:	60a5      	str	r5, [r4, #8]
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	bfa2      	ittt	ge
 8005d16:	6821      	ldrge	r1, [r4, #0]
 8005d18:	f021 0104 	bicge.w	r1, r1, #4
 8005d1c:	6021      	strge	r1, [r4, #0]
 8005d1e:	b90e      	cbnz	r6, 8005d24 <_printf_i+0x118>
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	d04d      	beq.n	8005dc0 <_printf_i+0x1b4>
 8005d24:	4615      	mov	r5, r2
 8005d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d2e:	5dc7      	ldrb	r7, [r0, r7]
 8005d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d34:	4637      	mov	r7, r6
 8005d36:	42bb      	cmp	r3, r7
 8005d38:	460e      	mov	r6, r1
 8005d3a:	d9f4      	bls.n	8005d26 <_printf_i+0x11a>
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d10b      	bne.n	8005d58 <_printf_i+0x14c>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	07de      	lsls	r6, r3, #31
 8005d44:	d508      	bpl.n	8005d58 <_printf_i+0x14c>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	6861      	ldr	r1, [r4, #4]
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	bfde      	ittt	le
 8005d4e:	2330      	movle	r3, #48	; 0x30
 8005d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d58:	1b52      	subs	r2, r2, r5
 8005d5a:	6122      	str	r2, [r4, #16]
 8005d5c:	f8cd a000 	str.w	sl, [sp]
 8005d60:	464b      	mov	r3, r9
 8005d62:	aa03      	add	r2, sp, #12
 8005d64:	4621      	mov	r1, r4
 8005d66:	4640      	mov	r0, r8
 8005d68:	f7ff fee2 	bl	8005b30 <_printf_common>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d14c      	bne.n	8005e0a <_printf_i+0x1fe>
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	b004      	add	sp, #16
 8005d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7a:	4835      	ldr	r0, [pc, #212]	; (8005e50 <_printf_i+0x244>)
 8005d7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d80:	6829      	ldr	r1, [r5, #0]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d88:	6029      	str	r1, [r5, #0]
 8005d8a:	061d      	lsls	r5, r3, #24
 8005d8c:	d514      	bpl.n	8005db8 <_printf_i+0x1ac>
 8005d8e:	07df      	lsls	r7, r3, #31
 8005d90:	bf44      	itt	mi
 8005d92:	f043 0320 	orrmi.w	r3, r3, #32
 8005d96:	6023      	strmi	r3, [r4, #0]
 8005d98:	b91e      	cbnz	r6, 8005da2 <_printf_i+0x196>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	f023 0320 	bic.w	r3, r3, #32
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	2310      	movs	r3, #16
 8005da4:	e7b0      	b.n	8005d08 <_printf_i+0xfc>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	f043 0320 	orr.w	r3, r3, #32
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	2378      	movs	r3, #120	; 0x78
 8005db0:	4828      	ldr	r0, [pc, #160]	; (8005e54 <_printf_i+0x248>)
 8005db2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005db6:	e7e3      	b.n	8005d80 <_printf_i+0x174>
 8005db8:	0659      	lsls	r1, r3, #25
 8005dba:	bf48      	it	mi
 8005dbc:	b2b6      	uxthmi	r6, r6
 8005dbe:	e7e6      	b.n	8005d8e <_printf_i+0x182>
 8005dc0:	4615      	mov	r5, r2
 8005dc2:	e7bb      	b.n	8005d3c <_printf_i+0x130>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	6826      	ldr	r6, [r4, #0]
 8005dc8:	6961      	ldr	r1, [r4, #20]
 8005dca:	1d18      	adds	r0, r3, #4
 8005dcc:	6028      	str	r0, [r5, #0]
 8005dce:	0635      	lsls	r5, r6, #24
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	d501      	bpl.n	8005dd8 <_printf_i+0x1cc>
 8005dd4:	6019      	str	r1, [r3, #0]
 8005dd6:	e002      	b.n	8005dde <_printf_i+0x1d2>
 8005dd8:	0670      	lsls	r0, r6, #25
 8005dda:	d5fb      	bpl.n	8005dd4 <_printf_i+0x1c8>
 8005ddc:	8019      	strh	r1, [r3, #0]
 8005dde:	2300      	movs	r3, #0
 8005de0:	6123      	str	r3, [r4, #16]
 8005de2:	4615      	mov	r5, r2
 8005de4:	e7ba      	b.n	8005d5c <_printf_i+0x150>
 8005de6:	682b      	ldr	r3, [r5, #0]
 8005de8:	1d1a      	adds	r2, r3, #4
 8005dea:	602a      	str	r2, [r5, #0]
 8005dec:	681d      	ldr	r5, [r3, #0]
 8005dee:	6862      	ldr	r2, [r4, #4]
 8005df0:	2100      	movs	r1, #0
 8005df2:	4628      	mov	r0, r5
 8005df4:	f7fa f9f4 	bl	80001e0 <memchr>
 8005df8:	b108      	cbz	r0, 8005dfe <_printf_i+0x1f2>
 8005dfa:	1b40      	subs	r0, r0, r5
 8005dfc:	6060      	str	r0, [r4, #4]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	2300      	movs	r3, #0
 8005e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e08:	e7a8      	b.n	8005d5c <_printf_i+0x150>
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	4649      	mov	r1, r9
 8005e10:	4640      	mov	r0, r8
 8005e12:	47d0      	blx	sl
 8005e14:	3001      	adds	r0, #1
 8005e16:	d0ab      	beq.n	8005d70 <_printf_i+0x164>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	079b      	lsls	r3, r3, #30
 8005e1c:	d413      	bmi.n	8005e46 <_printf_i+0x23a>
 8005e1e:	68e0      	ldr	r0, [r4, #12]
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	4298      	cmp	r0, r3
 8005e24:	bfb8      	it	lt
 8005e26:	4618      	movlt	r0, r3
 8005e28:	e7a4      	b.n	8005d74 <_printf_i+0x168>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4632      	mov	r2, r6
 8005e2e:	4649      	mov	r1, r9
 8005e30:	4640      	mov	r0, r8
 8005e32:	47d0      	blx	sl
 8005e34:	3001      	adds	r0, #1
 8005e36:	d09b      	beq.n	8005d70 <_printf_i+0x164>
 8005e38:	3501      	adds	r5, #1
 8005e3a:	68e3      	ldr	r3, [r4, #12]
 8005e3c:	9903      	ldr	r1, [sp, #12]
 8005e3e:	1a5b      	subs	r3, r3, r1
 8005e40:	42ab      	cmp	r3, r5
 8005e42:	dcf2      	bgt.n	8005e2a <_printf_i+0x21e>
 8005e44:	e7eb      	b.n	8005e1e <_printf_i+0x212>
 8005e46:	2500      	movs	r5, #0
 8005e48:	f104 0619 	add.w	r6, r4, #25
 8005e4c:	e7f5      	b.n	8005e3a <_printf_i+0x22e>
 8005e4e:	bf00      	nop
 8005e50:	08006fbd 	.word	0x08006fbd
 8005e54:	08006fce 	.word	0x08006fce

08005e58 <_sbrk_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4d06      	ldr	r5, [pc, #24]	; (8005e74 <_sbrk_r+0x1c>)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4604      	mov	r4, r0
 8005e60:	4608      	mov	r0, r1
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	f7fe fdf2 	bl	8004a4c <_sbrk>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_sbrk_r+0x1a>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_sbrk_r+0x1a>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	20001330 	.word	0x20001330

08005e78 <__sread>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e80:	f000 f8f2 	bl	8006068 <_read_r>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	bfab      	itete	ge
 8005e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e8c:	181b      	addge	r3, r3, r0
 8005e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e92:	bfac      	ite	ge
 8005e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e96:	81a3      	strhlt	r3, [r4, #12]
 8005e98:	bd10      	pop	{r4, pc}

08005e9a <__swrite>:
 8005e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9e:	461f      	mov	r7, r3
 8005ea0:	898b      	ldrh	r3, [r1, #12]
 8005ea2:	05db      	lsls	r3, r3, #23
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	d505      	bpl.n	8005eb8 <__swrite+0x1e>
 8005eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f000 f870 	bl	8005f98 <_lseek_r>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	4628      	mov	r0, r5
 8005eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ece:	f000 b817 	b.w	8005f00 <_write_r>

08005ed2 <__sseek>:
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eda:	f000 f85d 	bl	8005f98 <_lseek_r>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	bf15      	itete	ne
 8005ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eee:	81a3      	strheq	r3, [r4, #12]
 8005ef0:	bf18      	it	ne
 8005ef2:	81a3      	strhne	r3, [r4, #12]
 8005ef4:	bd10      	pop	{r4, pc}

08005ef6 <__sclose>:
 8005ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efa:	f000 b81b 	b.w	8005f34 <_close_r>
	...

08005f00 <_write_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d07      	ldr	r5, [pc, #28]	; (8005f20 <_write_r+0x20>)
 8005f04:	4604      	mov	r4, r0
 8005f06:	4608      	mov	r0, r1
 8005f08:	4611      	mov	r1, r2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	602a      	str	r2, [r5, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f7fe fd8e 	bl	8004a30 <_write>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_write_r+0x1e>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_write_r+0x1e>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	20001330 	.word	0x20001330

08005f24 <abort>:
 8005f24:	b508      	push	{r3, lr}
 8005f26:	2006      	movs	r0, #6
 8005f28:	f000 f8d8 	bl	80060dc <raise>
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	f7fe fd72 	bl	8004a16 <_exit>
	...

08005f34 <_close_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d06      	ldr	r5, [pc, #24]	; (8005f50 <_close_r+0x1c>)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	f7fe fd9e 	bl	8004a80 <_close>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_close_r+0x1a>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_close_r+0x1a>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	20001330 	.word	0x20001330

08005f54 <_fstat_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4d07      	ldr	r5, [pc, #28]	; (8005f74 <_fstat_r+0x20>)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	f7fe fd90 	bl	8004a86 <_fstat>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	d102      	bne.n	8005f70 <_fstat_r+0x1c>
 8005f6a:	682b      	ldr	r3, [r5, #0]
 8005f6c:	b103      	cbz	r3, 8005f70 <_fstat_r+0x1c>
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	bd38      	pop	{r3, r4, r5, pc}
 8005f72:	bf00      	nop
 8005f74:	20001330 	.word	0x20001330

08005f78 <_isatty_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d06      	ldr	r5, [pc, #24]	; (8005f94 <_isatty_r+0x1c>)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	602b      	str	r3, [r5, #0]
 8005f84:	f7fe fd84 	bl	8004a90 <_isatty>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d102      	bne.n	8005f92 <_isatty_r+0x1a>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	b103      	cbz	r3, 8005f92 <_isatty_r+0x1a>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	20001330 	.word	0x20001330

08005f98 <_lseek_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d07      	ldr	r5, [pc, #28]	; (8005fb8 <_lseek_r+0x20>)
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	4608      	mov	r0, r1
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	602a      	str	r2, [r5, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f7fe fd74 	bl	8004a94 <_lseek>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d102      	bne.n	8005fb6 <_lseek_r+0x1e>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	b103      	cbz	r3, 8005fb6 <_lseek_r+0x1e>
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	20001330 	.word	0x20001330

08005fbc <memmove>:
 8005fbc:	4288      	cmp	r0, r1
 8005fbe:	b510      	push	{r4, lr}
 8005fc0:	eb01 0402 	add.w	r4, r1, r2
 8005fc4:	d902      	bls.n	8005fcc <memmove+0x10>
 8005fc6:	4284      	cmp	r4, r0
 8005fc8:	4623      	mov	r3, r4
 8005fca:	d807      	bhi.n	8005fdc <memmove+0x20>
 8005fcc:	1e43      	subs	r3, r0, #1
 8005fce:	42a1      	cmp	r1, r4
 8005fd0:	d008      	beq.n	8005fe4 <memmove+0x28>
 8005fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fda:	e7f8      	b.n	8005fce <memmove+0x12>
 8005fdc:	4402      	add	r2, r0
 8005fde:	4601      	mov	r1, r0
 8005fe0:	428a      	cmp	r2, r1
 8005fe2:	d100      	bne.n	8005fe6 <memmove+0x2a>
 8005fe4:	bd10      	pop	{r4, pc}
 8005fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fee:	e7f7      	b.n	8005fe0 <memmove+0x24>

08005ff0 <__malloc_lock>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	; (8005ff8 <__malloc_lock+0x8>)
 8005ff2:	f7ff b997 	b.w	8005324 <__retarget_lock_acquire_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	20001324 	.word	0x20001324

08005ffc <__malloc_unlock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__malloc_unlock+0x8>)
 8005ffe:	f7ff b992 	b.w	8005326 <__retarget_lock_release_recursive>
 8006002:	bf00      	nop
 8006004:	20001324 	.word	0x20001324

08006008 <_realloc_r>:
 8006008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800600c:	4680      	mov	r8, r0
 800600e:	4614      	mov	r4, r2
 8006010:	460e      	mov	r6, r1
 8006012:	b921      	cbnz	r1, 800601e <_realloc_r+0x16>
 8006014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006018:	4611      	mov	r1, r2
 800601a:	f7ff ba5f 	b.w	80054dc <_malloc_r>
 800601e:	b92a      	cbnz	r2, 800602c <_realloc_r+0x24>
 8006020:	f7ff f9f0 	bl	8005404 <_free_r>
 8006024:	4625      	mov	r5, r4
 8006026:	4628      	mov	r0, r5
 8006028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800602c:	f000 f872 	bl	8006114 <_malloc_usable_size_r>
 8006030:	4284      	cmp	r4, r0
 8006032:	4607      	mov	r7, r0
 8006034:	d802      	bhi.n	800603c <_realloc_r+0x34>
 8006036:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800603a:	d812      	bhi.n	8006062 <_realloc_r+0x5a>
 800603c:	4621      	mov	r1, r4
 800603e:	4640      	mov	r0, r8
 8006040:	f7ff fa4c 	bl	80054dc <_malloc_r>
 8006044:	4605      	mov	r5, r0
 8006046:	2800      	cmp	r0, #0
 8006048:	d0ed      	beq.n	8006026 <_realloc_r+0x1e>
 800604a:	42bc      	cmp	r4, r7
 800604c:	4622      	mov	r2, r4
 800604e:	4631      	mov	r1, r6
 8006050:	bf28      	it	cs
 8006052:	463a      	movcs	r2, r7
 8006054:	f7fe fd4a 	bl	8004aec <memcpy>
 8006058:	4631      	mov	r1, r6
 800605a:	4640      	mov	r0, r8
 800605c:	f7ff f9d2 	bl	8005404 <_free_r>
 8006060:	e7e1      	b.n	8006026 <_realloc_r+0x1e>
 8006062:	4635      	mov	r5, r6
 8006064:	e7df      	b.n	8006026 <_realloc_r+0x1e>
	...

08006068 <_read_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4d07      	ldr	r5, [pc, #28]	; (8006088 <_read_r+0x20>)
 800606c:	4604      	mov	r4, r0
 800606e:	4608      	mov	r0, r1
 8006070:	4611      	mov	r1, r2
 8006072:	2200      	movs	r2, #0
 8006074:	602a      	str	r2, [r5, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	f7fe fcd3 	bl	8004a22 <_read>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d102      	bne.n	8006086 <_read_r+0x1e>
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	b103      	cbz	r3, 8006086 <_read_r+0x1e>
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	bd38      	pop	{r3, r4, r5, pc}
 8006088:	20001330 	.word	0x20001330

0800608c <_raise_r>:
 800608c:	291f      	cmp	r1, #31
 800608e:	b538      	push	{r3, r4, r5, lr}
 8006090:	4604      	mov	r4, r0
 8006092:	460d      	mov	r5, r1
 8006094:	d904      	bls.n	80060a0 <_raise_r+0x14>
 8006096:	2316      	movs	r3, #22
 8006098:	6003      	str	r3, [r0, #0]
 800609a:	f04f 30ff 	mov.w	r0, #4294967295
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060a2:	b112      	cbz	r2, 80060aa <_raise_r+0x1e>
 80060a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060a8:	b94b      	cbnz	r3, 80060be <_raise_r+0x32>
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 f830 	bl	8006110 <_getpid_r>
 80060b0:	462a      	mov	r2, r5
 80060b2:	4601      	mov	r1, r0
 80060b4:	4620      	mov	r0, r4
 80060b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ba:	f000 b817 	b.w	80060ec <_kill_r>
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d00a      	beq.n	80060d8 <_raise_r+0x4c>
 80060c2:	1c59      	adds	r1, r3, #1
 80060c4:	d103      	bne.n	80060ce <_raise_r+0x42>
 80060c6:	2316      	movs	r3, #22
 80060c8:	6003      	str	r3, [r0, #0]
 80060ca:	2001      	movs	r0, #1
 80060cc:	e7e7      	b.n	800609e <_raise_r+0x12>
 80060ce:	2400      	movs	r4, #0
 80060d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060d4:	4628      	mov	r0, r5
 80060d6:	4798      	blx	r3
 80060d8:	2000      	movs	r0, #0
 80060da:	e7e0      	b.n	800609e <_raise_r+0x12>

080060dc <raise>:
 80060dc:	4b02      	ldr	r3, [pc, #8]	; (80060e8 <raise+0xc>)
 80060de:	4601      	mov	r1, r0
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	f7ff bfd3 	b.w	800608c <_raise_r>
 80060e6:	bf00      	nop
 80060e8:	2000003c 	.word	0x2000003c

080060ec <_kill_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4d07      	ldr	r5, [pc, #28]	; (800610c <_kill_r+0x20>)
 80060f0:	2300      	movs	r3, #0
 80060f2:	4604      	mov	r4, r0
 80060f4:	4608      	mov	r0, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	602b      	str	r3, [r5, #0]
 80060fa:	f7fe fc84 	bl	8004a06 <_kill>
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	d102      	bne.n	8006108 <_kill_r+0x1c>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	b103      	cbz	r3, 8006108 <_kill_r+0x1c>
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	bd38      	pop	{r3, r4, r5, pc}
 800610a:	bf00      	nop
 800610c:	20001330 	.word	0x20001330

08006110 <_getpid_r>:
 8006110:	f7fe bc77 	b.w	8004a02 <_getpid>

08006114 <_malloc_usable_size_r>:
 8006114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006118:	1f18      	subs	r0, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	bfbc      	itt	lt
 800611e:	580b      	ldrlt	r3, [r1, r0]
 8006120:	18c0      	addlt	r0, r0, r3
 8006122:	4770      	bx	lr

08006124 <_init>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr

08006130 <_fini>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	bf00      	nop
 8006134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006136:	bc08      	pop	{r3}
 8006138:	469e      	mov	lr, r3
 800613a:	4770      	bx	lr
 800613c:	0000      	movs	r0, r0
	...
